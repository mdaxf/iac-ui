{
  "version": 3,
  "sources": ["../../png-chunks-extract/index.js"],
  "sourcesContent": ["var crc32 = require('crc-32')\n\nmodule.exports = extractChunks\n\n// Used for fast-ish conversion between uint8s and uint32s/int32s.\n// Also required in order to remain agnostic for both Node Buffers and\n// Uint8Arrays.\nvar uint8 = new Uint8Array(4)\nvar int32 = new Int32Array(uint8.buffer)\nvar uint32 = new Uint32Array(uint8.buffer)\n\nfunction extractChunks (data) {\n  if (data[0] !== 0x89) throw new Error('Invalid .png file header')\n  if (data[1] !== 0x50) throw new Error('Invalid .png file header')\n  if (data[2] !== 0x4E) throw new Error('Invalid .png file header')\n  if (data[3] !== 0x47) throw new Error('Invalid .png file header')\n  if (data[4] !== 0x0D) throw new Error('Invalid .png file header: possibly caused by DOS-Unix line ending conversion?')\n  if (data[5] !== 0x0A) throw new Error('Invalid .png file header: possibly caused by DOS-Unix line ending conversion?')\n  if (data[6] !== 0x1A) throw new Error('Invalid .png file header')\n  if (data[7] !== 0x0A) throw new Error('Invalid .png file header: possibly caused by DOS-Unix line ending conversion?')\n\n  var ended = false\n  var chunks = []\n  var idx = 8\n\n  while (idx < data.length) {\n    // Read the length of the current chunk,\n    // which is stored as a Uint32.\n    uint8[3] = data[idx++]\n    uint8[2] = data[idx++]\n    uint8[1] = data[idx++]\n    uint8[0] = data[idx++]\n\n    // Chunk includes name/type for CRC check (see below).\n    var length = uint32[0] + 4\n    var chunk = new Uint8Array(length)\n    chunk[0] = data[idx++]\n    chunk[1] = data[idx++]\n    chunk[2] = data[idx++]\n    chunk[3] = data[idx++]\n\n    // Get the name in ASCII for identification.\n    var name = (\n      String.fromCharCode(chunk[0]) +\n      String.fromCharCode(chunk[1]) +\n      String.fromCharCode(chunk[2]) +\n      String.fromCharCode(chunk[3])\n    )\n\n    // The IHDR header MUST come first.\n    if (!chunks.length && name !== 'IHDR') {\n      throw new Error('IHDR header missing')\n    }\n\n    // The IEND header marks the end of the file,\n    // so on discovering it break out of the loop.\n    if (name === 'IEND') {\n      ended = true\n      chunks.push({\n        name: name,\n        data: new Uint8Array(0)\n      })\n\n      break\n    }\n\n    // Read the contents of the chunk out of the main buffer.\n    for (var i = 4; i < length; i++) {\n      chunk[i] = data[idx++]\n    }\n\n    // Read out the CRC value for comparison.\n    // It's stored as an Int32.\n    uint8[3] = data[idx++]\n    uint8[2] = data[idx++]\n    uint8[1] = data[idx++]\n    uint8[0] = data[idx++]\n\n    var crcActual = int32[0]\n    var crcExpect = crc32.buf(chunk)\n    if (crcExpect !== crcActual) {\n      throw new Error(\n        'CRC values for ' + name + ' header do not match, PNG file is likely corrupted'\n      )\n    }\n\n    // The chunk data is now copied to remove the 4 preceding\n    // bytes used for the chunk name/type.\n    var chunkData = new Uint8Array(chunk.buffer.slice(4))\n\n    chunks.push({\n      name: name,\n      data: chunkData\n    })\n  }\n\n  if (!ended) {\n    throw new Error('.png file ended prematurely: no IEND header was found')\n  }\n\n  return chunks\n}\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAAA,QAAI,QAAQ;AAEZ,WAAO,UAAU;AAKjB,QAAI,QAAQ,IAAI,WAAW,CAAC;AAC5B,QAAI,QAAQ,IAAI,WAAW,MAAM,MAAM;AACvC,QAAI,SAAS,IAAI,YAAY,MAAM,MAAM;AAEzC,aAAS,cAAe,MAAM;AAC5B,UAAI,KAAK,CAAC,MAAM;AAAM,cAAM,IAAI,MAAM,0BAA0B;AAChE,UAAI,KAAK,CAAC,MAAM;AAAM,cAAM,IAAI,MAAM,0BAA0B;AAChE,UAAI,KAAK,CAAC,MAAM;AAAM,cAAM,IAAI,MAAM,0BAA0B;AAChE,UAAI,KAAK,CAAC,MAAM;AAAM,cAAM,IAAI,MAAM,0BAA0B;AAChE,UAAI,KAAK,CAAC,MAAM;AAAM,cAAM,IAAI,MAAM,+EAA+E;AACrH,UAAI,KAAK,CAAC,MAAM;AAAM,cAAM,IAAI,MAAM,+EAA+E;AACrH,UAAI,KAAK,CAAC,MAAM;AAAM,cAAM,IAAI,MAAM,0BAA0B;AAChE,UAAI,KAAK,CAAC,MAAM;AAAM,cAAM,IAAI,MAAM,+EAA+E;AAErH,UAAI,QAAQ;AACZ,UAAI,SAAS,CAAC;AACd,UAAI,MAAM;AAEV,aAAO,MAAM,KAAK,QAAQ;AAGxB,cAAM,CAAC,IAAI,KAAK,KAAK;AACrB,cAAM,CAAC,IAAI,KAAK,KAAK;AACrB,cAAM,CAAC,IAAI,KAAK,KAAK;AACrB,cAAM,CAAC,IAAI,KAAK,KAAK;AAGrB,YAAI,SAAS,OAAO,CAAC,IAAI;AACzB,YAAI,QAAQ,IAAI,WAAW,MAAM;AACjC,cAAM,CAAC,IAAI,KAAK,KAAK;AACrB,cAAM,CAAC,IAAI,KAAK,KAAK;AACrB,cAAM,CAAC,IAAI,KAAK,KAAK;AACrB,cAAM,CAAC,IAAI,KAAK,KAAK;AAGrB,YAAI,OACF,OAAO,aAAa,MAAM,CAAC,CAAC,IAC5B,OAAO,aAAa,MAAM,CAAC,CAAC,IAC5B,OAAO,aAAa,MAAM,CAAC,CAAC,IAC5B,OAAO,aAAa,MAAM,CAAC,CAAC;AAI9B,YAAI,CAAC,OAAO,UAAU,SAAS,QAAQ;AACrC,gBAAM,IAAI,MAAM,qBAAqB;AAAA,QACvC;AAIA,YAAI,SAAS,QAAQ;AACnB,kBAAQ;AACR,iBAAO,KAAK;AAAA,YACV;AAAA,YACA,MAAM,IAAI,WAAW,CAAC;AAAA,UACxB,CAAC;AAED;AAAA,QACF;AAGA,iBAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,gBAAM,CAAC,IAAI,KAAK,KAAK;AAAA,QACvB;AAIA,cAAM,CAAC,IAAI,KAAK,KAAK;AACrB,cAAM,CAAC,IAAI,KAAK,KAAK;AACrB,cAAM,CAAC,IAAI,KAAK,KAAK;AACrB,cAAM,CAAC,IAAI,KAAK,KAAK;AAErB,YAAI,YAAY,MAAM,CAAC;AACvB,YAAI,YAAY,MAAM,IAAI,KAAK;AAC/B,YAAI,cAAc,WAAW;AAC3B,gBAAM,IAAI;AAAA,YACR,oBAAoB,OAAO;AAAA,UAC7B;AAAA,QACF;AAIA,YAAI,YAAY,IAAI,WAAW,MAAM,OAAO,MAAM,CAAC,CAAC;AAEpD,eAAO,KAAK;AAAA,UACV;AAAA,UACA,MAAM;AAAA,QACR,CAAC;AAAA,MACH;AAEA,UAAI,CAAC,OAAO;AACV,cAAM,IAAI,MAAM,uDAAuD;AAAA,MACzE;AAEA,aAAO;AAAA,IACT;AAAA;AAAA;",
  "names": []
}
