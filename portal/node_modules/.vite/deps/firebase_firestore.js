import {
  Component,
  LogLevel,
  Logger,
  getModularInstance,
  getUA,
  index_esm_default,
  isBrowserExtension,
  isElectron,
  isIE,
  isMobileCordova,
  isReactNative,
  isUWP
} from "./chunk-TPGNHK6L.js";
import {
  __awaiter,
  __extends,
  __generator,
  __spreadArray
} from "./chunk-YZCXNGQM.js";
import "./chunk-M4N47H3X.js";

// node_modules/@firebase/webchannel-wrapper/dist/index.esm.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p2 in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p2))
        d2[p2] = b2[p2];
  };
  return extendStatics(d, b);
};
function __extends2(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
var h;
var goog = goog || {};
var k = commonjsGlobal || self;
function aa() {
}
function ba(a) {
  var b = typeof a;
  b = "object" != b ? b : a ? Array.isArray(a) ? "array" : b : "null";
  return "array" == b || "object" == b && "number" == typeof a.length;
}
function n(a) {
  var b = typeof a;
  return "object" == b && null != a || "function" == b;
}
function ca(a) {
  return Object.prototype.hasOwnProperty.call(a, da) && a[da] || (a[da] = ++ea);
}
var da = "closure_uid_" + (1e9 * Math.random() >>> 0);
var ea = 0;
function fa(a, b, c) {
  return a.call.apply(a.bind, arguments);
}
function ha(a, b, c) {
  if (!a)
    throw Error();
  if (2 < arguments.length) {
    var d = Array.prototype.slice.call(arguments, 2);
    return function() {
      var e = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(e, d);
      return a.apply(b, e);
    };
  }
  return function() {
    return a.apply(b, arguments);
  };
}
function p(a, b, c) {
  Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? p = fa : p = ha;
  return p.apply(null, arguments);
}
function ja(a, b) {
  var c = Array.prototype.slice.call(arguments, 1);
  return function() {
    var d = c.slice();
    d.push.apply(d, arguments);
    return a.apply(this, d);
  };
}
function q() {
  return Date.now();
}
function r(a, b) {
  function c() {
  }
  c.prototype = b.prototype;
  a.X = b.prototype;
  a.prototype = new c();
  a.prototype.constructor = a;
  a.Kb = function(d, e, f) {
    for (var g = Array(arguments.length - 2), m = 2; m < arguments.length; m++)
      g[m - 2] = arguments[m];
    return b.prototype[e].apply(d, g);
  };
}
function t() {
  this.j = this.j;
  this.i = this.i;
}
var ka = 0;
t.prototype.j = false;
t.prototype.ja = function() {
  if (!this.j && (this.j = true, this.G(), 0 != ka)) {
    var a = ca(this);
  }
};
t.prototype.G = function() {
  if (this.i)
    for (; this.i.length; )
      this.i.shift()();
};
var ma = Array.prototype.indexOf ? function(a, b) {
  return Array.prototype.indexOf.call(a, b, void 0);
} : function(a, b) {
  if ("string" === typeof a)
    return "string" !== typeof b || 1 != b.length ? -1 : a.indexOf(b, 0);
  for (var c = 0; c < a.length; c++)
    if (c in a && a[c] === b)
      return c;
  return -1;
};
var na = Array.prototype.forEach ? function(a, b, c) {
  Array.prototype.forEach.call(a, b, c);
} : function(a, b, c) {
  for (var d = a.length, e = "string" === typeof a ? a.split("") : a, f = 0; f < d; f++)
    f in e && b.call(c, e[f], f, a);
};
function oa(a) {
  a: {
    var b = pa;
    for (var c = a.length, d = "string" === typeof a ? a.split("") : a, e = 0; e < c; e++)
      if (e in d && b.call(void 0, d[e], e, a)) {
        b = e;
        break a;
      }
    b = -1;
  }
  return 0 > b ? null : "string" === typeof a ? a.charAt(b) : a[b];
}
function qa(a) {
  return Array.prototype.concat.apply([], arguments);
}
function ra(a) {
  var b = a.length;
  if (0 < b) {
    for (var c = Array(b), d = 0; d < b; d++)
      c[d] = a[d];
    return c;
  }
  return [];
}
function sa(a) {
  return /^[\s\xa0]*$/.test(a);
}
var ta = String.prototype.trim ? function(a) {
  return a.trim();
} : function(a) {
  return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
};
function v(a, b) {
  return -1 != a.indexOf(b);
}
function ua(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}
var w;
a: {
  va2 = k.navigator;
  if (va2) {
    wa2 = va2.userAgent;
    if (wa2) {
      w = wa2;
      break a;
    }
  }
  w = "";
}
var va2;
var wa2;
function za(a, b, c) {
  for (var d in a)
    b.call(c, a[d], d, a);
}
function Aa(a) {
  var b = {};
  for (var c in a)
    b[c] = a[c];
  return b;
}
var Ba = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
function Ca(a, b) {
  var c, d;
  for (var e = 1; e < arguments.length; e++) {
    d = arguments[e];
    for (c in d)
      a[c] = d[c];
    for (var f = 0; f < Ba.length; f++)
      c = Ba[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
  }
}
function Da(a) {
  Da[" "](a);
  return a;
}
Da[" "] = aa;
function Ea(a, b) {
  var c = Fa;
  return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
}
var Ga = v(w, "Opera");
var x = v(w, "Trident") || v(w, "MSIE");
var Ha = v(w, "Edge");
var Ia = Ha || x;
var Ja = v(w, "Gecko") && !(v(w.toLowerCase(), "webkit") && !v(w, "Edge")) && !(v(w, "Trident") || v(w, "MSIE")) && !v(w, "Edge");
var Ka = v(w.toLowerCase(), "webkit") && !v(w, "Edge");
function La() {
  var a = k.document;
  return a ? a.documentMode : void 0;
}
var Ma;
a: {
  Na2 = "", Oa2 = function() {
    var a = w;
    if (Ja)
      return /rv:([^\);]+)(\)|;)/.exec(a);
    if (Ha)
      return /Edge\/([\d\.]+)/.exec(a);
    if (x)
      return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
    if (Ka)
      return /WebKit\/(\S+)/.exec(a);
    if (Ga)
      return /(?:Version)[ \/]?(\S+)/.exec(a);
  }();
  Oa2 && (Na2 = Oa2 ? Oa2[1] : "");
  if (x) {
    Pa2 = La();
    if (null != Pa2 && Pa2 > parseFloat(Na2)) {
      Ma = String(Pa2);
      break a;
    }
  }
  Ma = Na2;
}
var Na2;
var Oa2;
var Pa2;
var Fa = {};
function Qa(a) {
  return Ea(a, function() {
    {
      var b = 0;
      var e = ta(String(Ma)).split("."), f = ta(String(a)).split("."), g = Math.max(e.length, f.length);
      for (var m = 0; 0 == b && m < g; m++) {
        var c = e[m] || "", d = f[m] || "";
        do {
          c = /(\d*)(\D*)(.*)/.exec(c) || ["", "", "", ""];
          d = /(\d*)(\D*)(.*)/.exec(d) || ["", "", "", ""];
          if (0 == c[0].length && 0 == d[0].length)
            break;
          b = ua(0 == c[1].length ? 0 : parseInt(c[1], 10), 0 == d[1].length ? 0 : parseInt(d[1], 10)) || ua(0 == c[2].length, 0 == d[2].length) || ua(c[2], d[2]);
          c = c[3];
          d = d[3];
        } while (0 == b);
      }
    }
    return 0 <= b;
  });
}
var Ra;
if (k.document && x) {
  Sa2 = La();
  Ra = Sa2 ? Sa2 : parseInt(Ma, 10) || void 0;
} else
  Ra = void 0;
var Sa2;
var Ta = Ra;
var Ua = !x || 9 <= Number(Ta);
var Va = x && !Qa("9");
var Wa = function() {
  if (!k.addEventListener || !Object.defineProperty)
    return false;
  var a = false, b = Object.defineProperty({}, "passive", { get: function() {
    a = true;
  } });
  try {
    k.addEventListener("test", aa, b), k.removeEventListener("test", aa, b);
  } catch (c) {
  }
  return a;
}();
function y(a, b) {
  this.type = a;
  this.a = this.target = b;
  this.defaultPrevented = false;
}
y.prototype.b = function() {
  this.defaultPrevented = true;
};
function z(a, b) {
  y.call(this, a ? a.type : "");
  this.relatedTarget = this.a = this.target = null;
  this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
  this.key = "";
  this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = false;
  this.pointerId = 0;
  this.pointerType = "";
  this.c = null;
  if (a) {
    var c = this.type = a.type, d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
    this.target = a.target || a.srcElement;
    this.a = b;
    if (b = a.relatedTarget) {
      if (Ja) {
        a: {
          try {
            Da(b.nodeName);
            var e = true;
            break a;
          } catch (f) {
          }
          e = false;
        }
        e || (b = null);
      }
    } else
      "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);
    this.relatedTarget = b;
    d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
    this.button = a.button;
    this.key = a.key || "";
    this.ctrlKey = a.ctrlKey;
    this.altKey = a.altKey;
    this.shiftKey = a.shiftKey;
    this.metaKey = a.metaKey;
    this.pointerId = a.pointerId || 0;
    this.pointerType = "string" === typeof a.pointerType ? a.pointerType : Xa[a.pointerType] || "";
    this.c = a;
    a.defaultPrevented && this.b();
  }
}
r(z, y);
var Xa = { 2: "touch", 3: "pen", 4: "mouse" };
z.prototype.b = function() {
  z.X.b.call(this);
  var a = this.c;
  if (a.preventDefault)
    a.preventDefault();
  else if (a.returnValue = false, Va)
    try {
      if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode)
        a.keyCode = -1;
    } catch (b) {
    }
};
var A = "closure_listenable_" + (1e6 * Math.random() | 0);
var Ya = 0;
function Za(a, b, c, d, e) {
  this.listener = a;
  this.proxy = null;
  this.src = b;
  this.type = c;
  this.capture = !!d;
  this.ca = e;
  this.key = ++Ya;
  this.Y = this.Z = false;
}
function $a(a) {
  a.Y = true;
  a.listener = null;
  a.proxy = null;
  a.src = null;
  a.ca = null;
}
function ab(a) {
  this.src = a;
  this.a = {};
  this.b = 0;
}
ab.prototype.add = function(a, b, c, d, e) {
  var f = a.toString();
  a = this.a[f];
  a || (a = this.a[f] = [], this.b++);
  var g = bb(a, b, d, e);
  -1 < g ? (b = a[g], c || (b.Z = false)) : (b = new Za(b, this.src, f, !!d, e), b.Z = c, a.push(b));
  return b;
};
function cb(a, b) {
  var c = b.type;
  if (c in a.a) {
    var d = a.a[c], e = ma(d, b), f;
    (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
    f && ($a(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
  }
}
function bb(a, b, c, d) {
  for (var e = 0; e < a.length; ++e) {
    var f = a[e];
    if (!f.Y && f.listener == b && f.capture == !!c && f.ca == d)
      return e;
  }
  return -1;
}
var db = "closure_lm_" + (1e6 * Math.random() | 0);
var eb = {};
function gb(a, b, c, d, e) {
  if (d && d.once)
    return hb(a, b, c, d, e);
  if (Array.isArray(b)) {
    for (var f = 0; f < b.length; f++)
      gb(a, b[f], c, d, e);
    return null;
  }
  c = ib(c);
  return a && a[A] ? a.va(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, false, d, e);
}
function jb(a, b, c, d, e, f) {
  if (!b)
    throw Error("Invalid event type");
  var g = n(e) ? !!e.capture : !!e;
  if (g && !Ua)
    return null;
  var m = kb(a);
  m || (a[db] = m = new ab(a));
  c = m.add(b, c, d, g, f);
  if (c.proxy)
    return c;
  d = lb();
  c.proxy = d;
  d.src = a;
  d.listener = c;
  if (a.addEventListener)
    Wa || (e = g), void 0 === e && (e = false), a.addEventListener(b.toString(), d, e);
  else if (a.attachEvent)
    a.attachEvent(mb(b.toString()), d);
  else if (a.addListener && a.removeListener)
    a.addListener(d);
  else
    throw Error("addEventListener and attachEvent are unavailable.");
  return c;
}
function lb() {
  var a = nb, b = Ua ? function(c) {
    return a.call(b.src, b.listener, c);
  } : function(c) {
    c = a.call(b.src, b.listener, c);
    if (!c)
      return c;
  };
  return b;
}
function hb(a, b, c, d, e) {
  if (Array.isArray(b)) {
    for (var f = 0; f < b.length; f++)
      hb(a, b[f], c, d, e);
    return null;
  }
  c = ib(c);
  return a && a[A] ? a.wa(b, c, n(d) ? !!d.capture : !!d, e) : jb(a, b, c, true, d, e);
}
function ob(a, b, c, d, e) {
  if (Array.isArray(b))
    for (var f = 0; f < b.length; f++)
      ob(a, b[f], c, d, e);
  else
    (d = n(d) ? !!d.capture : !!d, c = ib(c), a && a[A]) ? (a = a.c, b = String(b).toString(), b in a.a && (f = a.a[b], c = bb(f, c, d, e), -1 < c && ($a(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = kb(a)) && (b = a.a[b.toString()], a = -1, b && (a = bb(b, c, d, e)), (c = -1 < a ? b[a] : null) && pb(c));
}
function pb(a) {
  if ("number" !== typeof a && a && !a.Y) {
    var b = a.src;
    if (b && b[A])
      cb(b.c, a);
    else {
      var c = a.type, d = a.proxy;
      b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(mb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
      (c = kb(b)) ? (cb(c, a), 0 == c.b && (c.src = null, b[db] = null)) : $a(a);
    }
  }
}
function mb(a) {
  return a in eb ? eb[a] : eb[a] = "on" + a;
}
function qb(a, b) {
  var c = a.listener, d = a.ca || a.src;
  a.Z && pb(a);
  return c.call(d, b);
}
function nb(a, b) {
  if (a.Y)
    return true;
  if (!Ua) {
    if (!b)
      a: {
        b = ["window", "event"];
        for (var c = k, d = 0; d < b.length; d++)
          if (c = c[b[d]], null == c) {
            b = null;
            break a;
          }
        b = c;
      }
    b = new z(b, this);
    return qb(a, b);
  }
  return qb(a, new z(b, this));
}
function kb(a) {
  a = a[db];
  return a instanceof ab ? a : null;
}
var sb = "__closure_events_fn_" + (1e9 * Math.random() >>> 0);
function ib(a) {
  if ("function" === typeof a)
    return a;
  a[sb] || (a[sb] = function(b) {
    return a.handleEvent(b);
  });
  return a[sb];
}
function D() {
  t.call(this);
  this.c = new ab(this);
  this.J = this;
  this.C = null;
}
r(D, t);
D.prototype[A] = true;
h = D.prototype;
h.addEventListener = function(a, b, c, d) {
  gb(this, a, b, c, d);
};
h.removeEventListener = function(a, b, c, d) {
  ob(this, a, b, c, d);
};
function E(a, b) {
  var c, d = a.C;
  if (d)
    for (c = []; d; d = d.C)
      c.push(d);
  a = a.J;
  d = b.type || b;
  if ("string" === typeof b)
    b = new y(b, a);
  else if (b instanceof y)
    b.target = b.target || a;
  else {
    var e = b;
    b = new y(d, a);
    Ca(b, e);
  }
  e = true;
  if (c)
    for (var f = c.length - 1; 0 <= f; f--) {
      var g = b.a = c[f];
      e = tb(g, d, true, b) && e;
    }
  g = b.a = a;
  e = tb(g, d, true, b) && e;
  e = tb(g, d, false, b) && e;
  if (c)
    for (f = 0; f < c.length; f++)
      g = b.a = c[f], e = tb(g, d, false, b) && e;
}
h.G = function() {
  D.X.G.call(this);
  if (this.c) {
    var a = this.c, c;
    for (c in a.a) {
      for (var d = a.a[c], e = 0; e < d.length; e++)
        $a(d[e]);
      delete a.a[c];
      a.b--;
    }
  }
  this.C = null;
};
h.va = function(a, b, c, d) {
  return this.c.add(String(a), b, false, c, d);
};
h.wa = function(a, b, c, d) {
  return this.c.add(String(a), b, true, c, d);
};
function tb(a, b, c, d) {
  b = a.c.a[String(b)];
  if (!b)
    return true;
  b = b.concat();
  for (var e = true, f = 0; f < b.length; ++f) {
    var g = b[f];
    if (g && !g.Y && g.capture == c) {
      var m = g.listener, l = g.ca || g.src;
      g.Z && cb(a.c, g);
      e = false !== m.call(l, d) && e;
    }
  }
  return e && !d.defaultPrevented;
}
var ub = k.JSON.stringify;
function vb() {
  this.b = this.a = null;
}
var xb = new /** @class */
(function() {
  function class_1(a, b) {
    this.c = a;
    this.f = b;
    this.b = 0;
    this.a = null;
  }
  class_1.prototype.get = function() {
    var a;
    0 < this.b ? (this.b--, a = this.a, this.a = a.next, a.next = null) : a = this.c();
    return a;
  };
  return class_1;
}())(function() {
  return new wb();
}, function(a) {
  a.reset();
});
vb.prototype.add = function(a, b) {
  var c = xb.get();
  c.set(a, b);
  this.b ? this.b.next = c : this.a = c;
  this.b = c;
};
function yb() {
  var a = zb, b = null;
  a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
  return b;
}
function wb() {
  this.next = this.b = this.a = null;
}
wb.prototype.set = function(a, b) {
  this.a = a;
  this.b = b;
  this.next = null;
};
wb.prototype.reset = function() {
  this.next = this.b = this.a = null;
};
function Ab(a) {
  k.setTimeout(function() {
    throw a;
  }, 0);
}
function Bb(a, b) {
  Cb || Db();
  Eb || (Cb(), Eb = true);
  zb.add(a, b);
}
var Cb;
function Db() {
  var a = k.Promise.resolve(void 0);
  Cb = function() {
    a.then(Fb);
  };
}
var Eb = false;
var zb = new vb();
function Fb() {
  for (var a; a = yb(); ) {
    try {
      a.a.call(a.b);
    } catch (c) {
      Ab(c);
    }
    var b = xb;
    b.f(a);
    100 > b.b && (b.b++, a.next = b.a, b.a = a);
  }
  Eb = false;
}
function Gb(a, b) {
  D.call(this);
  this.b = a || 1;
  this.a = b || k;
  this.f = p(this.Za, this);
  this.g = q();
}
r(Gb, D);
h = Gb.prototype;
h.aa = false;
h.M = null;
h.Za = function() {
  if (this.aa) {
    var a = q() - this.g;
    0 < a && a < 0.8 * this.b ? this.M = this.a.setTimeout(this.f, this.b - a) : (this.M && (this.a.clearTimeout(this.M), this.M = null), E(this, "tick"), this.aa && (Hb(this), this.start()));
  }
};
h.start = function() {
  this.aa = true;
  this.M || (this.M = this.a.setTimeout(this.f, this.b), this.g = q());
};
function Hb(a) {
  a.aa = false;
  a.M && (a.a.clearTimeout(a.M), a.M = null);
}
h.G = function() {
  Gb.X.G.call(this);
  Hb(this);
  delete this.a;
};
function Ib(a, b, c) {
  if ("function" === typeof a)
    c && (a = p(a, c));
  else if (a && "function" == typeof a.handleEvent)
    a = p(a.handleEvent, a);
  else
    throw Error("Invalid listener argument");
  return 2147483647 < Number(b) ? -1 : k.setTimeout(a, b || 0);
}
function Jb(a) {
  a.a = Ib(function() {
    a.a = null;
    a.c && (a.c = false, Jb(a));
  }, a.h);
  var b = a.b;
  a.b = null;
  a.g.apply(null, b);
}
var Kb = (
  /** @class */
  function(_super) {
    __extends2(Kb2, _super);
    function Kb2(a, b) {
      var _this = _super.call(this) || this;
      _this.g = a;
      _this.h = b;
      _this.b = null;
      _this.c = false;
      _this.a = null;
      return _this;
    }
    Kb2.prototype.f = function(a) {
      this.b = arguments;
      this.a ? this.c = true : Jb(this);
    };
    Kb2.prototype.G = function() {
      _super.prototype.G.call(this);
      this.a && (k.clearTimeout(this.a), this.a = null, this.c = false, this.b = null);
    };
    return Kb2;
  }(t)
);
function F(a) {
  t.call(this);
  this.b = a;
  this.a = {};
}
r(F, t);
var Lb = [];
function Mb(a, b, c, d) {
  Array.isArray(c) || (c && (Lb[0] = c.toString()), c = Lb);
  for (var e = 0; e < c.length; e++) {
    var f = gb(b, c[e], d || a.handleEvent, false, a.b || a);
    if (!f)
      break;
    a.a[f.key] = f;
  }
}
function Nb(a) {
  za(a.a, function(b, c) {
    this.a.hasOwnProperty(c) && pb(b);
  }, a);
  a.a = {};
}
F.prototype.G = function() {
  F.X.G.call(this);
  Nb(this);
};
F.prototype.handleEvent = function() {
  throw Error("EventHandler.handleEvent not implemented");
};
function Ob() {
  this.a = true;
}
function Pb(a, b, c, d, e, f) {
  a.info(function() {
    if (a.a)
      if (f) {
        var g = "";
        for (var m = f.split("&"), l = 0; l < m.length; l++) {
          var u = m[l].split("=");
          if (1 < u.length) {
            var C2 = u[0];
            u = u[1];
            var B2 = C2.split("_");
            g = 2 <= B2.length && "type" == B2[1] ? g + (C2 + "=" + u + "&") : g + (C2 + "=redacted&");
          }
        }
      } else
        g = null;
    else
      g = f;
    return "XMLHTTP REQ (" + d + ") [attempt " + e + "]: " + b + "\n" + c + "\n" + g;
  });
}
function Qb(a, b, c, d, e, f, g) {
  a.info(function() {
    return "XMLHTTP RESP (" + d + ") [ attempt " + e + "]: " + b + "\n" + c + "\n" + f + " " + g;
  });
}
function G(a, b, c, d) {
  a.info(function() {
    return "XMLHTTP TEXT (" + b + "): " + Rb(a, c) + (d ? " " + d : "");
  });
}
function Sb(a, b) {
  a.info(function() {
    return "TIMEOUT: " + b;
  });
}
Ob.prototype.info = function() {
};
function Rb(a, b) {
  if (!a.a)
    return b;
  if (!b)
    return null;
  try {
    var c = JSON.parse(b);
    if (c) {
      for (a = 0; a < c.length; a++)
        if (Array.isArray(c[a])) {
          var d = c[a];
          if (!(2 > d.length)) {
            var e = d[1];
            if (Array.isArray(e) && !(1 > e.length)) {
              var f = e[0];
              if ("noop" != f && "stop" != f && "close" != f)
                for (var g = 1; g < e.length; g++)
                  e[g] = "";
            }
          }
        }
    }
    return ub(c);
  } catch (m) {
    return b;
  }
}
var H = {};
var Tb = null;
function Ub() {
  return Tb = Tb || new D();
}
H.Fa = "serverreachability";
function Vb(a) {
  y.call(this, H.Fa, a);
}
r(Vb, y);
function I(a) {
  var b = Ub();
  E(b, new Vb(b, a));
}
H.STAT_EVENT = "statevent";
function Wb(a, b) {
  y.call(this, H.STAT_EVENT, a);
  this.stat = b;
}
r(Wb, y);
function J(a) {
  var b = Ub();
  E(b, new Wb(b, a));
}
H.Ga = "timingevent";
function Xb(a) {
  y.call(this, H.Ga, a);
}
r(Xb, y);
function K(a, b) {
  if ("function" !== typeof a)
    throw Error("Fn must not be null and must be a function");
  return k.setTimeout(function() {
    a();
  }, b);
}
var Yb = { NO_ERROR: 0, $a: 1, nb: 2, mb: 3, hb: 4, lb: 5, ob: 6, Da: 7, TIMEOUT: 8, rb: 9 };
var Zb = { fb: "complete", Bb: "success", Ea: "error", Da: "abort", tb: "ready", ub: "readystatechange", TIMEOUT: "timeout", pb: "incrementaldata", sb: "progress", ib: "downloadprogress", Jb: "uploadprogress" };
function $b() {
}
$b.prototype.a = null;
function ac(a) {
  var b;
  (b = a.a) || (b = a.a = {});
  return b;
}
function bc() {
}
var L = { OPEN: "a", eb: "b", Ea: "c", qb: "d" };
function cc() {
  y.call(this, "d");
}
r(cc, y);
function dc() {
  y.call(this, "c");
}
r(dc, y);
var ec;
function fc() {
}
r(fc, $b);
ec = new fc();
function M(a, b, c, d) {
  this.g = a;
  this.c = b;
  this.f = c;
  this.S = d || 1;
  this.J = new F(this);
  this.P = gc;
  a = Ia ? 125 : void 0;
  this.R = new Gb(a);
  this.B = null;
  this.b = false;
  this.j = this.l = this.i = this.H = this.u = this.T = this.o = null;
  this.s = [];
  this.a = null;
  this.D = 0;
  this.h = this.m = null;
  this.N = -1;
  this.A = false;
  this.O = 0;
  this.F = null;
  this.V = this.C = this.U = this.I = false;
}
var gc = 45e3;
var hc = {};
var ic = {};
h = M.prototype;
h.setTimeout = function(a) {
  this.P = a;
};
function jc(a, b, c) {
  a.H = 1;
  a.i = kc(N(b));
  a.j = c;
  a.I = true;
  lc(a, null);
}
function lc(a, b) {
  a.u = q();
  mc(a);
  a.l = N(a.i);
  var c = a.l, d = a.S;
  Array.isArray(d) || (d = [String(d)]);
  nc(c.b, "t", d);
  a.D = 0;
  a.a = oc(a.g, a.g.C ? b : null);
  0 < a.O && (a.F = new Kb(p(a.Ca, a, a.a), a.O));
  Mb(a.J, a.a, "readystatechange", a.Xa);
  b = a.B ? Aa(a.B) : {};
  a.j ? (a.m || (a.m = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.a.ba(a.l, a.m, a.j, b)) : (a.m = "GET", a.a.ba(a.l, a.m, null, b));
  I(1);
  Pb(a.c, a.m, a.l, a.f, a.S, a.j);
}
h.Xa = function(a) {
  a = a.target;
  var b = this.F;
  b && 3 == O(a) ? b.f() : this.Ca(a);
};
h.Ca = function(a) {
  try {
    if (a == this.a)
      a: {
        var b = O(this.a), c = this.a.ua(), d = this.a.W();
        if (!(3 > b || 3 == b && !Ia && !this.a.$())) {
          this.A || 4 != b || 7 == c || (8 == c || 0 >= d ? I(3) : I(2));
          pc(this);
          var e = this.a.W();
          this.N = e;
          var f = this.a.$();
          this.b = 200 == e;
          Qb(this.c, this.m, this.l, this.f, this.S, b, e);
          if (this.b) {
            if (this.U && !this.C) {
              b: {
                if (this.a) {
                  var g, m = this.a;
                  if ((g = m.a ? m.a.getResponseHeader("X-HTTP-Initial-Response") : null) && !sa(g)) {
                    var l = g;
                    break b;
                  }
                }
                l = null;
              }
              if (l)
                G(this.c, this.f, l, "Initial handshake response via X-HTTP-Initial-Response"), this.C = true, qc(this, l);
              else {
                this.b = false;
                this.h = 3;
                J(12);
                P(this);
                rc(this);
                break a;
              }
            }
            this.I ? (sc(this, b, f), Ia && this.b && 3 == b && (Mb(this.J, this.R, "tick", this.Wa), this.R.start())) : (G(this.c, this.f, f, null), qc(this, f));
            4 == b && P(this);
            this.b && !this.A && (4 == b ? uc(this.g, this) : (this.b = false, mc(this)));
          } else
            400 == e && 0 < f.indexOf("Unknown SID") ? (this.h = 3, J(12)) : (this.h = 0, J(13)), P(this), rc(this);
        }
      }
  } catch (u) {
  } finally {
  }
};
function sc(a, b, c) {
  for (var d = true; !a.A && a.D < c.length; ) {
    var e = vc(a, c);
    if (e == ic) {
      4 == b && (a.h = 4, J(14), d = false);
      G(a.c, a.f, null, "[Incomplete Response]");
      break;
    } else if (e == hc) {
      a.h = 4;
      J(15);
      G(a.c, a.f, c, "[Invalid Chunk]");
      d = false;
      break;
    } else
      G(a.c, a.f, e, null), qc(a, e);
  }
  4 == b && 0 == c.length && (a.h = 1, J(16), d = false);
  a.b = a.b && d;
  d ? 0 < c.length && !a.V && (a.V = true, b = a.g, b.a == a && b.U && !b.F && (b.c.info("Great, no buffering proxy detected. Bytes received: " + c.length), wc(b), b.F = true, J(11))) : (G(a.c, a.f, c, "[Invalid Chunked Response]"), P(a), rc(a));
}
h.Wa = function() {
  if (this.a) {
    var a = O(this.a), b = this.a.$();
    this.D < b.length && (pc(this), sc(this, a, b), this.b && 4 != a && mc(this));
  }
};
function vc(a, b) {
  var c = a.D, d = b.indexOf("\n", c);
  if (-1 == d)
    return ic;
  c = Number(b.substring(c, d));
  if (isNaN(c))
    return hc;
  d += 1;
  if (d + c > b.length)
    return ic;
  b = b.substr(d, c);
  a.D = d + c;
  return b;
}
h.cancel = function() {
  this.A = true;
  P(this);
};
function mc(a) {
  a.T = q() + a.P;
  yc(a, a.P);
}
function yc(a, b) {
  if (null != a.o)
    throw Error("WatchDog timer not null");
  a.o = K(p(a.Va, a), b);
}
function pc(a) {
  a.o && (k.clearTimeout(a.o), a.o = null);
}
h.Va = function() {
  this.o = null;
  var a = q();
  0 <= a - this.T ? (Sb(this.c, this.l), 2 != this.H && (I(3), J(17)), P(this), this.h = 2, rc(this)) : yc(this, this.T - a);
};
function rc(a) {
  0 == a.g.v || a.A || uc(a.g, a);
}
function P(a) {
  pc(a);
  var b = a.F;
  b && "function" == typeof b.ja && b.ja();
  a.F = null;
  Hb(a.R);
  Nb(a.J);
  a.a && (b = a.a, a.a = null, b.abort(), b.ja());
}
function qc(a, b) {
  try {
    var c = a.g;
    if (0 != c.v && (c.a == a || zc(c.b, a))) {
      if (c.I = a.N, !a.C && zc(c.b, a) && 3 == c.v) {
        try {
          var d = c.ka.a.parse(b);
        } catch (tc2) {
          d = null;
        }
        if (Array.isArray(d) && 3 == d.length) {
          var e = d;
          if (0 == e[0])
            a: {
              if (!c.j) {
                if (c.a)
                  if (c.a.u + 3e3 < a.u)
                    Ac(c), Bc(c);
                  else
                    break a;
                Cc(c);
                J(18);
              }
            }
          else
            c.oa = e[1], 0 < c.oa - c.P && 37500 > e[2] && c.H && 0 == c.o && !c.m && (c.m = K(p(c.Sa, c), 6e3));
          if (1 >= Dc(c.b) && c.ea) {
            try {
              c.ea();
            } catch (tc2) {
            }
            c.ea = void 0;
          }
        } else
          Q(c, 11);
      } else if ((a.C || c.a == a) && Ac(c), !sa(b))
        for (b = d = c.ka.a.parse(b), d = 0; d < b.length; d++)
          if (e = b[d], c.P = e[0], e = e[1], 2 == c.v)
            if ("c" == e[0]) {
              c.J = e[1];
              c.ga = e[2];
              var f = e[3];
              null != f && (c.ha = f, c.c.info("VER=" + c.ha));
              var g = e[4];
              null != g && (c.pa = g, c.c.info("SVER=" + c.pa));
              var m = e[5];
              if (null != m && "number" === typeof m && 0 < m) {
                var l = 1.5 * m;
                c.D = l;
                c.c.info("backChannelRequestTimeoutMs_=" + l);
              }
              l = c;
              var u = a.a;
              if (u) {
                var C2 = u.a ? u.a.getResponseHeader("X-Client-Wire-Protocol") : null;
                if (C2) {
                  var B2 = l.b;
                  !B2.a && (v(C2, "spdy") || v(C2, "quic") || v(C2, "h2")) && (B2.f = B2.g, B2.a = /* @__PURE__ */ new Set(), B2.b && (Ec(B2, B2.b), B2.b = null));
                }
                if (l.A) {
                  var rb = u.a ? u.a.getResponseHeader("X-HTTP-Session-Id") : null;
                  rb && (l.na = rb, R(l.B, l.A, rb));
                }
              }
              c.v = 3;
              c.f && c.f.ta();
              c.U && (c.N = q() - a.u, c.c.info("Handshake RTT: " + c.N + "ms"));
              l = c;
              var xa2 = a;
              l.la = Fc(l, l.C ? l.ga : null, l.fa);
              if (xa2.C) {
                Gc(l.b, xa2);
                var ya2 = xa2, xc2 = l.D;
                xc2 && ya2.setTimeout(xc2);
                ya2.o && (pc(ya2), mc(ya2));
                l.a = xa2;
              } else
                Hc(l);
              0 < c.g.length && Ic(c);
            } else
              "stop" != e[0] && "close" != e[0] || Q(c, 7);
          else
            3 == c.v && ("stop" == e[0] || "close" == e[0] ? "stop" == e[0] ? Q(c, 7) : Jc(c) : "noop" != e[0] && c.f && c.f.sa(e), c.o = 0);
    }
    I(4);
  } catch (tc2) {
  }
}
function Kc(a) {
  if (a.K && "function" == typeof a.K)
    return a.K();
  if ("string" === typeof a)
    return a.split("");
  if (ba(a)) {
    for (var b = [], c = a.length, d = 0; d < c; d++)
      b.push(a[d]);
    return b;
  }
  b = [];
  c = 0;
  for (d in a)
    b[c++] = a[d];
  return a = b;
}
function Lc(a, b) {
  if (a.forEach && "function" == typeof a.forEach)
    a.forEach(b, void 0);
  else if (ba(a) || "string" === typeof a)
    na(a, b, void 0);
  else {
    if (a.L && "function" == typeof a.L)
      var c = a.L();
    else if (a.K && "function" == typeof a.K)
      c = void 0;
    else if (ba(a) || "string" === typeof a) {
      c = [];
      for (var d = a.length, e = 0; e < d; e++)
        c.push(e);
    } else
      for (e in c = [], d = 0, a)
        c[d++] = e;
    d = Kc(a);
    e = d.length;
    for (var f = 0; f < e; f++)
      b.call(void 0, d[f], c && c[f], a);
  }
}
function S(a, b) {
  this.b = {};
  this.a = [];
  this.c = 0;
  var c = arguments.length;
  if (1 < c) {
    if (c % 2)
      throw Error("Uneven number of arguments");
    for (var d = 0; d < c; d += 2)
      this.set(arguments[d], arguments[d + 1]);
  } else if (a)
    if (a instanceof S)
      for (c = a.L(), d = 0; d < c.length; d++)
        this.set(c[d], a.get(c[d]));
    else
      for (d in a)
        this.set(d, a[d]);
}
h = S.prototype;
h.K = function() {
  Mc(this);
  for (var a = [], b = 0; b < this.a.length; b++)
    a.push(this.b[this.a[b]]);
  return a;
};
h.L = function() {
  Mc(this);
  return this.a.concat();
};
function Mc(a) {
  if (a.c != a.a.length) {
    for (var b = 0, c = 0; b < a.a.length; ) {
      var d = a.a[b];
      T(a.b, d) && (a.a[c++] = d);
      b++;
    }
    a.a.length = c;
  }
  if (a.c != a.a.length) {
    var e = {};
    for (c = b = 0; b < a.a.length; )
      d = a.a[b], T(e, d) || (a.a[c++] = d, e[d] = 1), b++;
    a.a.length = c;
  }
}
h.get = function(a, b) {
  return T(this.b, a) ? this.b[a] : b;
};
h.set = function(a, b) {
  T(this.b, a) || (this.c++, this.a.push(a));
  this.b[a] = b;
};
h.forEach = function(a, b) {
  for (var c = this.L(), d = 0; d < c.length; d++) {
    var e = c[d], f = this.get(e);
    a.call(b, f, e, this);
  }
};
function T(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}
var Nc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;
function Oc(a, b) {
  if (a) {
    a = a.split("&");
    for (var c = 0; c < a.length; c++) {
      var d = a[c].indexOf("="), e = null;
      if (0 <= d) {
        var f = a[c].substring(0, d);
        e = a[c].substring(d + 1);
      } else
        f = a[c];
      b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
    }
  }
}
function U(a, b) {
  this.c = this.j = this.f = "";
  this.h = null;
  this.i = this.g = "";
  this.a = false;
  if (a instanceof U) {
    this.a = void 0 !== b ? b : a.a;
    Pc(this, a.f);
    this.j = a.j;
    Qc(this, a.c);
    Rc(this, a.h);
    this.g = a.g;
    b = a.b;
    var c = new Sc();
    c.c = b.c;
    b.a && (c.a = new S(b.a), c.b = b.b);
    Tc(this, c);
    this.i = a.i;
  } else
    a && (c = String(a).match(Nc)) ? (this.a = !!b, Pc(this, c[1] || "", true), this.j = Uc(c[2] || ""), Qc(this, c[3] || "", true), Rc(this, c[4]), this.g = Uc(c[5] || "", true), Tc(this, c[6] || "", true), this.i = Uc(c[7] || "")) : (this.a = !!b, this.b = new Sc(null, this.a));
}
U.prototype.toString = function() {
  var a = [], b = this.f;
  b && a.push(Vc(b, Wc, true), ":");
  var c = this.c;
  if (c || "file" == b)
    a.push("//"), (b = this.j) && a.push(Vc(b, Wc, true), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.h, null != c && a.push(":", String(c));
  if (c = this.g)
    this.c && "/" != c.charAt(0) && a.push("/"), a.push(Vc(c, "/" == c.charAt(0) ? Xc : Yc, true));
  (c = this.b.toString()) && a.push("?", c);
  (c = this.i) && a.push("#", Vc(c, Zc));
  return a.join("");
};
function N(a) {
  return new U(a);
}
function Pc(a, b, c) {
  a.f = c ? Uc(b, true) : b;
  a.f && (a.f = a.f.replace(/:$/, ""));
}
function Qc(a, b, c) {
  a.c = c ? Uc(b, true) : b;
}
function Rc(a, b) {
  if (b) {
    b = Number(b);
    if (isNaN(b) || 0 > b)
      throw Error("Bad port number " + b);
    a.h = b;
  } else
    a.h = null;
}
function Tc(a, b, c) {
  b instanceof Sc ? (a.b = b, $c(a.b, a.a)) : (c || (b = Vc(b, ad)), a.b = new Sc(b, a.a));
}
function R(a, b, c) {
  a.b.set(b, c);
}
function kc(a) {
  R(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ q()).toString(36));
  return a;
}
function bd(a) {
  return a instanceof U ? N(a) : new U(a, void 0);
}
function cd(a, b, c, d) {
  var e = new U(null, void 0);
  a && Pc(e, a);
  b && Qc(e, b);
  c && Rc(e, c);
  d && (e.g = d);
  return e;
}
function Uc(a, b) {
  return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
}
function Vc(a, b, c) {
  return "string" === typeof a ? (a = encodeURI(a).replace(b, dd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
}
function dd(a) {
  a = a.charCodeAt(0);
  return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
}
var Wc = /[#\/\?@]/g;
var Yc = /[#\?:]/g;
var Xc = /[#\?]/g;
var ad = /[#\?@]/g;
var Zc = /#/g;
function Sc(a, b) {
  this.b = this.a = null;
  this.c = a || null;
  this.f = !!b;
}
function V(a) {
  a.a || (a.a = new S(), a.b = 0, a.c && Oc(a.c, function(b, c) {
    a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
  }));
}
h = Sc.prototype;
h.add = function(a, b) {
  V(this);
  this.c = null;
  a = W(this, a);
  var c = this.a.get(a);
  c || this.a.set(a, c = []);
  c.push(b);
  this.b += 1;
  return this;
};
function ed(a, b) {
  V(a);
  b = W(a, b);
  T(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, T(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Mc(a)));
}
function fd(a, b) {
  V(a);
  b = W(a, b);
  return T(a.a.b, b);
}
h.forEach = function(a, b) {
  V(this);
  this.a.forEach(function(c, d) {
    na(c, function(e) {
      a.call(b, e, d, this);
    }, this);
  }, this);
};
h.L = function() {
  V(this);
  for (var a = this.a.K(), b = this.a.L(), c = [], d = 0; d < b.length; d++)
    for (var e = a[d], f = 0; f < e.length; f++)
      c.push(b[d]);
  return c;
};
h.K = function(a) {
  V(this);
  var b = [];
  if ("string" === typeof a)
    fd(this, a) && (b = qa(b, this.a.get(W(this, a))));
  else {
    a = this.a.K();
    for (var c = 0; c < a.length; c++)
      b = qa(b, a[c]);
  }
  return b;
};
h.set = function(a, b) {
  V(this);
  this.c = null;
  a = W(this, a);
  fd(this, a) && (this.b -= this.a.get(a).length);
  this.a.set(a, [b]);
  this.b += 1;
  return this;
};
h.get = function(a, b) {
  if (!a)
    return b;
  a = this.K(a);
  return 0 < a.length ? String(a[0]) : b;
};
function nc(a, b, c) {
  ed(a, b);
  0 < c.length && (a.c = null, a.a.set(W(a, b), ra(c)), a.b += c.length);
}
h.toString = function() {
  if (this.c)
    return this.c;
  if (!this.a)
    return "";
  for (var a = [], b = this.a.L(), c = 0; c < b.length; c++) {
    var d = b[c], e = encodeURIComponent(String(d));
    d = this.K(d);
    for (var f = 0; f < d.length; f++) {
      var g = e;
      "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
      a.push(g);
    }
  }
  return this.c = a.join("&");
};
function W(a, b) {
  b = String(b);
  a.f && (b = b.toLowerCase());
  return b;
}
function $c(a, b) {
  b && !a.f && (V(a), a.c = null, a.a.forEach(function(c, d) {
    var e = d.toLowerCase();
    d != e && (ed(this, d), nc(this, e, c));
  }, a));
  a.f = b;
}
var gd = (
  /** @class */
  function() {
    function gd2(a, b) {
      this.b = a;
      this.a = b;
    }
    return gd2;
  }()
);
function hd(a) {
  this.g = a || id;
  k.PerformanceNavigationTiming ? (a = k.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(k.ia && k.ia.ya && k.ia.ya() && k.ia.ya().Lb);
  this.f = a ? this.g : 1;
  this.a = null;
  1 < this.f && (this.a = /* @__PURE__ */ new Set());
  this.b = null;
  this.c = [];
}
var id = 10;
function jd(a) {
  return a.b ? true : a.a ? a.a.size >= a.f : false;
}
function Dc(a) {
  return a.b ? 1 : a.a ? a.a.size : 0;
}
function zc(a, b) {
  return a.b ? a.b == b : a.a ? a.a.has(b) : false;
}
function Ec(a, b) {
  a.a ? a.a.add(b) : a.b = b;
}
function Gc(a, b) {
  a.b && a.b == b ? a.b = null : a.a && a.a.has(b) && a.a.delete(b);
}
hd.prototype.cancel = function() {
  var e_1, _a2;
  this.c = kd(this);
  if (this.b)
    this.b.cancel(), this.b = null;
  else if (this.a && 0 !== this.a.size) {
    try {
      for (var _b = __values(this.a.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
        var a = _c2.value;
        a.cancel();
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c2 && !_c2.done && (_a2 = _b.return))
          _a2.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    this.a.clear();
  }
};
function kd(a) {
  var e_2, _a2;
  if (null != a.b)
    return a.c.concat(a.b.s);
  if (null != a.a && 0 !== a.a.size) {
    var b = a.c;
    try {
      for (var _b = __values(a.a.values()), _c2 = _b.next(); !_c2.done; _c2 = _b.next()) {
        var c = _c2.value;
        b = b.concat(c.s);
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (_c2 && !_c2.done && (_a2 = _b.return))
          _a2.call(_b);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return b;
  }
  return ra(a.c);
}
function ld() {
}
ld.prototype.stringify = function(a) {
  return k.JSON.stringify(a, void 0);
};
ld.prototype.parse = function(a) {
  return k.JSON.parse(a, void 0);
};
function md() {
  this.a = new ld();
}
function nd(a, b, c) {
  var d = c || "";
  try {
    Lc(a, function(e, f) {
      var g = e;
      n(e) && (g = ub(e));
      b.push(d + f + "=" + encodeURIComponent(g));
    });
  } catch (e) {
    throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
  }
}
function od(a, b) {
  var c = new Ob();
  if (k.Image) {
    var d = new Image();
    d.onload = ja(pd, c, d, "TestLoadImage: loaded", true, b);
    d.onerror = ja(pd, c, d, "TestLoadImage: error", false, b);
    d.onabort = ja(pd, c, d, "TestLoadImage: abort", false, b);
    d.ontimeout = ja(pd, c, d, "TestLoadImage: timeout", false, b);
    k.setTimeout(function() {
      if (d.ontimeout)
        d.ontimeout();
    }, 1e4);
    d.src = a;
  } else
    b(false);
}
function pd(a, b, c, d, e) {
  try {
    b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
  } catch (f) {
  }
}
var qd = k.JSON.parse;
function X(a) {
  D.call(this);
  this.headers = new S();
  this.H = a || null;
  this.b = false;
  this.s = this.a = null;
  this.B = "";
  this.h = 0;
  this.f = "";
  this.g = this.A = this.l = this.u = false;
  this.o = 0;
  this.m = null;
  this.I = rd;
  this.D = this.F = false;
}
r(X, D);
var rd = "";
var sd = /^https?$/i;
var td = ["POST", "PUT"];
h = X.prototype;
h.ba = function(a, b, c, d) {
  if (this.a)
    throw Error("[goog.net.XhrIo] Object is active with another request=" + this.B + "; newUri=" + a);
  b = b ? b.toUpperCase() : "GET";
  this.B = a;
  this.f = "";
  this.h = 0;
  this.u = false;
  this.b = true;
  this.a = new XMLHttpRequest();
  this.s = this.H ? ac(this.H) : ac(ec);
  this.a.onreadystatechange = p(this.za, this);
  try {
    this.A = true, this.a.open(b, String(a), true), this.A = false;
  } catch (f) {
    ud(this, f);
    return;
  }
  a = c || "";
  var e = new S(this.headers);
  d && Lc(d, function(f, g) {
    e.set(g, f);
  });
  d = oa(e.L());
  c = k.FormData && a instanceof k.FormData;
  !(0 <= ma(td, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
  e.forEach(function(f, g) {
    this.a.setRequestHeader(g, f);
  }, this);
  this.I && (this.a.responseType = this.I);
  "withCredentials" in this.a && this.a.withCredentials !== this.F && (this.a.withCredentials = this.F);
  try {
    vd(this), 0 < this.o && ((this.D = wd(this.a)) ? (this.a.timeout = this.o, this.a.ontimeout = p(this.xa, this)) : this.m = Ib(this.xa, this.o, this)), this.l = true, this.a.send(a), this.l = false;
  } catch (f) {
    ud(this, f);
  }
};
function wd(a) {
  return x && Qa(9) && "number" === typeof a.timeout && void 0 !== a.ontimeout;
}
function pa(a) {
  return "content-type" == a.toLowerCase();
}
h.xa = function() {
  "undefined" != typeof goog && this.a && (this.f = "Timed out after " + this.o + "ms, aborting", this.h = 8, E(this, "timeout"), this.abort(8));
};
function ud(a, b) {
  a.b = false;
  a.a && (a.g = true, a.a.abort(), a.g = false);
  a.f = b;
  a.h = 5;
  xd(a);
  yd(a);
}
function xd(a) {
  a.u || (a.u = true, E(a, "complete"), E(a, "error"));
}
h.abort = function(a) {
  this.a && this.b && (this.b = false, this.g = true, this.a.abort(), this.g = false, this.h = a || 7, E(this, "complete"), E(this, "abort"), yd(this));
};
h.G = function() {
  this.a && (this.b && (this.b = false, this.g = true, this.a.abort(), this.g = false), yd(this, true));
  X.X.G.call(this);
};
h.za = function() {
  this.j || (this.A || this.l || this.g ? zd(this) : this.Ua());
};
h.Ua = function() {
  zd(this);
};
function zd(a) {
  if (a.b && "undefined" != typeof goog && (!a.s[1] || 4 != O(a) || 2 != a.W())) {
    if (a.l && 4 == O(a))
      Ib(a.za, 0, a);
    else if (E(a, "readystatechange"), 4 == O(a)) {
      a.b = false;
      try {
        {
          var l = a.W();
          a:
            switch (l) {
              case 200:
              case 201:
              case 202:
              case 204:
              case 206:
              case 304:
              case 1223:
                var b = true;
                break a;
              default:
                b = false;
            }
          var c;
          if (!(c = b)) {
            var d;
            if (d = 0 === l) {
              var e = String(a.B).match(Nc)[1] || null;
              if (!e && k.self && k.self.location) {
                var f = k.self.location.protocol;
                e = f.substr(0, f.length - 1);
              }
              d = !sd.test(e ? e.toLowerCase() : "");
            }
            c = d;
          }
          var g = c;
        }
        if (g)
          E(a, "complete"), E(a, "success");
        else {
          a.h = 6;
          try {
            var m = 2 < O(a) ? a.a.statusText : "";
          } catch (l2) {
            m = "";
          }
          a.f = m + " [" + a.W() + "]";
          xd(a);
        }
      } finally {
        yd(a);
      }
    }
  }
}
function yd(a, b) {
  if (a.a) {
    vd(a);
    var c = a.a, d = a.s[0] ? aa : null;
    a.a = null;
    a.s = null;
    b || E(a, "ready");
    try {
      c.onreadystatechange = d;
    } catch (e) {
    }
  }
}
function vd(a) {
  a.a && a.D && (a.a.ontimeout = null);
  a.m && (k.clearTimeout(a.m), a.m = null);
}
function O(a) {
  return a.a ? a.a.readyState : 0;
}
h.W = function() {
  try {
    return 2 < O(this) ? this.a.status : -1;
  } catch (a) {
    return -1;
  }
};
h.$ = function() {
  try {
    return this.a ? this.a.responseText : "";
  } catch (a) {
    return "";
  }
};
h.Pa = function(a) {
  if (this.a) {
    var b = this.a.responseText;
    a && 0 == b.indexOf(a) && (b = b.substring(a.length));
    return qd(b);
  }
};
h.ua = function() {
  return this.h;
};
h.Qa = function() {
  return "string" === typeof this.f ? this.f : String(this.f);
};
function Ad(a) {
  var b = "";
  za(a, function(c, d) {
    b += d;
    b += ":";
    b += c;
    b += "\r\n";
  });
  return b;
}
function Bd(a, b, c) {
  a: {
    for (d in c) {
      var d = false;
      break a;
    }
    d = true;
  }
  d || (c = Ad(c), "string" === typeof a ? null != c && encodeURIComponent(String(c)) : R(a, b, c));
}
function Cd(a, b, c) {
  return c && c.internalChannelParams ? c.internalChannelParams[a] || b : b;
}
function Dd(a) {
  this.pa = 0;
  this.g = [];
  this.c = new Ob();
  this.ga = this.la = this.B = this.fa = this.a = this.na = this.A = this.V = this.i = this.O = this.l = null;
  this.Oa = this.R = 0;
  this.La = Cd("failFast", false, a);
  this.H = this.m = this.j = this.h = this.f = null;
  this.S = true;
  this.I = this.oa = this.P = -1;
  this.T = this.o = this.u = 0;
  this.Ha = Cd("baseRetryDelayMs", 5e3, a);
  this.Ra = Cd("retryDelaySeedMs", 1e4, a);
  this.Ma = Cd("forwardChannelMaxRetries", 2, a);
  this.ma = Cd("forwardChannelRequestTimeoutMs", 2e4, a);
  this.Na = a && a.g || void 0;
  this.D = void 0;
  this.C = a && a.supportsCrossDomainXhr || false;
  this.J = "";
  this.b = new hd(a && a.concurrentRequestLimit);
  this.ka = new md();
  this.da = a && a.fastHandshake || false;
  this.Ia = a && a.b || false;
  a && a.f && (this.c.a = false);
  a && a.forceLongPolling && (this.S = false);
  this.U = !this.da && this.S && a && a.detectBufferingProxy || false;
  this.ea = void 0;
  this.N = 0;
  this.F = false;
  this.s = null;
  (this.Ka = a && a.c || false) && this.c.info("Opt-in to enable Chrome Origin Trials.");
}
h = Dd.prototype;
h.ha = 8;
h.v = 1;
function Jc(a) {
  Ed(a);
  if (3 == a.v) {
    var b = a.R++, c = N(a.B);
    R(c, "SID", a.J);
    R(c, "RID", b);
    R(c, "TYPE", "terminate");
    Fd(a, c);
    b = new M(a, a.c, b, void 0);
    b.H = 2;
    b.i = kc(N(c));
    c = false;
    k.navigator && k.navigator.sendBeacon && (c = k.navigator.sendBeacon(b.i.toString(), ""));
    !c && k.Image && (new Image().src = b.i, c = true);
    c || (b.a = oc(b.g, null), b.a.ba(b.i));
    b.u = q();
    mc(b);
  }
  Gd(a);
}
function Bc(a) {
  a.a && (wc(a), a.a.cancel(), a.a = null);
}
function Ed(a) {
  Bc(a);
  a.j && (k.clearTimeout(a.j), a.j = null);
  Ac(a);
  a.b.cancel();
  a.h && ("number" === typeof a.h && k.clearTimeout(a.h), a.h = null);
}
function Hd(a, b) {
  a.g.push(new gd(a.Oa++, b));
  3 == a.v && Ic(a);
}
function Ic(a) {
  jd(a.b) || a.h || (a.h = true, Bb(a.Ba, a), a.u = 0);
}
function Id(a, b) {
  if (Dc(a.b) >= a.b.f - (a.h ? 1 : 0))
    return false;
  if (a.h)
    return a.g = b.s.concat(a.g), true;
  if (1 == a.v || 2 == a.v || a.u >= (a.La ? 0 : a.Ma))
    return false;
  a.h = K(p(a.Ba, a, b), Jd(a, a.u));
  a.u++;
  return true;
}
h.Ba = function(a) {
  if (this.h)
    if (this.h = null, 1 == this.v) {
      if (!a) {
        this.R = Math.floor(1e5 * Math.random());
        a = this.R++;
        var b = new M(this, this.c, a, void 0), c = this.l;
        this.O && (c ? (c = Aa(c), Ca(c, this.O)) : c = this.O);
        null === this.i && (b.B = c);
        var d;
        if (this.da)
          a: {
            for (var e = d = 0; e < this.g.length; e++) {
              b: {
                var f = this.g[e];
                if ("__data__" in f.a && (f = f.a.__data__, "string" === typeof f)) {
                  f = f.length;
                  break b;
                }
                f = void 0;
              }
              if (void 0 === f)
                break;
              d += f;
              if (4096 < d) {
                d = e;
                break a;
              }
              if (4096 === d || e === this.g.length - 1) {
                d = e + 1;
                break a;
              }
            }
            d = 1e3;
          }
        else
          d = 1e3;
        d = Kd(this, b, d);
        e = N(this.B);
        R(e, "RID", a);
        R(e, "CVER", 22);
        this.A && R(e, "X-HTTP-Session-Id", this.A);
        Fd(this, e);
        this.i && c && Bd(e, this.i, c);
        Ec(this.b, b);
        this.Ia && R(e, "TYPE", "init");
        this.da ? (R(e, "$req", d), R(e, "SID", "null"), b.U = true, jc(b, e, null)) : jc(b, e, d);
        this.v = 2;
      }
    } else
      3 == this.v && (a ? Ld(this, a) : 0 == this.g.length || jd(this.b) || Ld(this));
};
function Ld(a, b) {
  var c;
  b ? c = b.f : c = a.R++;
  var d = N(a.B);
  R(d, "SID", a.J);
  R(d, "RID", c);
  R(d, "AID", a.P);
  Fd(a, d);
  a.i && a.l && Bd(d, a.i, a.l);
  c = new M(a, a.c, c, a.u + 1);
  null === a.i && (c.B = a.l);
  b && (a.g = b.s.concat(a.g));
  b = Kd(a, c, 1e3);
  c.setTimeout(Math.round(0.5 * a.ma) + Math.round(0.5 * a.ma * Math.random()));
  Ec(a.b, c);
  jc(c, d, b);
}
function Fd(a, b) {
  a.f && Lc({}, function(c, d) {
    R(b, d, c);
  });
}
function Kd(a, b, c) {
  c = Math.min(a.g.length, c);
  var d = a.f ? p(a.f.Ja, a.f, a) : null;
  a:
    for (var e = a.g, f = -1; ; ) {
      var g = ["count=" + c];
      -1 == f ? 0 < c ? (f = e[0].b, g.push("ofs=" + f)) : f = 0 : g.push("ofs=" + f);
      for (var m = true, l = 0; l < c; l++) {
        var u = e[l].b, C2 = e[l].a;
        u -= f;
        if (0 > u)
          f = Math.max(0, e[l].b - 100), m = false;
        else
          try {
            nd(C2, g, "req" + u + "_");
          } catch (B2) {
            d && d(C2);
          }
      }
      if (m) {
        d = g.join("&");
        break a;
      }
    }
  a = a.g.splice(0, c);
  b.s = a;
  return d;
}
function Hc(a) {
  a.a || a.j || (a.T = 1, Bb(a.Aa, a), a.o = 0);
}
function Cc(a) {
  if (a.a || a.j || 3 <= a.o)
    return false;
  a.T++;
  a.j = K(p(a.Aa, a), Jd(a, a.o));
  a.o++;
  return true;
}
h.Aa = function() {
  this.j = null;
  Md(this);
  if (this.U && !(this.F || null == this.a || 0 >= this.N)) {
    var a = 2 * this.N;
    this.c.info("BP detection timer enabled: " + a);
    this.s = K(p(this.Ta, this), a);
  }
};
h.Ta = function() {
  this.s && (this.s = null, this.c.info("BP detection timeout reached."), this.c.info("Buffering proxy detected and switch to long-polling!"), this.H = false, this.F = true, J(10), Bc(this), Md(this));
};
function wc(a) {
  null != a.s && (k.clearTimeout(a.s), a.s = null);
}
function Md(a) {
  a.a = new M(a, a.c, "rpc", a.T);
  null === a.i && (a.a.B = a.l);
  a.a.O = 0;
  var b = N(a.la);
  R(b, "RID", "rpc");
  R(b, "SID", a.J);
  R(b, "CI", a.H ? "0" : "1");
  R(b, "AID", a.P);
  Fd(a, b);
  R(b, "TYPE", "xmlhttp");
  a.i && a.l && Bd(b, a.i, a.l);
  a.D && a.a.setTimeout(a.D);
  var c = a.a;
  a = a.ga;
  c.H = 1;
  c.i = kc(N(b));
  c.j = null;
  c.I = true;
  lc(c, a);
}
h.Sa = function() {
  null != this.m && (this.m = null, Bc(this), Cc(this), J(19));
};
function Ac(a) {
  null != a.m && (k.clearTimeout(a.m), a.m = null);
}
function uc(a, b) {
  var c = null;
  if (a.a == b) {
    Ac(a);
    wc(a);
    a.a = null;
    var d = 2;
  } else if (zc(a.b, b))
    c = b.s, Gc(a.b, b), d = 1;
  else
    return;
  a.I = b.N;
  if (0 != a.v) {
    if (b.b)
      if (1 == d) {
        c = b.j ? b.j.length : 0;
        b = q() - b.u;
        var e = a.u;
        d = Ub();
        E(d, new Xb(d, c, b, e));
        Ic(a);
      } else
        Hc(a);
    else if (e = b.h, 3 == e || 0 == e && 0 < a.I || !(1 == d && Id(a, b) || 2 == d && Cc(a)))
      switch (c && 0 < c.length && (b = a.b, b.c = b.c.concat(c)), e) {
        case 1:
          Q(a, 5);
          break;
        case 4:
          Q(a, 10);
          break;
        case 3:
          Q(a, 6);
          break;
        default:
          Q(a, 2);
      }
  }
}
function Jd(a, b) {
  var c = a.Ha + Math.floor(Math.random() * a.Ra);
  a.f || (c *= 2);
  return c * b;
}
function Q(a, b) {
  a.c.info("Error code " + b);
  if (2 == b) {
    var c = null;
    a.f && (c = null);
    var d = p(a.Ya, a);
    c || (c = new U("//www.google.com/images/cleardot.gif"), k.location && "http" == k.location.protocol || Pc(c, "https"), kc(c));
    od(c.toString(), d);
  } else
    J(2);
  a.v = 0;
  a.f && a.f.ra(b);
  Gd(a);
  Ed(a);
}
h.Ya = function(a) {
  a ? (this.c.info("Successfully pinged google.com"), J(2)) : (this.c.info("Failed to ping google.com"), J(1));
};
function Gd(a) {
  a.v = 0;
  a.I = -1;
  if (a.f) {
    if (0 != kd(a.b).length || 0 != a.g.length)
      a.b.c.length = 0, ra(a.g), a.g.length = 0;
    a.f.qa();
  }
}
function Fc(a, b, c) {
  var d = bd(c);
  if ("" != d.c)
    b && Qc(d, b + "." + d.c), Rc(d, d.h);
  else {
    var e = k.location;
    d = cd(e.protocol, b ? b + "." + e.hostname : e.hostname, +e.port, c);
  }
  a.V && za(a.V, function(f, g) {
    R(d, g, f);
  });
  b = a.A;
  c = a.na;
  b && c && R(d, b, c);
  R(d, "VER", a.ha);
  Fd(a, d);
  return d;
}
function oc(a, b) {
  if (b && !a.C)
    throw Error("Can't create secondary domain capable XhrIo object.");
  b = new X(a.Na);
  b.F = a.C;
  return b;
}
function Nd() {
}
h = Nd.prototype;
h.ta = function() {
};
h.sa = function() {
};
h.ra = function() {
};
h.qa = function() {
};
h.Ja = function() {
};
function Od() {
  if (x && !(10 <= Number(Ta)))
    throw Error("Environmental error: no available transport.");
}
Od.prototype.a = function(a, b) {
  return new Y(a, b);
};
function Y(a, b) {
  D.call(this);
  this.a = new Dd(b);
  this.o = a;
  this.b = b && b.messageUrlParams || null;
  a = b && b.messageHeaders || null;
  b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = { "X-Client-Protocol": "webchannel" });
  this.a.l = a;
  a = b && b.initMessageHeaders || null;
  b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = { "X-WebChannel-Content-Type": b.messageContentType });
  b && b.a && (a ? a["X-WebChannel-Client-Profile"] = b.a : a = { "X-WebChannel-Client-Profile": b.a });
  this.a.O = a;
  (a = b && b.httpHeadersOverwriteParam) && !sa(a) && (this.a.i = a);
  this.m = b && b.supportsCrossDomainXhr || false;
  this.l = b && b.sendRawJson || false;
  (b = b && b.httpSessionIdParam) && !sa(b) && (this.a.A = b, a = this.b, null !== a && b in a && (a = this.b, b in a && delete a[b]));
  this.f = new Z(this);
}
r(Y, D);
Y.prototype.g = function() {
  this.a.f = this.f;
  this.m && (this.a.C = true);
  var a = this.a, b = this.o, c = this.b || void 0;
  J(0);
  a.fa = b;
  a.V = c || {};
  a.H = a.S;
  a.B = Fc(a, null, a.fa);
  Ic(a);
};
Y.prototype.close = function() {
  Jc(this.a);
};
Y.prototype.h = function(a) {
  if ("string" === typeof a) {
    var b = {};
    b.__data__ = a;
    Hd(this.a, b);
  } else
    this.l ? (b = {}, b.__data__ = ub(a), Hd(this.a, b)) : Hd(this.a, a);
};
Y.prototype.G = function() {
  this.a.f = null;
  delete this.f;
  Jc(this.a);
  delete this.a;
  Y.X.G.call(this);
};
function Pd(a) {
  cc.call(this);
  var b = a.__sm__;
  if (b) {
    a: {
      for (var c in b) {
        a = c;
        break a;
      }
      a = void 0;
    }
    (this.c = a) ? (a = this.c, this.data = null !== b && a in b ? b[a] : void 0) : this.data = b;
  } else
    this.data = a;
}
r(Pd, cc);
function Qd() {
  dc.call(this);
  this.status = 1;
}
r(Qd, dc);
function Z(a) {
  this.a = a;
}
r(Z, Nd);
Z.prototype.ta = function() {
  E(this.a, "a");
};
Z.prototype.sa = function(a) {
  E(this.a, new Pd(a));
};
Z.prototype.ra = function(a) {
  E(this.a, new Qd(a));
};
Z.prototype.qa = function() {
  E(this.a, "b");
};
Od.prototype.createWebChannel = Od.prototype.a;
Y.prototype.send = Y.prototype.h;
Y.prototype.open = Y.prototype.g;
Y.prototype.close = Y.prototype.close;
Yb.NO_ERROR = 0;
Yb.TIMEOUT = 8;
Yb.HTTP_ERROR = 6;
Zb.COMPLETE = "complete";
bc.EventType = L;
L.OPEN = "a";
L.CLOSE = "b";
L.ERROR = "c";
L.MESSAGE = "d";
D.prototype.listen = D.prototype.va;
X.prototype.listenOnce = X.prototype.wa;
X.prototype.getLastError = X.prototype.Qa;
X.prototype.getLastErrorCode = X.prototype.ua;
X.prototype.getStatus = X.prototype.W;
X.prototype.getResponseJson = X.prototype.Pa;
X.prototype.getResponseText = X.prototype.$;
X.prototype.send = X.prototype.ba;
var createWebChannelTransport = function() {
  return new Od();
};
var getStatEventTarget = function() {
  return Ub();
};
var ErrorCode = Yb;
var EventType = Zb;
var Event = H;
var Stat = { gb: 0, jb: 1, kb: 2, Db: 3, Ib: 4, Fb: 5, Gb: 6, Eb: 7, Cb: 8, Hb: 9, PROXY: 10, NOPROXY: 11, Ab: 12, wb: 13, xb: 14, vb: 15, yb: 16, zb: 17, bb: 18, ab: 19, cb: 20 };
var WebChannel = bc;
var XhrIo = X;

// node_modules/@firebase/firestore/dist/esm5/prebuilt-4888bff0-430c65bc.js
var _ = (
  /** @class */
  function() {
    function t2(t3, e) {
      var n2 = this;
      this.previousValue = t3, e && (e.sequenceNumberHandler = function(t4) {
        return n2.t(t4);
      }, this.i = function(t4) {
        return e.writeSequenceNumber(t4);
      });
    }
    return t2.prototype.t = function(t3) {
      return this.previousValue = Math.max(t3, this.previousValue), this.previousValue;
    }, t2.prototype.next = function() {
      var t3 = ++this.previousValue;
      return this.i && this.i(t3), t3;
    }, t2;
  }()
);
_.o = -1;
var E2 = {
  // Causes are copied from:
  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
  /** Not an error; returned on success. */
  OK: "ok",
  /** The operation was cancelled (typically by the caller). */
  CANCELLED: "cancelled",
  /** Unknown error or an error from a different error domain. */
  UNKNOWN: "unknown",
  /**
   * Client specified an invalid argument. Note that this differs from
   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
   * problematic regardless of the state of the system (e.g., a malformed file
   * name).
   */
  INVALID_ARGUMENT: "invalid-argument",
  /**
   * Deadline expired before operation could complete. For operations that
   * change the state of the system, this error may be returned even if the
   * operation has completed successfully. For example, a successful response
   * from a server could have been delayed long enough for the deadline to
   * expire.
   */
  DEADLINE_EXCEEDED: "deadline-exceeded",
  /** Some requested entity (e.g., file or directory) was not found. */
  NOT_FOUND: "not-found",
  /**
   * Some entity that we attempted to create (e.g., file or directory) already
   * exists.
   */
  ALREADY_EXISTS: "already-exists",
  /**
   * The caller does not have permission to execute the specified operation.
   * PERMISSION_DENIED must not be used for rejections caused by exhausting
   * some resource (use RESOURCE_EXHAUSTED instead for those errors).
   * PERMISSION_DENIED must not be used if the caller can not be identified
   * (use UNAUTHENTICATED instead for those errors).
   */
  PERMISSION_DENIED: "permission-denied",
  /**
   * The request does not have valid authentication credentials for the
   * operation.
   */
  UNAUTHENTICATED: "unauthenticated",
  /**
   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
   * entire file system is out of space.
   */
  RESOURCE_EXHAUSTED: "resource-exhausted",
  /**
   * Operation was rejected because the system is not in a state required for
   * the operation's execution. For example, directory to be deleted may be
   * non-empty, an rmdir operation is applied to a non-directory, etc.
   *
   * A litmus test that may help a service implementor in deciding
   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
   *  (a) Use UNAVAILABLE if the client can retry just the failing call.
   *  (b) Use ABORTED if the client should retry at a higher-level
   *      (e.g., restarting a read-modify-write sequence).
   *  (c) Use FAILED_PRECONDITION if the client should not retry until
   *      the system state has been explicitly fixed. E.g., if an "rmdir"
   *      fails because the directory is non-empty, FAILED_PRECONDITION
   *      should be returned since the client should not retry unless
   *      they have first fixed up the directory by deleting files from it.
   *  (d) Use FAILED_PRECONDITION if the client performs conditional
   *      REST Get/Update/Delete on a resource and the resource on the
   *      server does not match the condition. E.g., conflicting
   *      read-modify-write on the same resource.
   */
  FAILED_PRECONDITION: "failed-precondition",
  /**
   * The operation was aborted, typically due to a concurrency issue like
   * sequencer check failures, transaction aborts, etc.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  ABORTED: "aborted",
  /**
   * Operation was attempted past the valid range. E.g., seeking or reading
   * past end of file.
   *
   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
   * if the system state changes. For example, a 32-bit file system will
   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
   * an offset past the current file size.
   *
   * There is a fair bit of overlap between FAILED_PRECONDITION and
   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
   * when it applies so that callers who are iterating through a space can
   * easily look for an OUT_OF_RANGE error to detect when they are done.
   */
  OUT_OF_RANGE: "out-of-range",
  /** Operation is not implemented or not supported/enabled in this service. */
  UNIMPLEMENTED: "unimplemented",
  /**
   * Internal errors. Means some invariants expected by underlying System has
   * been broken. If you see one of these errors, Something is very broken.
   */
  INTERNAL: "internal",
  /**
   * The service is currently unavailable. This is a most likely a transient
   * condition and may be corrected by retrying with a backoff.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  UNAVAILABLE: "unavailable",
  /** Unrecoverable data loss or corruption. */
  DATA_LOSS: "data-loss"
};
var T2 = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, n2) || this).code = e2, r2.message = n2, r2.name = "FirebaseError", // HACK: We write a toString property directly because Error is not a real
      // class and so inheritance does not work correctly. We could alternatively
      // do the same "back-door inheritance" trick that FirebaseError does.
      r2.toString = function() {
        return r2.name + ": [code=" + r2.code + "]: " + r2.message;
      }, r2;
    }
    return __extends(e, t2), e;
  }(Error)
);
var S2 = new Logger("@firebase/firestore");
function D2() {
  return S2.logLevel;
}
function N2(t2) {
  for (var e = [], n2 = 1; n2 < arguments.length; n2++)
    e[n2 - 1] = arguments[n2];
  if (S2.logLevel <= LogLevel.DEBUG) {
    var r2 = e.map(x2);
    S2.debug.apply(S2, __spreadArray(["Firestore (8.3.3): " + t2], r2));
  }
}
function A2(t2) {
  for (var e = [], n2 = 1; n2 < arguments.length; n2++)
    e[n2 - 1] = arguments[n2];
  if (S2.logLevel <= LogLevel.ERROR) {
    var r2 = e.map(x2);
    S2.error.apply(S2, __spreadArray(["Firestore (8.3.3): " + t2], r2));
  }
}
function k2(t2) {
  for (var e = [], n2 = 1; n2 < arguments.length; n2++)
    e[n2 - 1] = arguments[n2];
  if (S2.logLevel <= LogLevel.WARN) {
    var r2 = e.map(x2);
    S2.warn.apply(S2, __spreadArray(["Firestore (8.3.3): " + t2], r2));
  }
}
function x2(t2) {
  if ("string" == typeof t2)
    return t2;
  try {
    return e = t2, JSON.stringify(e);
  } catch (e2) {
    return t2;
  }
  var e;
}
function C(t2) {
  void 0 === t2 && (t2 = "Unexpected state");
  var e = "FIRESTORE (8.3.3) INTERNAL ASSERTION FAILED: " + t2;
  throw A2(e), new Error(e);
}
function R2(t2, e) {
  t2 || C();
}
function O2(t2, e) {
  return t2;
}
function L2(t2) {
  var e = (
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    "undefined" != typeof self && (self.crypto || self.msCrypto)
  ), n2 = new Uint8Array(t2);
  if (e && "function" == typeof e.getRandomValues)
    e.getRandomValues(n2);
  else
    for (var r2 = 0; r2 < t2; r2++)
      n2[r2] = Math.floor(256 * Math.random());
  return n2;
}
var P2 = (
  /** @class */
  function() {
    function t2() {
    }
    return t2.u = function() {
      for (var t3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", e = Math.floor(256 / t3.length) * t3.length, n2 = ""; n2.length < 20; )
        for (var r2 = L2(40), i = 0; i < r2.length; ++i)
          n2.length < 20 && r2[i] < e && (n2 += t3.charAt(r2[i] % t3.length));
      return n2;
    }, t2;
  }()
);
function M2(t2, e) {
  return t2 < e ? -1 : t2 > e ? 1 : 0;
}
function F2(t2, e, n2) {
  return t2.length === e.length && t2.every(function(t3, r2) {
    return n2(t3, e[r2]);
  });
}
function V2(t2) {
  return t2 + "\0";
}
var q2 = (
  /** @class */
  function() {
    function t2(t3, e) {
      if (this.seconds = t3, this.nanoseconds = e, e < 0)
        throw new T2(E2.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
      if (e >= 1e9)
        throw new T2(E2.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + e);
      if (t3 < -62135596800)
        throw new T2(E2.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t3);
      if (t3 >= 253402300800)
        throw new T2(E2.INVALID_ARGUMENT, "Timestamp seconds out of range: " + t3);
    }
    return t2.now = function() {
      return t2.fromMillis(Date.now());
    }, /**
     * Creates a new timestamp from the given date.
     *
     * @param date - The date to initialize the `Timestamp` from.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     date.
     */
    t2.fromDate = function(e) {
      return t2.fromMillis(e.getTime());
    }, /**
     * Creates a new timestamp from the given number of milliseconds.
     *
     * @param milliseconds - Number of milliseconds since Unix epoch
     *     1970-01-01T00:00:00Z.
     * @returns A new `Timestamp` representing the same point in time as the given
     *     number of milliseconds.
     */
    t2.fromMillis = function(e) {
      var n2 = Math.floor(e / 1e3);
      return new t2(n2, 1e6 * (e - 1e3 * n2));
    }, /**
     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion causes
     * a loss of precision since `Date` objects only support millisecond precision.
     *
     * @returns JavaScript `Date` object representing the same point in time as
     *     this `Timestamp`, with millisecond precision.
     */
    t2.prototype.toDate = function() {
      return new Date(this.toMillis());
    }, /**
     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since
     * epoch). This operation causes a loss of precision.
     *
     * @returns The point in time corresponding to this timestamp, represented as
     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.
     */
    t2.prototype.toMillis = function() {
      return 1e3 * this.seconds + this.nanoseconds / 1e6;
    }, t2.prototype._compareTo = function(t3) {
      return this.seconds === t3.seconds ? M2(this.nanoseconds, t3.nanoseconds) : M2(this.seconds, t3.seconds);
    }, /**
     * Returns true if this `Timestamp` is equal to the provided one.
     *
     * @param other - The `Timestamp` to compare against.
     * @returns true if this `Timestamp` is equal to the provided one.
     */
    t2.prototype.isEqual = function(t3) {
      return t3.seconds === this.seconds && t3.nanoseconds === this.nanoseconds;
    }, t2.prototype.toString = function() {
      return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
    }, t2.prototype.toJSON = function() {
      return {
        seconds: this.seconds,
        nanoseconds: this.nanoseconds
      };
    }, /**
     * Converts this object to a primitive string, which allows Timestamp objects to be compared
     * using the `>`, `<=`, `>=` and `>` operators.
     */
    t2.prototype.valueOf = function() {
      var t3 = this.seconds - -62135596800;
      return String(t3).padStart(12, "0") + "." + String(this.nanoseconds).padStart(9, "0");
    }, t2;
  }()
);
var U2 = (
  /** @class */
  function() {
    function t2(t3) {
      this.timestamp = t3;
    }
    return t2.fromTimestamp = function(e) {
      return new t2(e);
    }, t2.min = function() {
      return new t2(new q2(0, 0));
    }, t2.prototype.compareTo = function(t3) {
      return this.timestamp._compareTo(t3.timestamp);
    }, t2.prototype.isEqual = function(t3) {
      return this.timestamp.isEqual(t3.timestamp);
    }, /** Returns a number representation of the version for use in spec tests. */
    t2.prototype.toMicroseconds = function() {
      return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;
    }, t2.prototype.toString = function() {
      return "SnapshotVersion(" + this.timestamp.toString() + ")";
    }, t2.prototype.toTimestamp = function() {
      return this.timestamp;
    }, t2;
  }()
);
function B(t2) {
  var e = 0;
  for (var n2 in t2)
    Object.prototype.hasOwnProperty.call(t2, n2) && e++;
  return e;
}
function j(t2, e) {
  for (var n2 in t2)
    Object.prototype.hasOwnProperty.call(t2, n2) && e(n2, t2[n2]);
}
function K2(t2) {
  for (var e in t2)
    if (Object.prototype.hasOwnProperty.call(t2, e))
      return false;
  return true;
}
var G2 = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      void 0 === e ? e = 0 : e > t3.length && C(), void 0 === n2 ? n2 = t3.length - e : n2 > t3.length - e && C(), this.segments = t3, this.offset = e, this.len = n2;
    }
    return Object.defineProperty(t2.prototype, "length", {
      get: function() {
        return this.len;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.isEqual = function(e) {
      return 0 === t2.comparator(this, e);
    }, t2.prototype.child = function(e) {
      var n2 = this.segments.slice(this.offset, this.limit());
      return e instanceof t2 ? e.forEach(function(t3) {
        n2.push(t3);
      }) : n2.push(e), this.construct(n2);
    }, /** The index of one past the last segment of the path. */
    t2.prototype.limit = function() {
      return this.offset + this.length;
    }, t2.prototype.popFirst = function(t3) {
      return t3 = void 0 === t3 ? 1 : t3, this.construct(this.segments, this.offset + t3, this.length - t3);
    }, t2.prototype.popLast = function() {
      return this.construct(this.segments, this.offset, this.length - 1);
    }, t2.prototype.firstSegment = function() {
      return this.segments[this.offset];
    }, t2.prototype.lastSegment = function() {
      return this.get(this.length - 1);
    }, t2.prototype.get = function(t3) {
      return this.segments[this.offset + t3];
    }, t2.prototype.isEmpty = function() {
      return 0 === this.length;
    }, t2.prototype.isPrefixOf = function(t3) {
      if (t3.length < this.length)
        return false;
      for (var e = 0; e < this.length; e++)
        if (this.get(e) !== t3.get(e))
          return false;
      return true;
    }, t2.prototype.isImmediateParentOf = function(t3) {
      if (this.length + 1 !== t3.length)
        return false;
      for (var e = 0; e < this.length; e++)
        if (this.get(e) !== t3.get(e))
          return false;
      return true;
    }, t2.prototype.forEach = function(t3) {
      for (var e = this.offset, n2 = this.limit(); e < n2; e++)
        t3(this.segments[e]);
    }, t2.prototype.toArray = function() {
      return this.segments.slice(this.offset, this.limit());
    }, t2.comparator = function(t3, e) {
      for (var n2 = Math.min(t3.length, e.length), r2 = 0; r2 < n2; r2++) {
        var i = t3.get(r2), o = e.get(r2);
        if (i < o)
          return -1;
        if (i > o)
          return 1;
      }
      return t3.length < e.length ? -1 : t3.length > e.length ? 1 : 0;
    }, t2;
  }()
);
var Q2 = (
  /** @class */
  function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.construct = function(t3, n2, r2) {
      return new e(t3, n2, r2);
    }, e.prototype.canonicalString = function() {
      return this.toArray().join("/");
    }, e.prototype.toString = function() {
      return this.canonicalString();
    }, /**
     * Creates a resource path from the given slash-delimited string. If multiple
     * arguments are provided, all components are combined. Leading and trailing
     * slashes from all components are ignored.
     */
    e.fromString = function() {
      for (var t3 = [], n2 = 0; n2 < arguments.length; n2++)
        t3[n2] = arguments[n2];
      for (var r2 = [], i = 0, o = t3; i < o.length; i++) {
        var s = o[i];
        if (s.indexOf("//") >= 0)
          throw new T2(E2.INVALID_ARGUMENT, "Invalid segment (" + s + "). Paths must not contain // in them.");
        r2.push.apply(r2, s.split("/").filter(function(t4) {
          return t4.length > 0;
        }));
      }
      return new e(r2);
    }, e.emptyPath = function() {
      return new e([]);
    }, e;
  }(G2)
);
var z2 = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
var W2 = (
  /** @class */
  function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.construct = function(t3, n2, r2) {
      return new e(t3, n2, r2);
    }, /**
     * Returns true if the string could be used as a segment in a field path
     * without escaping.
     */
    e.isValidIdentifier = function(t3) {
      return z2.test(t3);
    }, e.prototype.canonicalString = function() {
      return this.toArray().map(function(t3) {
        return t3 = t3.replace(/\\/g, "\\\\").replace(/`/g, "\\`"), e.isValidIdentifier(t3) || (t3 = "`" + t3 + "`"), t3;
      }).join(".");
    }, e.prototype.toString = function() {
      return this.canonicalString();
    }, /**
     * Returns true if this field references the key of a document.
     */
    e.prototype.isKeyField = function() {
      return 1 === this.length && "__name__" === this.get(0);
    }, /**
     * The field designating the key of a document.
     */
    e.keyField = function() {
      return new e(["__name__"]);
    }, /**
     * Parses a field string from the given server-formatted string.
     *
     * - Splitting the empty string is not allowed (for now at least).
     * - Empty segments within the string (e.g. if there are two consecutive
     *   separators) are not allowed.
     *
     * TODO(b/37244157): we should make this more strict. Right now, it allows
     * non-identifier path components, even if they aren't escaped.
     */
    e.fromServerFormat = function(t3) {
      for (var n2 = [], r2 = "", i = 0, o = function() {
        if (0 === r2.length)
          throw new T2(E2.INVALID_ARGUMENT, "Invalid field path (" + t3 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
        n2.push(r2), r2 = "";
      }, s = false; i < t3.length; ) {
        var u = t3[i];
        if ("\\" === u) {
          if (i + 1 === t3.length)
            throw new T2(E2.INVALID_ARGUMENT, "Path has trailing escape character: " + t3);
          var a = t3[i + 1];
          if ("\\" !== a && "." !== a && "`" !== a)
            throw new T2(E2.INVALID_ARGUMENT, "Path has invalid escape sequence: " + t3);
          r2 += a, i += 2;
        } else
          "`" === u ? (s = !s, i++) : "." !== u || s ? (r2 += u, i++) : (o(), i++);
      }
      if (o(), s)
        throw new T2(E2.INVALID_ARGUMENT, "Unterminated ` in path: " + t3);
      return new e(n2);
    }, e.emptyPath = function() {
      return new e([]);
    }, e;
  }(G2)
);
var H2 = (
  /** @class */
  function() {
    function t2(t3) {
      this.fields = t3, // TODO(dimond): validation of FieldMask
      // Sort the field mask to support `FieldMask.isEqual()` and assert below.
      t3.sort(W2.comparator);
    }
    return t2.prototype.covers = function(t3) {
      for (var e = 0, n2 = this.fields; e < n2.length; e++) {
        if (n2[e].isPrefixOf(t3))
          return true;
      }
      return false;
    }, t2.prototype.isEqual = function(t3) {
      return F2(this.fields, t3.fields, function(t4, e) {
        return t4.isEqual(e);
      });
    }, t2;
  }()
);
var Y2 = (
  /** @class */
  function() {
    function t2(t3) {
      this.binaryString = t3;
    }
    return t2.fromBase64String = function(e) {
      return new t2(atob(e));
    }, t2.fromUint8Array = function(e) {
      return new t2(
        /**
        * Helper function to convert an Uint8array to a binary string.
        */
        function(t3) {
          for (var e2 = "", n2 = 0; n2 < t3.length; ++n2)
            e2 += String.fromCharCode(t3[n2]);
          return e2;
        }(e)
      );
    }, t2.prototype.toBase64 = function() {
      return t3 = this.binaryString, btoa(t3);
      var t3;
    }, t2.prototype.toUint8Array = function() {
      return function(t3) {
        for (var e = new Uint8Array(t3.length), n2 = 0; n2 < t3.length; n2++)
          e[n2] = t3.charCodeAt(n2);
        return e;
      }(this.binaryString);
    }, t2.prototype.approximateByteSize = function() {
      return 2 * this.binaryString.length;
    }, t2.prototype.compareTo = function(t3) {
      return M2(this.binaryString, t3.binaryString);
    }, t2.prototype.isEqual = function(t3) {
      return this.binaryString === t3.binaryString;
    }, t2;
  }()
);
Y2.EMPTY_BYTE_STRING = new Y2("");
var X2 = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
function $(t2) {
  if (R2(!!t2), "string" == typeof t2) {
    var e = 0, n2 = X2.exec(t2);
    if (R2(!!n2), n2[1]) {
      var r2 = n2[1];
      r2 = (r2 + "000000000").substr(0, 9), e = Number(r2);
    }
    var i = new Date(t2);
    return {
      seconds: Math.floor(i.getTime() / 1e3),
      nanos: e
    };
  }
  return {
    seconds: J2(t2.seconds),
    nanos: J2(t2.nanos)
  };
}
function J2(t2) {
  return "number" == typeof t2 ? t2 : "string" == typeof t2 ? Number(t2) : 0;
}
function Z2(t2) {
  return "string" == typeof t2 ? Y2.fromBase64String(t2) : Y2.fromUint8Array(t2);
}
function tt(t2) {
  var e, n2;
  return "server_timestamp" === (null === (n2 = ((null === (e = null == t2 ? void 0 : t2.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n2 ? void 0 : n2.stringValue);
}
function et(t2) {
  var e = t2.mapValue.fields.__previous_value__;
  return tt(e) ? et(e) : e;
}
function nt(t2) {
  var e = $(t2.mapValue.fields.__local_write_time__.timestampValue);
  return new q2(e.seconds, e.nanos);
}
function rt(t2) {
  return null == t2;
}
function it(t2) {
  return 0 === t2 && 1 / t2 == -1 / 0;
}
function ot(t2) {
  return "number" == typeof t2 && Number.isInteger(t2) && !it(t2) && t2 <= Number.MAX_SAFE_INTEGER && t2 >= Number.MIN_SAFE_INTEGER;
}
var st = (
  /** @class */
  function() {
    function t2(t3) {
      this.path = t3;
    }
    return t2.fromPath = function(e) {
      return new t2(Q2.fromString(e));
    }, t2.fromName = function(e) {
      return new t2(Q2.fromString(e).popFirst(5));
    }, /** Returns true if the document is in the specified collectionId. */
    t2.prototype.hasCollectionId = function(t3) {
      return this.path.length >= 2 && this.path.get(this.path.length - 2) === t3;
    }, t2.prototype.isEqual = function(t3) {
      return null !== t3 && 0 === Q2.comparator(this.path, t3.path);
    }, t2.prototype.toString = function() {
      return this.path.toString();
    }, t2.comparator = function(t3, e) {
      return Q2.comparator(t3.path, e.path);
    }, t2.isDocumentKey = function(t3) {
      return t3.length % 2 == 0;
    }, /**
     * Creates and returns a new document key with the given segments.
     *
     * @param segments - The segments of the path to the document
     * @returns A new instance of DocumentKey
     */
    t2.fromSegments = function(e) {
      return new t2(new Q2(e.slice()));
    }, t2;
  }()
);
function ut(t2) {
  return "nullValue" in t2 ? 0 : "booleanValue" in t2 ? 1 : "integerValue" in t2 || "doubleValue" in t2 ? 2 : "timestampValue" in t2 ? 3 : "stringValue" in t2 ? 5 : "bytesValue" in t2 ? 6 : "referenceValue" in t2 ? 7 : "geoPointValue" in t2 ? 8 : "arrayValue" in t2 ? 9 : "mapValue" in t2 ? tt(t2) ? 4 : 10 : C();
}
function at(t2, e) {
  var n2 = ut(t2);
  if (n2 !== ut(e))
    return false;
  switch (n2) {
    case 0:
      return true;
    case 1:
      return t2.booleanValue === e.booleanValue;
    case 4:
      return nt(t2).isEqual(nt(e));
    case 3:
      return function(t3, e2) {
        if ("string" == typeof t3.timestampValue && "string" == typeof e2.timestampValue && t3.timestampValue.length === e2.timestampValue.length)
          return t3.timestampValue === e2.timestampValue;
        var n3 = $(t3.timestampValue), r2 = $(e2.timestampValue);
        return n3.seconds === r2.seconds && n3.nanos === r2.nanos;
      }(t2, e);
    case 5:
      return t2.stringValue === e.stringValue;
    case 6:
      return function(t3, e2) {
        return Z2(t3.bytesValue).isEqual(Z2(e2.bytesValue));
      }(t2, e);
    case 7:
      return t2.referenceValue === e.referenceValue;
    case 8:
      return function(t3, e2) {
        return J2(t3.geoPointValue.latitude) === J2(e2.geoPointValue.latitude) && J2(t3.geoPointValue.longitude) === J2(e2.geoPointValue.longitude);
      }(t2, e);
    case 2:
      return function(t3, e2) {
        if ("integerValue" in t3 && "integerValue" in e2)
          return J2(t3.integerValue) === J2(e2.integerValue);
        if ("doubleValue" in t3 && "doubleValue" in e2) {
          var n3 = J2(t3.doubleValue), r2 = J2(e2.doubleValue);
          return n3 === r2 ? it(n3) === it(r2) : isNaN(n3) && isNaN(r2);
        }
        return false;
      }(t2, e);
    case 9:
      return F2(t2.arrayValue.values || [], e.arrayValue.values || [], at);
    case 10:
      return function(t3, e2) {
        var n3 = t3.mapValue.fields || {}, r2 = e2.mapValue.fields || {};
        if (B(n3) !== B(r2))
          return false;
        for (var i in n3)
          if (n3.hasOwnProperty(i) && (void 0 === r2[i] || !at(n3[i], r2[i])))
            return false;
        return true;
      }(t2, e);
    default:
      return C();
  }
}
function ct(t2, e) {
  return void 0 !== (t2.values || []).find(function(t3) {
    return at(t3, e);
  });
}
function ht(t2, e) {
  var n2 = ut(t2), r2 = ut(e);
  if (n2 !== r2)
    return M2(n2, r2);
  switch (n2) {
    case 0:
      return 0;
    case 1:
      return M2(t2.booleanValue, e.booleanValue);
    case 2:
      return function(t3, e2) {
        var n3 = J2(t3.integerValue || t3.doubleValue), r3 = J2(e2.integerValue || e2.doubleValue);
        return n3 < r3 ? -1 : n3 > r3 ? 1 : n3 === r3 ? 0 : (
          // one or both are NaN.
          isNaN(n3) ? isNaN(r3) ? 0 : -1 : 1
        );
      }(t2, e);
    case 3:
      return ft(t2.timestampValue, e.timestampValue);
    case 4:
      return ft(nt(t2), nt(e));
    case 5:
      return M2(t2.stringValue, e.stringValue);
    case 6:
      return function(t3, e2) {
        var n3 = Z2(t3), r3 = Z2(e2);
        return n3.compareTo(r3);
      }(t2.bytesValue, e.bytesValue);
    case 7:
      return function(t3, e2) {
        for (var n3 = t3.split("/"), r3 = e2.split("/"), i = 0; i < n3.length && i < r3.length; i++) {
          var o = M2(n3[i], r3[i]);
          if (0 !== o)
            return o;
        }
        return M2(n3.length, r3.length);
      }(t2.referenceValue, e.referenceValue);
    case 8:
      return function(t3, e2) {
        var n3 = M2(J2(t3.latitude), J2(e2.latitude));
        return 0 !== n3 ? n3 : M2(J2(t3.longitude), J2(e2.longitude));
      }(t2.geoPointValue, e.geoPointValue);
    case 9:
      return function(t3, e2) {
        for (var n3 = t3.values || [], r3 = e2.values || [], i = 0; i < n3.length && i < r3.length; ++i) {
          var o = ht(n3[i], r3[i]);
          if (o)
            return o;
        }
        return M2(n3.length, r3.length);
      }(t2.arrayValue, e.arrayValue);
    case 10:
      return function(t3, e2) {
        var n3 = t3.fields || {}, r3 = Object.keys(n3), i = e2.fields || {}, o = Object.keys(i);
        r3.sort(), o.sort();
        for (var s = 0; s < r3.length && s < o.length; ++s) {
          var u = M2(r3[s], o[s]);
          if (0 !== u)
            return u;
          var a = ht(n3[r3[s]], i[o[s]]);
          if (0 !== a)
            return a;
        }
        return M2(r3.length, o.length);
      }(t2.mapValue, e.mapValue);
    default:
      throw C();
  }
}
function ft(t2, e) {
  if ("string" == typeof t2 && "string" == typeof e && t2.length === e.length)
    return M2(t2, e);
  var n2 = $(t2), r2 = $(e), i = M2(n2.seconds, r2.seconds);
  return 0 !== i ? i : M2(n2.nanos, r2.nanos);
}
function lt(t2) {
  return dt(t2);
}
function dt(t2) {
  return "nullValue" in t2 ? "null" : "booleanValue" in t2 ? "" + t2.booleanValue : "integerValue" in t2 ? "" + t2.integerValue : "doubleValue" in t2 ? "" + t2.doubleValue : "timestampValue" in t2 ? function(t3) {
    var e2 = $(t3);
    return "time(" + e2.seconds + "," + e2.nanos + ")";
  }(t2.timestampValue) : "stringValue" in t2 ? t2.stringValue : "bytesValue" in t2 ? Z2(t2.bytesValue).toBase64() : "referenceValue" in t2 ? (n2 = t2.referenceValue, st.fromName(n2).toString()) : "geoPointValue" in t2 ? "geo(" + (e = t2.geoPointValue).latitude + "," + e.longitude + ")" : "arrayValue" in t2 ? function(t3) {
    for (var e2 = "[", n3 = true, r2 = 0, i = t3.values || []; r2 < i.length; r2++) {
      n3 ? n3 = false : e2 += ",", e2 += dt(i[r2]);
    }
    return e2 + "]";
  }(t2.arrayValue) : "mapValue" in t2 ? function(t3) {
    for (var e2 = "{", n3 = true, r2 = 0, i = Object.keys(t3.fields || {}).sort(); r2 < i.length; r2++) {
      var o = i[r2];
      n3 ? n3 = false : e2 += ",", e2 += o + ":" + dt(t3.fields[o]);
    }
    return e2 + "}";
  }(t2.mapValue) : C();
  var e, n2;
}
function pt(t2, e) {
  return {
    referenceValue: "projects/" + t2.projectId + "/databases/" + t2.database + "/documents/" + e.path.canonicalString()
  };
}
function yt(t2) {
  return !!t2 && "integerValue" in t2;
}
function vt(t2) {
  return !!t2 && "arrayValue" in t2;
}
function mt(t2) {
  return !!t2 && "nullValue" in t2;
}
function gt(t2) {
  return !!t2 && "doubleValue" in t2 && isNaN(Number(t2.doubleValue));
}
function wt(t2) {
  return !!t2 && "mapValue" in t2;
}
var bt = (
  /** @class */
  function() {
    function t2(t3) {
      this.overlayMap = /* @__PURE__ */ new Map(), this.partialValue = t3;
    }
    return t2.empty = function() {
      return new t2({
        mapValue: {}
      });
    }, /**
     * Returns the value at the given path or null.
     *
     * @param path - the path to search
     * @returns The value at the path or null if the path is not set.
     */
    t2.prototype.field = function(e) {
      return t2.extractNestedValue(this.buildProto(), e);
    }, /** Returns the full protobuf representation. */
    t2.prototype.toProto = function() {
      return this.field(W2.emptyPath());
    }, /**
     * Sets the field to the provided value.
     *
     * @param path - The field path to set.
     * @param value - The value to set.
     */
    t2.prototype.set = function(t3, e) {
      this.setOverlay(t3, e);
    }, /**
     * Sets the provided fields to the provided values.
     *
     * @param data - A map of fields to values (or null for deletes).
     */
    t2.prototype.setAll = function(t3) {
      var e = this;
      t3.forEach(function(t4, n2) {
        t4 ? e.set(n2, t4) : e.delete(n2);
      });
    }, /**
     * Removes the field at the specified path. If there is no field at the
     * specified path, nothing is changed.
     *
     * @param path - The field path to remove.
     */
    t2.prototype.delete = function(t3) {
      this.setOverlay(t3, null);
    }, t2.prototype.isEqual = function(t3) {
      return at(this.buildProto(), t3.buildProto());
    }, /**
     * Adds `value` to the overlay map at `path`. Creates nested map entries if
     * needed.
     */
    t2.prototype.setOverlay = function(t3, e) {
      for (var n2 = this.overlayMap, r2 = 0; r2 < t3.length - 1; ++r2) {
        var i = t3.get(r2), o = n2.get(i);
        o instanceof Map ? (
          // Re-use a previously created map
          n2 = o
        ) : o && 10 === ut(o) ? (
          // Convert the existing Protobuf MapValue into a map
          (o = new Map(Object.entries(o.mapValue.fields || {})), n2.set(i, o), n2 = o)
        ) : (
          // Create an empty map to represent the current nesting level
          (o = /* @__PURE__ */ new Map(), n2.set(i, o), n2 = o)
        );
      }
      n2.set(t3.lastSegment(), e);
    }, /**
     * Applies any overlays from `currentOverlays` that exist at `currentPath`
     * and returns the merged data at `currentPath` (or null if there were no
     * changes).
     *
     * @param currentPath - The path at the current nesting level. Can be set to
     * FieldValue.emptyPath() to represent the root.
     * @param currentOverlays - The overlays at the current nesting level in the
     * same format as `overlayMap`.
     * @returns The merged data at `currentPath` or null if no modifications
     * were applied.
     */
    t2.prototype.applyOverlay = function(e, n2) {
      var r2 = this, i = false, o = t2.extractNestedValue(this.partialValue, e), s = wt(o) ? (
        // If there is already data at the current path, base our
        Object.assign({}, o.mapValue.fields)
      ) : {};
      return n2.forEach(function(t3, n3) {
        if (t3 instanceof Map) {
          var o2 = r2.applyOverlay(e.child(n3), t3);
          null != o2 && (s[n3] = o2, i = true);
        } else
          null !== t3 ? (s[n3] = t3, i = true) : s.hasOwnProperty(n3) && (delete s[n3], i = true);
      }), i ? {
        mapValue: {
          fields: s
        }
      } : null;
    }, /**
     * Builds the Protobuf that backs this ObjectValue.
     *
     * This method applies any outstanding modifications and memoizes the result.
     * Further invocations are based on this memoized result.
     */
    t2.prototype.buildProto = function() {
      var t3 = this.applyOverlay(W2.emptyPath(), this.overlayMap);
      return null != t3 && (this.partialValue = t3, this.overlayMap.clear()), this.partialValue;
    }, t2.extractNestedValue = function(t3, e) {
      if (e.isEmpty())
        return t3;
      for (var n2 = t3, r2 = 0; r2 < e.length - 1; ++r2) {
        if (!n2.mapValue.fields)
          return null;
        if (!wt(n2 = n2.mapValue.fields[e.get(r2)]))
          return null;
      }
      return (n2 = (n2.mapValue.fields || {})[e.lastSegment()]) || null;
    }, t2.prototype.clone = function() {
      return new t2(this.buildProto());
    }, t2;
  }()
);
function It(t2) {
  var e = [];
  return j(t2.fields || {}, function(t3, n2) {
    var r2 = new W2([t3]);
    if (wt(n2)) {
      var i = It(n2.mapValue).fields;
      if (0 === i.length)
        e.push(r2);
      else
        for (var o = 0, s = i; o < s.length; o++) {
          var u = s[o];
          e.push(r2.child(u));
        }
    } else
      e.push(r2);
  }), new H2(e);
}
var _t = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i) {
      this.key = t3, this.documentType = e, this.version = n2, this.data = r2, this.documentState = i;
    }
    return t2.newInvalidDocument = function(e) {
      return new t2(
        e,
        0,
        U2.min(),
        bt.empty(),
        0
        /* SYNCED */
      );
    }, /**
     * Creates a new document that is known to exist with the given data at the
     * given version.
     */
    t2.newFoundDocument = function(e, n2, r2) {
      return new t2(
        e,
        1,
        n2,
        r2,
        0
        /* SYNCED */
      );
    }, /** Creates a new document that is known to not exist at the given version. */
    t2.newNoDocument = function(e, n2) {
      return new t2(
        e,
        2,
        n2,
        bt.empty(),
        0
        /* SYNCED */
      );
    }, /**
     * Creates a new document that is known to exist at the given version but
     * whose data is not known (e.g. a document that was updated without a known
     * base document).
     */
    t2.newUnknownDocument = function(e, n2) {
      return new t2(
        e,
        3,
        n2,
        bt.empty(),
        2
        /* HAS_COMMITTED_MUTATIONS */
      );
    }, /**
     * Changes the document type to indicate that it exists and that its version
     * and data are known.
     */
    t2.prototype.convertToFoundDocument = function(t3, e) {
      return this.version = t3, this.documentType = 1, this.data = e, this.documentState = 0, this;
    }, /**
     * Changes the document type to indicate that it doesn't exist at the given
     * version.
     */
    t2.prototype.convertToNoDocument = function(t3) {
      return this.version = t3, this.documentType = 2, this.data = bt.empty(), this.documentState = 0, this;
    }, /**
     * Changes the document type to indicate that it exists at a given version but
     * that its data is not known (e.g. a document that was updated without a known
     * base document).
     */
    t2.prototype.convertToUnknownDocument = function(t3) {
      return this.version = t3, this.documentType = 3, this.data = bt.empty(), this.documentState = 2, this;
    }, t2.prototype.setHasCommittedMutations = function() {
      return this.documentState = 2, this;
    }, t2.prototype.setHasLocalMutations = function() {
      return this.documentState = 1, this;
    }, Object.defineProperty(t2.prototype, "hasLocalMutations", {
      get: function() {
        return 1 === this.documentState;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "hasCommittedMutations", {
      get: function() {
        return 2 === this.documentState;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "hasPendingWrites", {
      get: function() {
        return this.hasLocalMutations || this.hasCommittedMutations;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.isValidDocument = function() {
      return 0 !== this.documentType;
    }, t2.prototype.isFoundDocument = function() {
      return 1 === this.documentType;
    }, t2.prototype.isNoDocument = function() {
      return 2 === this.documentType;
    }, t2.prototype.isUnknownDocument = function() {
      return 3 === this.documentType;
    }, t2.prototype.isEqual = function(e) {
      return e instanceof t2 && this.key.isEqual(e.key) && this.version.isEqual(e.version) && this.documentType === e.documentType && this.documentState === e.documentState && this.data.isEqual(e.data);
    }, t2.prototype.clone = function() {
      return new t2(this.key, this.documentType, this.version, this.data.clone(), this.documentState);
    }, t2.prototype.toString = function() {
      return "Document(" + this.key + ", " + this.version + ", " + JSON.stringify(this.data.toProto()) + ", {documentType: " + this.documentType + "}), {documentState: " + this.documentState + "})";
    }, t2;
  }()
);
var Et = function(t2, e, n2, r2, i, o, s) {
  void 0 === e && (e = null), void 0 === n2 && (n2 = []), void 0 === r2 && (r2 = []), void 0 === i && (i = null), void 0 === o && (o = null), void 0 === s && (s = null), this.path = t2, this.collectionGroup = e, this.orderBy = n2, this.filters = r2, this.limit = i, this.startAt = o, this.endAt = s, this.h = null;
};
function Tt(t2, e, n2, r2, i, o, s) {
  return void 0 === e && (e = null), void 0 === n2 && (n2 = []), void 0 === r2 && (r2 = []), void 0 === i && (i = null), void 0 === o && (o = null), void 0 === s && (s = null), new Et(t2, e, n2, r2, i, o, s);
}
function St(t2) {
  var e = O2(t2);
  if (null === e.h) {
    var n2 = e.path.canonicalString();
    null !== e.collectionGroup && (n2 += "|cg:" + e.collectionGroup), n2 += "|f:", n2 += e.filters.map(function(t3) {
      return function(t4) {
        return t4.field.canonicalString() + t4.op.toString() + lt(t4.value);
      }(t3);
    }).join(","), n2 += "|ob:", n2 += e.orderBy.map(function(t3) {
      return function(t4) {
        return t4.field.canonicalString() + t4.dir;
      }(t3);
    }).join(","), rt(e.limit) || (n2 += "|l:", n2 += e.limit), e.startAt && (n2 += "|lb:", n2 += Vt(e.startAt)), e.endAt && (n2 += "|ub:", n2 += Vt(e.endAt)), e.h = n2;
  }
  return e.h;
}
function Dt(t2, e) {
  if (t2.limit !== e.limit)
    return false;
  if (t2.orderBy.length !== e.orderBy.length)
    return false;
  for (var n2 = 0; n2 < t2.orderBy.length; n2++)
    if (!Ut(t2.orderBy[n2], e.orderBy[n2]))
      return false;
  if (t2.filters.length !== e.filters.length)
    return false;
  for (var r2 = 0; r2 < t2.filters.length; r2++)
    if (i = t2.filters[r2], o = e.filters[r2], i.op !== o.op || !i.field.isEqual(o.field) || !at(i.value, o.value))
      return false;
  var i, o;
  return t2.collectionGroup === e.collectionGroup && !!t2.path.isEqual(e.path) && !!jt(t2.startAt, e.startAt) && jt(t2.endAt, e.endAt);
}
function Nt(t2) {
  return st.isDocumentKey(t2.path) && null === t2.collectionGroup && 0 === t2.filters.length;
}
var At = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2) {
      var i = this;
      return (i = t2.call(this) || this).field = e2, i.op = n2, i.value = r2, i;
    }
    return __extends(e, t2), e.create = function(t3, n2, r2) {
      return t3.isKeyField() ? "in" === n2 || "not-in" === n2 ? this.l(t3, n2, r2) : new kt(t3, n2, r2) : "array-contains" === n2 ? new Ot(t3, r2) : "in" === n2 ? new Lt(t3, r2) : "not-in" === n2 ? new Pt(t3, r2) : "array-contains-any" === n2 ? new Mt(t3, r2) : new e(t3, n2, r2);
    }, e.l = function(t3, e2, n2) {
      return "in" === e2 ? new xt(t3, n2) : new Ct(t3, n2);
    }, e.prototype.matches = function(t3) {
      var e2 = t3.data.field(this.field);
      return "!=" === this.op ? null !== e2 && this.m(ht(e2, this.value)) : null !== e2 && ut(this.value) === ut(e2) && this.m(ht(e2, this.value));
    }, e.prototype.m = function(t3) {
      switch (this.op) {
        case "<":
          return t3 < 0;
        case "<=":
          return t3 <= 0;
        case "==":
          return 0 === t3;
        case "!=":
          return 0 !== t3;
        case ">":
          return t3 > 0;
        case ">=":
          return t3 >= 0;
        default:
          return C();
      }
    }, e.prototype.g = function() {
      return [
        "<",
        "<=",
        ">",
        ">=",
        "!=",
        "not-in"
        /* NOT_IN */
      ].indexOf(this.op) >= 0;
    }, e;
  }(function() {
  })
);
var kt = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2) {
      var i = this;
      return (i = t2.call(this, e2, n2, r2) || this).key = st.fromName(r2.referenceValue), i;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      var e2 = st.comparator(t3.key, this.key);
      return this.m(e2);
    }, e;
  }(At)
);
var xt = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2, "in", n2) || this).keys = Rt("in", n2), r2;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      return this.keys.some(function(e2) {
        return e2.isEqual(t3.key);
      });
    }, e;
  }(At)
);
var Ct = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2, "not-in", n2) || this).keys = Rt("not-in", n2), r2;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      return !this.keys.some(function(e2) {
        return e2.isEqual(t3.key);
      });
    }, e;
  }(At)
);
function Rt(t2, e) {
  var n2;
  return ((null === (n2 = e.arrayValue) || void 0 === n2 ? void 0 : n2.values) || []).map(function(t3) {
    return st.fromName(t3.referenceValue);
  });
}
var Ot = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      return t2.call(this, e2, "array-contains", n2) || this;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      var e2 = t3.data.field(this.field);
      return vt(e2) && ct(e2.arrayValue, this.value);
    }, e;
  }(At)
);
var Lt = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      return t2.call(this, e2, "in", n2) || this;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      var e2 = t3.data.field(this.field);
      return null !== e2 && ct(this.value.arrayValue, e2);
    }, e;
  }(At)
);
var Pt = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      return t2.call(this, e2, "not-in", n2) || this;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      if (ct(this.value.arrayValue, {
        nullValue: "NULL_VALUE"
      }))
        return false;
      var e2 = t3.data.field(this.field);
      return null !== e2 && !ct(this.value.arrayValue, e2);
    }, e;
  }(At)
);
var Mt = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      return t2.call(this, e2, "array-contains-any", n2) || this;
    }
    return __extends(e, t2), e.prototype.matches = function(t3) {
      var e2 = this, n2 = t3.data.field(this.field);
      return !(!vt(n2) || !n2.arrayValue.values) && n2.arrayValue.values.some(function(t4) {
        return ct(e2.value.arrayValue, t4);
      });
    }, e;
  }(At)
);
var Ft = function(t2, e) {
  this.position = t2, this.before = e;
};
function Vt(t2) {
  return (t2.before ? "b" : "a") + ":" + t2.position.map(function(t3) {
    return lt(t3);
  }).join(",");
}
var qt = function(t2, e) {
  void 0 === e && (e = "asc"), this.field = t2, this.dir = e;
};
function Ut(t2, e) {
  return t2.dir === e.dir && t2.field.isEqual(e.field);
}
function Bt(t2, e, n2) {
  for (var r2 = 0, i = 0; i < t2.position.length; i++) {
    var o = e[i], s = t2.position[i];
    if (r2 = o.field.isKeyField() ? st.comparator(st.fromName(s.referenceValue), n2.key) : ht(s, n2.data.field(o.field)), "desc" === o.dir && (r2 *= -1), 0 !== r2)
      break;
  }
  return t2.before ? r2 <= 0 : r2 < 0;
}
function jt(t2, e) {
  if (null === t2)
    return null === e;
  if (null === e)
    return false;
  if (t2.before !== e.before || t2.position.length !== e.position.length)
    return false;
  for (var n2 = 0; n2 < t2.position.length; n2++)
    if (!at(t2.position[n2], e.position[n2]))
      return false;
  return true;
}
var Kt = (
  /**
       * Initializes a Query with a path and optional additional query constraints.
       * Path must currently be empty if this is a collection group query.
       */
  function(t2, e, n2, r2, i, o, s, u) {
    void 0 === e && (e = null), void 0 === n2 && (n2 = []), void 0 === r2 && (r2 = []), void 0 === i && (i = null), void 0 === o && (o = "F"), void 0 === s && (s = null), void 0 === u && (u = null), this.path = t2, this.collectionGroup = e, this.explicitOrderBy = n2, this.filters = r2, this.limit = i, this.limitType = o, this.startAt = s, this.endAt = u, this.p = null, // The corresponding `Target` of this `Query` instance.
    this.T = null, this.startAt, this.endAt;
  }
);
function Gt(t2, e, n2, r2, i, o, s, u) {
  return new Kt(t2, e, n2, r2, i, o, s, u);
}
function Qt(t2) {
  return new Kt(t2);
}
function zt(t2) {
  return !rt(t2.limit) && "F" === t2.limitType;
}
function Wt(t2) {
  return !rt(t2.limit) && "L" === t2.limitType;
}
function Ht(t2) {
  return t2.explicitOrderBy.length > 0 ? t2.explicitOrderBy[0].field : null;
}
function Yt(t2) {
  for (var e = 0, n2 = t2.filters; e < n2.length; e++) {
    var r2 = n2[e];
    if (r2.g())
      return r2.field;
  }
  return null;
}
function Xt(t2) {
  return null !== t2.collectionGroup;
}
function $t(t2) {
  var e = O2(t2);
  if (null === e.p) {
    e.p = [];
    var n2 = Yt(e), r2 = Ht(e);
    if (null !== n2 && null === r2)
      n2.isKeyField() || e.p.push(new qt(n2)), e.p.push(new qt(
        W2.keyField(),
        "asc"
        /* ASCENDING */
      ));
    else {
      for (var i = false, o = 0, s = e.explicitOrderBy; o < s.length; o++) {
        var u = s[o];
        e.p.push(u), u.field.isKeyField() && (i = true);
      }
      if (!i) {
        var a = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : "asc";
        e.p.push(new qt(W2.keyField(), a));
      }
    }
  }
  return e.p;
}
function Jt(t2) {
  var e = O2(t2);
  if (!e.T)
    if ("F" === e.limitType)
      e.T = Tt(e.path, e.collectionGroup, $t(e), e.filters, e.limit, e.startAt, e.endAt);
    else {
      for (var n2 = [], r2 = 0, i = $t(e); r2 < i.length; r2++) {
        var o = i[r2], s = "desc" === o.dir ? "asc" : "desc";
        n2.push(new qt(o.field, s));
      }
      var u = e.endAt ? new Ft(e.endAt.position, !e.endAt.before) : null, a = e.startAt ? new Ft(e.startAt.position, !e.startAt.before) : null;
      e.T = Tt(e.path, e.collectionGroup, n2, e.filters, e.limit, u, a);
    }
  return e.T;
}
function Zt(t2, e, n2) {
  return new Kt(t2.path, t2.collectionGroup, t2.explicitOrderBy.slice(), t2.filters.slice(), e, n2, t2.startAt, t2.endAt);
}
function te(t2, e) {
  return Dt(Jt(t2), Jt(e)) && t2.limitType === e.limitType;
}
function ee(t2) {
  return St(Jt(t2)) + "|lt:" + t2.limitType;
}
function ne(t2) {
  return "Query(target=" + function(t3) {
    var e = t3.path.canonicalString();
    return null !== t3.collectionGroup && (e += " collectionGroup=" + t3.collectionGroup), t3.filters.length > 0 && (e += ", filters: [" + t3.filters.map(function(t4) {
      return (e2 = t4).field.canonicalString() + " " + e2.op + " " + lt(e2.value);
      var e2;
    }).join(", ") + "]"), rt(t3.limit) || (e += ", limit: " + t3.limit), t3.orderBy.length > 0 && (e += ", orderBy: [" + t3.orderBy.map(function(t4) {
      return function(t5) {
        return t5.field.canonicalString() + " (" + t5.dir + ")";
      }(t4);
    }).join(", ") + "]"), t3.startAt && (e += ", startAt: " + Vt(t3.startAt)), t3.endAt && (e += ", endAt: " + Vt(t3.endAt)), "Target(" + e + ")";
  }(Jt(t2)) + "; limitType=" + t2.limitType + ")";
}
function re(t2, e) {
  return e.isFoundDocument() && function(t3, e2) {
    var n2 = e2.key.path;
    return null !== t3.collectionGroup ? e2.key.hasCollectionId(t3.collectionGroup) && t3.path.isPrefixOf(n2) : st.isDocumentKey(t3.path) ? t3.path.isEqual(n2) : t3.path.isImmediateParentOf(n2);
  }(t2, e) && function(t3, e2) {
    for (var n2 = 0, r2 = t3.explicitOrderBy; n2 < r2.length; n2++) {
      var i = r2[n2];
      if (!i.field.isKeyField() && null === e2.data.field(i.field))
        return false;
    }
    return true;
  }(t2, e) && function(t3, e2) {
    for (var n2 = 0, r2 = t3.filters; n2 < r2.length; n2++) {
      if (!r2[n2].matches(e2))
        return false;
    }
    return true;
  }(t2, e) && function(t3, e2) {
    return !(t3.startAt && !Bt(t3.startAt, $t(t3), e2)) && (!t3.endAt || !Bt(t3.endAt, $t(t3), e2));
  }(t2, e);
}
function ie(t2) {
  return function(e, n2) {
    for (var r2 = false, i = 0, o = $t(t2); i < o.length; i++) {
      var s = o[i], u = oe(s, e, n2);
      if (0 !== u)
        return u;
      r2 = r2 || s.field.isKeyField();
    }
    return 0;
  };
}
function oe(t2, e, n2) {
  var r2 = t2.field.isKeyField() ? st.comparator(e.key, n2.key) : function(t3, e2, n3) {
    var r3 = e2.data.field(t3), i = n3.data.field(t3);
    return null !== r3 && null !== i ? ht(r3, i) : C();
  }(t2.field, e, n2);
  switch (t2.dir) {
    case "asc":
      return r2;
    case "desc":
      return -1 * r2;
    default:
      return C();
  }
}
function se(t2, e) {
  if (t2.I) {
    if (isNaN(e))
      return {
        doubleValue: "NaN"
      };
    if (e === 1 / 0)
      return {
        doubleValue: "Infinity"
      };
    if (e === -1 / 0)
      return {
        doubleValue: "-Infinity"
      };
  }
  return {
    doubleValue: it(e) ? "-0" : e
  };
}
function ue(t2) {
  return {
    integerValue: "" + t2
  };
}
function ae(t2, e) {
  return ot(e) ? ue(e) : se(t2, e);
}
var ce = function() {
  this._ = void 0;
};
function he(t2, e, n2) {
  return t2 instanceof de ? function(t3, e2) {
    var n3 = {
      fields: {
        __type__: {
          stringValue: "server_timestamp"
        },
        __local_write_time__: {
          timestampValue: {
            seconds: t3.seconds,
            nanos: t3.nanoseconds
          }
        }
      }
    };
    return e2 && (n3.fields.__previous_value__ = e2), {
      mapValue: n3
    };
  }(n2, e) : t2 instanceof pe ? ye(t2, e) : t2 instanceof ve ? me(t2, e) : function(t3, e2) {
    var n3 = le(t3, e2), r2 = we(n3) + we(t3.A);
    return yt(n3) && yt(t3.A) ? ue(r2) : se(t3.R, r2);
  }(t2, e);
}
function fe(t2, e, n2) {
  return t2 instanceof pe ? ye(t2, e) : t2 instanceof ve ? me(t2, e) : n2;
}
function le(t2, e) {
  return t2 instanceof ge ? yt(n2 = e) || function(t3) {
    return !!t3 && "doubleValue" in t3;
  }(n2) ? e : {
    integerValue: 0
  } : null;
  var n2;
}
var de = (
  /** @class */
  function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e;
  }(ce)
);
var pe = (
  /** @class */
  function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).elements = e2, n2;
    }
    return __extends(e, t2), e;
  }(ce)
);
function ye(t2, e) {
  for (var n2 = be(e), r2 = function(t3) {
    n2.some(function(e2) {
      return at(e2, t3);
    }) || n2.push(t3);
  }, i = 0, o = t2.elements; i < o.length; i++) {
    r2(o[i]);
  }
  return {
    arrayValue: {
      values: n2
    }
  };
}
var ve = (
  /** @class */
  function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).elements = e2, n2;
    }
    return __extends(e, t2), e;
  }(ce)
);
function me(t2, e) {
  for (var n2 = be(e), r2 = function(t3) {
    n2 = n2.filter(function(e2) {
      return !at(e2, t3);
    });
  }, i = 0, o = t2.elements; i < o.length; i++) {
    r2(o[i]);
  }
  return {
    arrayValue: {
      values: n2
    }
  };
}
var ge = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).R = e2, r2.A = n2, r2;
    }
    return __extends(e, t2), e;
  }(ce)
);
function we(t2) {
  return J2(t2.integerValue || t2.doubleValue);
}
function be(t2) {
  return vt(t2) && t2.arrayValue.values ? t2.arrayValue.values.slice() : [];
}
var Ie = function(t2, e) {
  this.field = t2, this.transform = e;
};
var _e = function(t2, e) {
  this.version = t2, this.transformResults = e;
};
var Ee = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.updateTime = t3, this.exists = e;
    }
    return t2.none = function() {
      return new t2();
    }, /** Creates a new Precondition with an exists flag. */
    t2.exists = function(e) {
      return new t2(void 0, e);
    }, /** Creates a new Precondition based on a version a document exists at. */
    t2.updateTime = function(e) {
      return new t2(e);
    }, Object.defineProperty(t2.prototype, "isNone", {
      /** Returns whether this Precondition is empty. */
      get: function() {
        return void 0 === this.updateTime && void 0 === this.exists;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.isEqual = function(t3) {
      return this.exists === t3.exists && (this.updateTime ? !!t3.updateTime && this.updateTime.isEqual(t3.updateTime) : !t3.updateTime);
    }, t2;
  }()
);
function Te(t2, e) {
  return void 0 !== t2.updateTime ? e.isFoundDocument() && e.version.isEqual(t2.updateTime) : void 0 === t2.exists || t2.exists === e.isFoundDocument();
}
var Se = function() {
};
function De(t2, e, n2) {
  t2 instanceof Ce ? function(t3, e2, n3) {
    var r2 = t3.value.clone(), i = Le(t3.fieldTransforms, e2, n3.transformResults);
    r2.setAll(i), e2.convertToFoundDocument(n3.version, r2).setHasCommittedMutations();
  }(t2, e, n2) : t2 instanceof Re ? function(t3, e2, n3) {
    if (Te(t3.precondition, e2)) {
      var r2 = Le(t3.fieldTransforms, e2, n3.transformResults), i = e2.data;
      i.setAll(Oe(t3)), i.setAll(r2), e2.convertToFoundDocument(n3.version, i).setHasCommittedMutations();
    } else
      e2.convertToUnknownDocument(n3.version);
  }(t2, e, n2) : function(t3, e2, n3) {
    e2.convertToNoDocument(n3.version).setHasCommittedMutations();
  }(0, e, n2);
}
function Ne(t2, e, n2) {
  t2 instanceof Ce ? function(t3, e2, n3) {
    if (Te(t3.precondition, e2)) {
      var r2 = t3.value.clone(), i = Pe(t3.fieldTransforms, n3, e2);
      r2.setAll(i), e2.convertToFoundDocument(xe(e2), r2).setHasLocalMutations();
    }
  }(t2, e, n2) : t2 instanceof Re ? function(t3, e2, n3) {
    if (Te(t3.precondition, e2)) {
      var r2 = Pe(t3.fieldTransforms, n3, e2), i = e2.data;
      i.setAll(Oe(t3)), i.setAll(r2), e2.convertToFoundDocument(xe(e2), i).setHasLocalMutations();
    }
  }(t2, e, n2) : function(t3, e2) {
    Te(t3.precondition, e2) && // We don't call `setHasLocalMutations()` since we want to be backwards
    // compatible with the existing SDK behavior.
    e2.convertToNoDocument(U2.min());
  }(t2, e);
}
function Ae(t2, e) {
  for (var n2 = null, r2 = 0, i = t2.fieldTransforms; r2 < i.length; r2++) {
    var o = i[r2], s = e.data.field(o.field), u = le(o.transform, s || null);
    null != u && (null == n2 && (n2 = bt.empty()), n2.set(o.field, u));
  }
  return n2 || null;
}
function ke(t2, e) {
  return t2.type === e.type && !!t2.key.isEqual(e.key) && !!t2.precondition.isEqual(e.precondition) && !!function(t3, e2) {
    return void 0 === t3 && void 0 === e2 || !(!t3 || !e2) && F2(t3, e2, function(t4, e3) {
      return function(t5, e4) {
        return t5.field.isEqual(e4.field) && function(t6, e5) {
          return t6 instanceof pe && e5 instanceof pe || t6 instanceof ve && e5 instanceof ve ? F2(t6.elements, e5.elements, at) : t6 instanceof ge && e5 instanceof ge ? at(t6.A, e5.A) : t6 instanceof de && e5 instanceof de;
        }(t5.transform, e4.transform);
      }(t4, e3);
    });
  }(t2.fieldTransforms, e.fieldTransforms) && (0 === t2.type ? t2.value.isEqual(e.value) : 1 !== t2.type || t2.data.isEqual(e.data) && t2.fieldMask.isEqual(e.fieldMask));
}
function xe(t2) {
  return t2.isFoundDocument() ? t2.version : U2.min();
}
var Ce = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2, i) {
      void 0 === i && (i = []);
      var o = this;
      return (o = t2.call(this) || this).key = e2, o.value = n2, o.precondition = r2, o.fieldTransforms = i, o.type = 0, o;
    }
    return __extends(e, t2), e;
  }(Se)
);
var Re = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2, i, o) {
      void 0 === o && (o = []);
      var s = this;
      return (s = t2.call(this) || this).key = e2, s.data = n2, s.fieldMask = r2, s.precondition = i, s.fieldTransforms = o, s.type = 1, s;
    }
    return __extends(e, t2), e;
  }(Se)
);
function Oe(t2) {
  var e = /* @__PURE__ */ new Map();
  return t2.fieldMask.fields.forEach(function(n2) {
    if (!n2.isEmpty()) {
      var r2 = t2.data.field(n2);
      e.set(n2, r2);
    }
  }), e;
}
function Le(t2, e, n2) {
  var r2 = /* @__PURE__ */ new Map();
  R2(t2.length === n2.length);
  for (var i = 0; i < n2.length; i++) {
    var o = t2[i], s = o.transform, u = e.data.field(o.field);
    r2.set(o.field, fe(s, u, n2[i]));
  }
  return r2;
}
function Pe(t2, e, n2) {
  for (var r2 = /* @__PURE__ */ new Map(), i = 0, o = t2; i < o.length; i++) {
    var s = o[i], u = s.transform, a = n2.data.field(s.field);
    r2.set(s.field, he(u, a, e));
  }
  return r2;
}
var Me;
var Fe;
var Ve = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).key = e2, r2.precondition = n2, r2.type = 2, r2.fieldTransforms = [], r2;
    }
    return __extends(e, t2), e;
  }(Se)
);
var qe = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).key = e2, r2.precondition = n2, r2.type = 3, r2.fieldTransforms = [], r2;
    }
    return __extends(e, t2), e;
  }(Se)
);
var Ue = (
  // TODO(b/33078163): just use simplest form of existence filter for now
  function(t2) {
    this.count = t2;
  }
);
function Be(t2) {
  switch (t2) {
    case E2.OK:
      return C();
    case E2.CANCELLED:
    case E2.UNKNOWN:
    case E2.DEADLINE_EXCEEDED:
    case E2.RESOURCE_EXHAUSTED:
    case E2.INTERNAL:
    case E2.UNAVAILABLE:
    case E2.UNAUTHENTICATED:
      return false;
    case E2.INVALID_ARGUMENT:
    case E2.NOT_FOUND:
    case E2.ALREADY_EXISTS:
    case E2.PERMISSION_DENIED:
    case E2.FAILED_PRECONDITION:
    case E2.ABORTED:
    case E2.OUT_OF_RANGE:
    case E2.UNIMPLEMENTED:
    case E2.DATA_LOSS:
      return true;
    default:
      return C();
  }
}
function je(t2) {
  if (void 0 === t2)
    return A2("GRPC error has no .code"), E2.UNKNOWN;
  switch (t2) {
    case Me.OK:
      return E2.OK;
    case Me.CANCELLED:
      return E2.CANCELLED;
    case Me.UNKNOWN:
      return E2.UNKNOWN;
    case Me.DEADLINE_EXCEEDED:
      return E2.DEADLINE_EXCEEDED;
    case Me.RESOURCE_EXHAUSTED:
      return E2.RESOURCE_EXHAUSTED;
    case Me.INTERNAL:
      return E2.INTERNAL;
    case Me.UNAVAILABLE:
      return E2.UNAVAILABLE;
    case Me.UNAUTHENTICATED:
      return E2.UNAUTHENTICATED;
    case Me.INVALID_ARGUMENT:
      return E2.INVALID_ARGUMENT;
    case Me.NOT_FOUND:
      return E2.NOT_FOUND;
    case Me.ALREADY_EXISTS:
      return E2.ALREADY_EXISTS;
    case Me.PERMISSION_DENIED:
      return E2.PERMISSION_DENIED;
    case Me.FAILED_PRECONDITION:
      return E2.FAILED_PRECONDITION;
    case Me.ABORTED:
      return E2.ABORTED;
    case Me.OUT_OF_RANGE:
      return E2.OUT_OF_RANGE;
    case Me.UNIMPLEMENTED:
      return E2.UNIMPLEMENTED;
    case Me.DATA_LOSS:
      return E2.DATA_LOSS;
    default:
      return C();
  }
}
(Fe = Me || (Me = {}))[Fe.OK = 0] = "OK", Fe[Fe.CANCELLED = 1] = "CANCELLED", Fe[Fe.UNKNOWN = 2] = "UNKNOWN", Fe[Fe.INVALID_ARGUMENT = 3] = "INVALID_ARGUMENT", Fe[Fe.DEADLINE_EXCEEDED = 4] = "DEADLINE_EXCEEDED", Fe[Fe.NOT_FOUND = 5] = "NOT_FOUND", Fe[Fe.ALREADY_EXISTS = 6] = "ALREADY_EXISTS", Fe[Fe.PERMISSION_DENIED = 7] = "PERMISSION_DENIED", Fe[Fe.UNAUTHENTICATED = 16] = "UNAUTHENTICATED", Fe[Fe.RESOURCE_EXHAUSTED = 8] = "RESOURCE_EXHAUSTED", Fe[Fe.FAILED_PRECONDITION = 9] = "FAILED_PRECONDITION", Fe[Fe.ABORTED = 10] = "ABORTED", Fe[Fe.OUT_OF_RANGE = 11] = "OUT_OF_RANGE", Fe[Fe.UNIMPLEMENTED = 12] = "UNIMPLEMENTED", Fe[Fe.INTERNAL = 13] = "INTERNAL", Fe[Fe.UNAVAILABLE = 14] = "UNAVAILABLE", Fe[Fe.DATA_LOSS = 15] = "DATA_LOSS";
var Ke = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.comparator = t3, this.root = e || Qe.EMPTY;
    }
    return t2.prototype.insert = function(e, n2) {
      return new t2(this.comparator, this.root.insert(e, n2, this.comparator).copy(null, null, Qe.BLACK, null, null));
    }, // Returns a copy of the map, with the specified key removed.
    t2.prototype.remove = function(e) {
      return new t2(this.comparator, this.root.remove(e, this.comparator).copy(null, null, Qe.BLACK, null, null));
    }, // Returns the value of the node with the given key, or null.
    t2.prototype.get = function(t3) {
      for (var e = this.root; !e.isEmpty(); ) {
        var n2 = this.comparator(t3, e.key);
        if (0 === n2)
          return e.value;
        n2 < 0 ? e = e.left : n2 > 0 && (e = e.right);
      }
      return null;
    }, // Returns the index of the element in this sorted map, or -1 if it doesn't
    // exist.
    t2.prototype.indexOf = function(t3) {
      for (var e = 0, n2 = this.root; !n2.isEmpty(); ) {
        var r2 = this.comparator(t3, n2.key);
        if (0 === r2)
          return e + n2.left.size;
        r2 < 0 ? n2 = n2.left : (
          // Count all nodes left of the node plus the node itself
          (e += n2.left.size + 1, n2 = n2.right)
        );
      }
      return -1;
    }, t2.prototype.isEmpty = function() {
      return this.root.isEmpty();
    }, Object.defineProperty(t2.prototype, "size", {
      // Returns the total number of nodes in the map.
      get: function() {
        return this.root.size;
      },
      enumerable: false,
      configurable: true
    }), // Returns the minimum key in the map.
    t2.prototype.minKey = function() {
      return this.root.minKey();
    }, // Returns the maximum key in the map.
    t2.prototype.maxKey = function() {
      return this.root.maxKey();
    }, // Traverses the map in key order and calls the specified action function
    // for each key/value pair. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t2.prototype.inorderTraversal = function(t3) {
      return this.root.inorderTraversal(t3);
    }, t2.prototype.forEach = function(t3) {
      this.inorderTraversal(function(e, n2) {
        return t3(e, n2), false;
      });
    }, t2.prototype.toString = function() {
      var t3 = [];
      return this.inorderTraversal(function(e, n2) {
        return t3.push(e + ":" + n2), false;
      }), "{" + t3.join(", ") + "}";
    }, // Traverses the map in reverse key order and calls the specified action
    // function for each key/value pair. If action returns true, traversal is
    // aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t2.prototype.reverseTraversal = function(t3) {
      return this.root.reverseTraversal(t3);
    }, // Returns an iterator over the SortedMap.
    t2.prototype.getIterator = function() {
      return new Ge(this.root, null, this.comparator, false);
    }, t2.prototype.getIteratorFrom = function(t3) {
      return new Ge(this.root, t3, this.comparator, false);
    }, t2.prototype.getReverseIterator = function() {
      return new Ge(this.root, null, this.comparator, true);
    }, t2.prototype.getReverseIteratorFrom = function(t3) {
      return new Ge(this.root, t3, this.comparator, true);
    }, t2;
  }()
);
var Ge = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2) {
      this.isReverse = r2, this.nodeStack = [];
      for (var i = 1; !t3.isEmpty(); )
        if (i = e ? n2(t3.key, e) : 1, // flip the comparison if we're going in reverse
        r2 && (i *= -1), i < 0)
          t3 = this.isReverse ? t3.left : t3.right;
        else {
          if (0 === i) {
            this.nodeStack.push(t3);
            break;
          }
          this.nodeStack.push(t3), t3 = this.isReverse ? t3.right : t3.left;
        }
    }
    return t2.prototype.getNext = function() {
      var t3 = this.nodeStack.pop(), e = {
        key: t3.key,
        value: t3.value
      };
      if (this.isReverse)
        for (t3 = t3.left; !t3.isEmpty(); )
          this.nodeStack.push(t3), t3 = t3.right;
      else
        for (t3 = t3.right; !t3.isEmpty(); )
          this.nodeStack.push(t3), t3 = t3.left;
      return e;
    }, t2.prototype.hasNext = function() {
      return this.nodeStack.length > 0;
    }, t2.prototype.peek = function() {
      if (0 === this.nodeStack.length)
        return null;
      var t3 = this.nodeStack[this.nodeStack.length - 1];
      return {
        key: t3.key,
        value: t3.value
      };
    }, t2;
  }()
);
var Qe = (
  /** @class */
  function() {
    function t2(e, n2, r2, i, o) {
      this.key = e, this.value = n2, this.color = null != r2 ? r2 : t2.RED, this.left = null != i ? i : t2.EMPTY, this.right = null != o ? o : t2.EMPTY, this.size = this.left.size + 1 + this.right.size;
    }
    return t2.prototype.copy = function(e, n2, r2, i, o) {
      return new t2(null != e ? e : this.key, null != n2 ? n2 : this.value, null != r2 ? r2 : this.color, null != i ? i : this.left, null != o ? o : this.right);
    }, t2.prototype.isEmpty = function() {
      return false;
    }, // Traverses the tree in key order and calls the specified action function
    // for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t2.prototype.inorderTraversal = function(t3) {
      return this.left.inorderTraversal(t3) || t3(this.key, this.value) || this.right.inorderTraversal(t3);
    }, // Traverses the tree in reverse key order and calls the specified action
    // function for each node. If action returns true, traversal is aborted.
    // Returns the first truthy value returned by action, or the last falsey
    // value returned by action.
    t2.prototype.reverseTraversal = function(t3) {
      return this.right.reverseTraversal(t3) || t3(this.key, this.value) || this.left.reverseTraversal(t3);
    }, // Returns the minimum node in the tree.
    t2.prototype.min = function() {
      return this.left.isEmpty() ? this : this.left.min();
    }, // Returns the maximum key in the tree.
    t2.prototype.minKey = function() {
      return this.min().key;
    }, // Returns the maximum key in the tree.
    t2.prototype.maxKey = function() {
      return this.right.isEmpty() ? this.key : this.right.maxKey();
    }, // Returns new tree, with the key/value added.
    t2.prototype.insert = function(t3, e, n2) {
      var r2 = this, i = n2(t3, r2.key);
      return (r2 = i < 0 ? r2.copy(null, null, null, r2.left.insert(t3, e, n2), null) : 0 === i ? r2.copy(null, e, null, null, null) : r2.copy(null, null, null, null, r2.right.insert(t3, e, n2))).fixUp();
    }, t2.prototype.removeMin = function() {
      if (this.left.isEmpty())
        return t2.EMPTY;
      var e = this;
      return e.left.isRed() || e.left.left.isRed() || (e = e.moveRedLeft()), (e = e.copy(null, null, null, e.left.removeMin(), null)).fixUp();
    }, // Returns new tree, with the specified item removed.
    t2.prototype.remove = function(e, n2) {
      var r2, i = this;
      if (n2(e, i.key) < 0)
        i.left.isEmpty() || i.left.isRed() || i.left.left.isRed() || (i = i.moveRedLeft()), i = i.copy(null, null, null, i.left.remove(e, n2), null);
      else {
        if (i.left.isRed() && (i = i.rotateRight()), i.right.isEmpty() || i.right.isRed() || i.right.left.isRed() || (i = i.moveRedRight()), 0 === n2(e, i.key)) {
          if (i.right.isEmpty())
            return t2.EMPTY;
          r2 = i.right.min(), i = i.copy(r2.key, r2.value, null, null, i.right.removeMin());
        }
        i = i.copy(null, null, null, null, i.right.remove(e, n2));
      }
      return i.fixUp();
    }, t2.prototype.isRed = function() {
      return this.color;
    }, // Returns new tree after performing any needed rotations.
    t2.prototype.fixUp = function() {
      var t3 = this;
      return t3.right.isRed() && !t3.left.isRed() && (t3 = t3.rotateLeft()), t3.left.isRed() && t3.left.left.isRed() && (t3 = t3.rotateRight()), t3.left.isRed() && t3.right.isRed() && (t3 = t3.colorFlip()), t3;
    }, t2.prototype.moveRedLeft = function() {
      var t3 = this.colorFlip();
      return t3.right.left.isRed() && (t3 = (t3 = (t3 = t3.copy(null, null, null, null, t3.right.rotateRight())).rotateLeft()).colorFlip()), t3;
    }, t2.prototype.moveRedRight = function() {
      var t3 = this.colorFlip();
      return t3.left.left.isRed() && (t3 = (t3 = t3.rotateRight()).colorFlip()), t3;
    }, t2.prototype.rotateLeft = function() {
      var e = this.copy(null, null, t2.RED, null, this.right.left);
      return this.right.copy(null, null, this.color, e, null);
    }, t2.prototype.rotateRight = function() {
      var e = this.copy(null, null, t2.RED, this.left.right, null);
      return this.left.copy(null, null, this.color, null, e);
    }, t2.prototype.colorFlip = function() {
      var t3 = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);
      return this.copy(null, null, !this.color, t3, e);
    }, // For testing.
    t2.prototype.checkMaxDepth = function() {
      var t3 = this.check();
      return Math.pow(2, t3) <= this.size + 1;
    }, // In a balanced RB tree, the black-depth (number of black nodes) from root to
    // leaves is equal on both sides.  This function verifies that or asserts.
    t2.prototype.check = function() {
      if (this.isRed() && this.left.isRed())
        throw C();
      if (this.right.isRed())
        throw C();
      var t3 = this.left.check();
      if (t3 !== this.right.check())
        throw C();
      return t3 + (this.isRed() ? 0 : 1);
    }, t2;
  }()
);
Qe.EMPTY = null, Qe.RED = true, Qe.BLACK = false, // end LLRBEmptyNode
Qe.EMPTY = new /** @class */
(function() {
  function t2() {
    this.size = 0;
  }
  return Object.defineProperty(t2.prototype, "key", {
    get: function() {
      throw C();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t2.prototype, "value", {
    get: function() {
      throw C();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t2.prototype, "color", {
    get: function() {
      throw C();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t2.prototype, "left", {
    get: function() {
      throw C();
    },
    enumerable: false,
    configurable: true
  }), Object.defineProperty(t2.prototype, "right", {
    get: function() {
      throw C();
    },
    enumerable: false,
    configurable: true
  }), // Returns a copy of the current node.
  t2.prototype.copy = function(t3, e, n2, r2, i) {
    return this;
  }, // Returns a copy of the tree, with the specified key/value added.
  t2.prototype.insert = function(t3, e, n2) {
    return new Qe(t3, e);
  }, // Returns a copy of the tree, with the specified key removed.
  t2.prototype.remove = function(t3, e) {
    return this;
  }, t2.prototype.isEmpty = function() {
    return true;
  }, t2.prototype.inorderTraversal = function(t3) {
    return false;
  }, t2.prototype.reverseTraversal = function(t3) {
    return false;
  }, t2.prototype.minKey = function() {
    return null;
  }, t2.prototype.maxKey = function() {
    return null;
  }, t2.prototype.isRed = function() {
    return false;
  }, // For testing.
  t2.prototype.checkMaxDepth = function() {
    return true;
  }, t2.prototype.check = function() {
    return 0;
  }, t2;
}())();
var ze = (
  /** @class */
  function() {
    function t2(t3) {
      this.comparator = t3, this.data = new Ke(this.comparator);
    }
    return t2.prototype.has = function(t3) {
      return null !== this.data.get(t3);
    }, t2.prototype.first = function() {
      return this.data.minKey();
    }, t2.prototype.last = function() {
      return this.data.maxKey();
    }, Object.defineProperty(t2.prototype, "size", {
      get: function() {
        return this.data.size;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.indexOf = function(t3) {
      return this.data.indexOf(t3);
    }, /** Iterates elements in order defined by "comparator" */
    t2.prototype.forEach = function(t3) {
      this.data.inorderTraversal(function(e, n2) {
        return t3(e), false;
      });
    }, /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */
    t2.prototype.forEachInRange = function(t3, e) {
      for (var n2 = this.data.getIteratorFrom(t3[0]); n2.hasNext(); ) {
        var r2 = n2.getNext();
        if (this.comparator(r2.key, t3[1]) >= 0)
          return;
        e(r2.key);
      }
    }, /**
     * Iterates over `elem`s such that: start &lt;= elem until false is returned.
     */
    t2.prototype.forEachWhile = function(t3, e) {
      var n2;
      for (n2 = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n2.hasNext(); )
        if (!t3(n2.getNext().key))
          return;
    }, /** Finds the least element greater than or equal to `elem`. */
    t2.prototype.firstAfterOrEqual = function(t3) {
      var e = this.data.getIteratorFrom(t3);
      return e.hasNext() ? e.getNext().key : null;
    }, t2.prototype.getIterator = function() {
      return new We(this.data.getIterator());
    }, t2.prototype.getIteratorFrom = function(t3) {
      return new We(this.data.getIteratorFrom(t3));
    }, /** Inserts or updates an element */
    t2.prototype.add = function(t3) {
      return this.copy(this.data.remove(t3).insert(t3, true));
    }, /** Deletes an element */
    t2.prototype.delete = function(t3) {
      return this.has(t3) ? this.copy(this.data.remove(t3)) : this;
    }, t2.prototype.isEmpty = function() {
      return this.data.isEmpty();
    }, t2.prototype.unionWith = function(t3) {
      var e = this;
      return e.size < t3.size && (e = t3, t3 = this), t3.forEach(function(t4) {
        e = e.add(t4);
      }), e;
    }, t2.prototype.isEqual = function(e) {
      if (!(e instanceof t2))
        return false;
      if (this.size !== e.size)
        return false;
      for (var n2 = this.data.getIterator(), r2 = e.data.getIterator(); n2.hasNext(); ) {
        var i = n2.getNext().key, o = r2.getNext().key;
        if (0 !== this.comparator(i, o))
          return false;
      }
      return true;
    }, t2.prototype.toArray = function() {
      var t3 = [];
      return this.forEach(function(e) {
        t3.push(e);
      }), t3;
    }, t2.prototype.toString = function() {
      var t3 = [];
      return this.forEach(function(e) {
        return t3.push(e);
      }), "SortedSet(" + t3.toString() + ")";
    }, t2.prototype.copy = function(e) {
      var n2 = new t2(this.comparator);
      return n2.data = e, n2;
    }, t2;
  }()
);
var We = (
  /** @class */
  function() {
    function t2(t3) {
      this.iter = t3;
    }
    return t2.prototype.getNext = function() {
      return this.iter.getNext().key;
    }, t2.prototype.hasNext = function() {
      return this.iter.hasNext();
    }, t2;
  }()
);
var He = new Ke(st.comparator);
function Ye() {
  return He;
}
var Xe = new Ke(st.comparator);
function $e() {
  return Xe;
}
var Je = new Ke(st.comparator);
function Ze() {
  return Je;
}
var tn = new ze(st.comparator);
function en() {
  for (var t2 = [], e = 0; e < arguments.length; e++)
    t2[e] = arguments[e];
  for (var n2 = tn, r2 = 0, i = t2; r2 < i.length; r2++) {
    var o = i[r2];
    n2 = n2.add(o);
  }
  return n2;
}
var nn = new ze(M2);
function rn() {
  return nn;
}
var on = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i) {
      this.snapshotVersion = t3, this.targetChanges = e, this.targetMismatches = n2, this.documentUpdates = r2, this.resolvedLimboDocuments = i;
    }
    return t2.createSynthesizedRemoteEventForCurrentChange = function(e, n2) {
      var r2 = /* @__PURE__ */ new Map();
      return r2.set(e, sn.createSynthesizedTargetChangeForCurrentChange(e, n2)), new t2(U2.min(), r2, rn(), Ye(), en());
    }, t2;
  }()
);
var sn = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i) {
      this.resumeToken = t3, this.current = e, this.addedDocuments = n2, this.modifiedDocuments = r2, this.removedDocuments = i;
    }
    return t2.createSynthesizedTargetChangeForCurrentChange = function(e, n2) {
      return new t2(Y2.EMPTY_BYTE_STRING, n2, en(), en(), en());
    }, t2;
  }()
);
var un = function(t2, e, n2, r2) {
  this.v = t2, this.removedTargetIds = e, this.key = n2, this.P = r2;
};
var an = function(t2, e) {
  this.targetId = t2, this.V = e;
};
var cn = function(t2, e, n2, r2) {
  void 0 === n2 && (n2 = Y2.EMPTY_BYTE_STRING), void 0 === r2 && (r2 = null), this.state = t2, this.targetIds = e, this.resumeToken = n2, this.cause = r2;
};
var hn = (
  /** @class */
  function() {
    function t2() {
      this.S = 0, /**
           * Keeps track of the document changes since the last raised snapshot.
           *
           * These changes are continuously updated as we receive document updates and
           * always reflect the current set of changes against the last issued snapshot.
           */
      this.D = dn(), /** See public getters for explanations of these fields. */
      this.C = Y2.EMPTY_BYTE_STRING, this.N = false, /**
           * Whether this target state should be included in the next snapshot. We
           * initialize to true so that newly-added targets are included in the next
           * RemoteEvent.
           */
      this.F = true;
    }
    return Object.defineProperty(t2.prototype, "current", {
      /**
       * Whether this target has been marked 'current'.
       *
       * 'Current' has special meaning in the RPC protocol: It implies that the
       * Watch backend has sent us all changes up to the point at which the target
       * was added and that the target is consistent with the rest of the watch
       * stream.
       */
      get: function() {
        return this.N;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "resumeToken", {
      /** The last resume token sent to us for this target. */
      get: function() {
        return this.C;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "k", {
      /** Whether this target has pending target adds or target removes. */
      get: function() {
        return 0 !== this.S;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "O", {
      /** Whether we have modified any state that should trigger a snapshot. */
      get: function() {
        return this.F;
      },
      enumerable: false,
      configurable: true
    }), /**
     * Applies the resume token to the TargetChange, but only when it has a new
     * value. Empty resumeTokens are discarded.
     */
    t2.prototype.$ = function(t3) {
      t3.approximateByteSize() > 0 && (this.F = true, this.C = t3);
    }, /**
     * Creates a target change from the current set of changes.
     *
     * To reset the document changes after raising this snapshot, call
     * `clearPendingChanges()`.
     */
    t2.prototype.M = function() {
      var t3 = en(), e = en(), n2 = en();
      return this.D.forEach(function(r2, i) {
        switch (i) {
          case 0:
            t3 = t3.add(r2);
            break;
          case 2:
            e = e.add(r2);
            break;
          case 1:
            n2 = n2.add(r2);
            break;
          default:
            C();
        }
      }), new sn(this.C, this.N, t3, e, n2);
    }, /**
     * Resets the document changes and sets `hasPendingChanges` to false.
     */
    t2.prototype.L = function() {
      this.F = false, this.D = dn();
    }, t2.prototype.B = function(t3, e) {
      this.F = true, this.D = this.D.insert(t3, e);
    }, t2.prototype.q = function(t3) {
      this.F = true, this.D = this.D.remove(t3);
    }, t2.prototype.U = function() {
      this.S += 1;
    }, t2.prototype.K = function() {
      this.S -= 1;
    }, t2.prototype.j = function() {
      this.F = true, this.N = true;
    }, t2;
  }()
);
var fn = (
  /** @class */
  function() {
    function t2(t3) {
      this.W = t3, /** The internal state of all tracked targets. */
      this.G = /* @__PURE__ */ new Map(), /** Keeps track of the documents to update since the last raised snapshot. */
      this.H = Ye(), /** A mapping of document keys to their set of target IDs. */
      this.J = ln(), /**
           * A list of targets with existence filter mismatches. These targets are
           * known to be inconsistent and their listens needs to be re-established by
           * RemoteStore.
           */
      this.Y = new ze(M2);
    }
    return t2.prototype.X = function(t3) {
      for (var e = 0, n2 = t3.v; e < n2.length; e++) {
        var r2 = n2[e];
        t3.P && t3.P.isFoundDocument() ? this.Z(r2, t3.P) : this.tt(r2, t3.key, t3.P);
      }
      for (var i = 0, o = t3.removedTargetIds; i < o.length; i++) {
        r2 = o[i];
        this.tt(r2, t3.key, t3.P);
      }
    }, /** Processes and adds the WatchTargetChange to the current set of changes. */
    t2.prototype.et = function(t3) {
      var e = this;
      this.forEachTarget(t3, function(n2) {
        var r2 = e.nt(n2);
        switch (t3.state) {
          case 0:
            e.st(n2) && r2.$(t3.resumeToken);
            break;
          case 1:
            r2.K(), r2.k || // We have a freshly added target, so we need to reset any state
            // that we had previously. This can happen e.g. when remove and add
            // back a target for existence filter mismatches.
            r2.L(), r2.$(t3.resumeToken);
            break;
          case 2:
            r2.K(), r2.k || e.removeTarget(n2);
            break;
          case 3:
            e.st(n2) && (r2.j(), r2.$(t3.resumeToken));
            break;
          case 4:
            e.st(n2) && // Reset the target and synthesizes removes for all existing
            // documents. The backend will re-add any documents that still
            // match the target before it sends the next global snapshot.
            (e.it(n2), r2.$(t3.resumeToken));
            break;
          default:
            C();
        }
      });
    }, /**
     * Iterates over all targetIds that the watch change applies to: either the
     * targetIds explicitly listed in the change or the targetIds of all currently
     * active targets.
     */
    t2.prototype.forEachTarget = function(t3, e) {
      var n2 = this;
      t3.targetIds.length > 0 ? t3.targetIds.forEach(e) : this.G.forEach(function(t4, r2) {
        n2.st(r2) && e(r2);
      });
    }, /**
     * Handles existence filters and synthesizes deletes for filter mismatches.
     * Targets that are invalidated by filter mismatches are added to
     * `pendingTargetResets`.
     */
    t2.prototype.rt = function(t3) {
      var e = t3.targetId, n2 = t3.V.count, r2 = this.ot(e);
      if (r2) {
        var i = r2.target;
        if (Nt(i))
          if (0 === n2) {
            var o = new st(i.path);
            this.tt(e, o, _t.newNoDocument(o, U2.min()));
          } else
            R2(1 === n2);
        else
          this.ct(e) !== n2 && // Existence filter mismatch: We reset the mapping and raise a new
          // snapshot with `isFromCache:true`.
          (this.it(e), this.Y = this.Y.add(e));
      }
    }, /**
     * Converts the currently accumulated state into a remote event at the
     * provided snapshot version. Resets the accumulated changes before returning.
     */
    t2.prototype.ut = function(t3) {
      var e = this, n2 = /* @__PURE__ */ new Map();
      this.G.forEach(function(r3, i2) {
        var o = e.ot(i2);
        if (o) {
          if (r3.current && Nt(o.target)) {
            var s = new st(o.target.path);
            null !== e.H.get(s) || e.at(i2, s) || e.tt(i2, s, _t.newNoDocument(s, t3));
          }
          r3.O && (n2.set(i2, r3.M()), r3.L());
        }
      });
      var r2 = en();
      this.J.forEach(function(t4, n3) {
        var i2 = true;
        n3.forEachWhile(function(t5) {
          var n4 = e.ot(t5);
          return !n4 || 2 === n4.purpose || (i2 = false, false);
        }), i2 && (r2 = r2.add(t4));
      });
      var i = new on(t3, n2, this.Y, this.H, r2);
      return this.H = Ye(), this.J = ln(), this.Y = new ze(M2), i;
    }, /**
     * Adds the provided document to the internal list of document updates and
     * its document key to the given target's mapping.
     */
    // Visible for testing.
    t2.prototype.Z = function(t3, e) {
      if (this.st(t3)) {
        var n2 = this.at(t3, e.key) ? 2 : 0;
        this.nt(t3).B(e.key, n2), this.H = this.H.insert(e.key, e), this.J = this.J.insert(e.key, this.ht(e.key).add(t3));
      }
    }, /**
     * Removes the provided document from the target mapping. If the
     * document no longer matches the target, but the document's state is still
     * known (e.g. we know that the document was deleted or we received the change
     * that caused the filter mismatch), the new document can be provided
     * to update the remote document cache.
     */
    // Visible for testing.
    t2.prototype.tt = function(t3, e, n2) {
      if (this.st(t3)) {
        var r2 = this.nt(t3);
        this.at(t3, e) ? r2.B(
          e,
          1
          /* Removed */
        ) : (
          // The document may have entered and left the target before we raised a
          // snapshot, so we can just ignore the change.
          r2.q(e)
        ), this.J = this.J.insert(e, this.ht(e).delete(t3)), n2 && (this.H = this.H.insert(e, n2));
      }
    }, t2.prototype.removeTarget = function(t3) {
      this.G.delete(t3);
    }, /**
     * Returns the current count of documents in the target. This includes both
     * the number of documents that the LocalStore considers to be part of the
     * target as well as any accumulated changes.
     */
    t2.prototype.ct = function(t3) {
      var e = this.nt(t3).M();
      return this.W.getRemoteKeysForTarget(t3).size + e.addedDocuments.size - e.removedDocuments.size;
    }, /**
     * Increment the number of acks needed from watch before we can consider the
     * server to be 'in-sync' with the client's active targets.
     */
    t2.prototype.U = function(t3) {
      this.nt(t3).U();
    }, t2.prototype.nt = function(t3) {
      var e = this.G.get(t3);
      return e || (e = new hn(), this.G.set(t3, e)), e;
    }, t2.prototype.ht = function(t3) {
      var e = this.J.get(t3);
      return e || (e = new ze(M2), this.J = this.J.insert(t3, e)), e;
    }, /**
     * Verifies that the user is still interested in this target (by calling
     * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs
     * from watch.
     */
    t2.prototype.st = function(t3) {
      var e = null !== this.ot(t3);
      return e || N2("WatchChangeAggregator", "Detected inactive target", t3), e;
    }, /**
     * Returns the TargetData for an active target (i.e. a target that the user
     * is still interested in that has no outstanding target change requests).
     */
    t2.prototype.ot = function(t3) {
      var e = this.G.get(t3);
      return e && e.k ? null : this.W.lt(t3);
    }, /**
     * Resets the state of a Watch target to its initial state (e.g. sets
     * 'current' to false, clears the resume token and removes its target mapping
     * from all documents).
     */
    t2.prototype.it = function(t3) {
      var e = this;
      this.G.set(t3, new hn()), this.W.getRemoteKeysForTarget(t3).forEach(function(n2) {
        e.tt(
          t3,
          n2,
          /*updatedDocument=*/
          null
        );
      });
    }, /**
     * Returns whether the LocalStore considers the document to be part of the
     * specified target.
     */
    t2.prototype.at = function(t3, e) {
      return this.W.getRemoteKeysForTarget(t3).has(e);
    }, t2;
  }()
);
function ln() {
  return new Ke(st.comparator);
}
function dn() {
  return new Ke(st.comparator);
}
var pn = {
  asc: "ASCENDING",
  desc: "DESCENDING"
};
var yn = {
  "<": "LESS_THAN",
  "<=": "LESS_THAN_OR_EQUAL",
  ">": "GREATER_THAN",
  ">=": "GREATER_THAN_OR_EQUAL",
  "==": "EQUAL",
  "!=": "NOT_EQUAL",
  "array-contains": "ARRAY_CONTAINS",
  in: "IN",
  "not-in": "NOT_IN",
  "array-contains-any": "ARRAY_CONTAINS_ANY"
};
var vn = function(t2, e) {
  this.databaseId = t2, this.I = e;
};
function mn(t2, e) {
  return t2.I ? new Date(1e3 * e.seconds).toISOString().replace(/\.\d*/, "").replace("Z", "") + "." + ("000000000" + e.nanoseconds).slice(-9) + "Z" : {
    seconds: "" + e.seconds,
    nanos: e.nanoseconds
  };
}
function gn(t2, e) {
  return t2.I ? e.toBase64() : e.toUint8Array();
}
function wn(t2, e) {
  return mn(t2, e.toTimestamp());
}
function bn(t2) {
  return R2(!!t2), U2.fromTimestamp(function(t3) {
    var e = $(t3);
    return new q2(e.seconds, e.nanos);
  }(t2));
}
function In(t2, e) {
  return function(t3) {
    return new Q2(["projects", t3.projectId, "databases", t3.database]);
  }(t2).child("documents").child(e).canonicalString();
}
function _n(t2) {
  var e = Q2.fromString(t2);
  return R2(zn(e)), e;
}
function En(t2, e) {
  return In(t2.databaseId, e.path);
}
function Tn(t2, e) {
  var n2 = _n(e);
  if (n2.get(1) !== t2.databaseId.projectId)
    throw new T2(E2.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + n2.get(1) + " vs " + t2.databaseId.projectId);
  if (n2.get(3) !== t2.databaseId.database)
    throw new T2(E2.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + n2.get(3) + " vs " + t2.databaseId.database);
  return new st(An(n2));
}
function Sn(t2, e) {
  return In(t2.databaseId, e);
}
function Dn(t2) {
  var e = _n(t2);
  return 4 === e.length ? Q2.emptyPath() : An(e);
}
function Nn(t2) {
  return new Q2(["projects", t2.databaseId.projectId, "databases", t2.databaseId.database]).canonicalString();
}
function An(t2) {
  return R2(t2.length > 4 && "documents" === t2.get(4)), t2.popFirst(5);
}
function kn(t2, e, n2) {
  return {
    name: En(t2, e),
    fields: n2.toProto().mapValue.fields
  };
}
function xn(t2, e, n2) {
  var r2 = Tn(t2, e.name), i = bn(e.updateTime), o = new bt({
    mapValue: {
      fields: e.fields
    }
  }), s = _t.newFoundDocument(r2, i, o);
  return n2 && s.setHasCommittedMutations(), n2 ? s.setHasCommittedMutations() : s;
}
function Cn(t2, e) {
  var n2;
  if (e instanceof Ce)
    n2 = {
      update: kn(t2, e.key, e.value)
    };
  else if (e instanceof Ve)
    n2 = {
      delete: En(t2, e.key)
    };
  else if (e instanceof Re)
    n2 = {
      update: kn(t2, e.key, e.data),
      updateMask: Qn(e.fieldMask)
    };
  else {
    if (!(e instanceof qe))
      return C();
    n2 = {
      verify: En(t2, e.key)
    };
  }
  return e.fieldTransforms.length > 0 && (n2.updateTransforms = e.fieldTransforms.map(function(t3) {
    return function(t4, e2) {
      var n3 = e2.transform;
      if (n3 instanceof de)
        return {
          fieldPath: e2.field.canonicalString(),
          setToServerValue: "REQUEST_TIME"
        };
      if (n3 instanceof pe)
        return {
          fieldPath: e2.field.canonicalString(),
          appendMissingElements: {
            values: n3.elements
          }
        };
      if (n3 instanceof ve)
        return {
          fieldPath: e2.field.canonicalString(),
          removeAllFromArray: {
            values: n3.elements
          }
        };
      if (n3 instanceof ge)
        return {
          fieldPath: e2.field.canonicalString(),
          increment: n3.A
        };
      throw C();
    }(0, t3);
  })), e.precondition.isNone || (n2.currentDocument = function(t3, e2) {
    return void 0 !== e2.updateTime ? {
      updateTime: wn(t3, e2.updateTime)
    } : void 0 !== e2.exists ? {
      exists: e2.exists
    } : C();
  }(t2, e.precondition)), n2;
}
function Rn(t2, e) {
  var n2 = e.currentDocument ? function(t3) {
    return void 0 !== t3.updateTime ? Ee.updateTime(bn(t3.updateTime)) : void 0 !== t3.exists ? Ee.exists(t3.exists) : Ee.none();
  }(e.currentDocument) : Ee.none(), r2 = e.updateTransforms ? e.updateTransforms.map(function(e2) {
    return function(t3, e3) {
      var n3 = null;
      if ("setToServerValue" in e3)
        R2("REQUEST_TIME" === e3.setToServerValue), n3 = new de();
      else if ("appendMissingElements" in e3) {
        var r3 = e3.appendMissingElements.values || [];
        n3 = new pe(r3);
      } else if ("removeAllFromArray" in e3) {
        var i2 = e3.removeAllFromArray.values || [];
        n3 = new ve(i2);
      } else
        "increment" in e3 ? n3 = new ge(t3, e3.increment) : C();
      var o2 = W2.fromServerFormat(e3.fieldPath);
      return new Ie(o2, n3);
    }(t2, e2);
  }) : [];
  if (e.update) {
    e.update.name;
    var i = Tn(t2, e.update.name), o = new bt({
      mapValue: {
        fields: e.update.fields
      }
    });
    if (e.updateMask) {
      var s = function(t3) {
        var e2 = t3.fieldPaths || [];
        return new H2(e2.map(function(t4) {
          return W2.fromServerFormat(t4);
        }));
      }(e.updateMask);
      return new Re(i, o, s, n2, r2);
    }
    return new Ce(i, o, n2, r2);
  }
  if (e.delete) {
    var u = Tn(t2, e.delete);
    return new Ve(u, n2);
  }
  if (e.verify) {
    var a = Tn(t2, e.verify);
    return new qe(a, n2);
  }
  return C();
}
function On(t2, e) {
  return {
    documents: [Sn(t2, e.path)]
  };
}
function Ln(t2, e) {
  var n2 = {
    structuredQuery: {}
  }, r2 = e.path;
  null !== e.collectionGroup ? (n2.parent = Sn(t2, r2), n2.structuredQuery.from = [{
    collectionId: e.collectionGroup,
    allDescendants: true
  }]) : (n2.parent = Sn(t2, r2.popLast()), n2.structuredQuery.from = [{
    collectionId: r2.lastSegment()
  }]);
  var i = function(t3) {
    if (0 !== t3.length) {
      var e2 = t3.map(function(t4) {
        return function(t5) {
          if ("==" === t5.op) {
            if (gt(t5.value))
              return {
                unaryFilter: {
                  field: Bn(t5.field),
                  op: "IS_NAN"
                }
              };
            if (mt(t5.value))
              return {
                unaryFilter: {
                  field: Bn(t5.field),
                  op: "IS_NULL"
                }
              };
          } else if ("!=" === t5.op) {
            if (gt(t5.value))
              return {
                unaryFilter: {
                  field: Bn(t5.field),
                  op: "IS_NOT_NAN"
                }
              };
            if (mt(t5.value))
              return {
                unaryFilter: {
                  field: Bn(t5.field),
                  op: "IS_NOT_NULL"
                }
              };
          }
          return {
            fieldFilter: {
              field: Bn(t5.field),
              op: Un(t5.op),
              value: t5.value
            }
          };
        }(t4);
      });
      return 1 === e2.length ? e2[0] : {
        compositeFilter: {
          op: "AND",
          filters: e2
        }
      };
    }
  }(e.filters);
  i && (n2.structuredQuery.where = i);
  var o = function(t3) {
    if (0 !== t3.length)
      return t3.map(function(t4) {
        return function(t5) {
          return {
            field: Bn(t5.field),
            direction: qn(t5.dir)
          };
        }(t4);
      });
  }(e.orderBy);
  o && (n2.structuredQuery.orderBy = o);
  var s = function(t3, e2) {
    return t3.I || rt(e2) ? e2 : {
      value: e2
    };
  }(t2, e.limit);
  return null !== s && (n2.structuredQuery.limit = s), e.startAt && (n2.structuredQuery.startAt = Fn(e.startAt)), e.endAt && (n2.structuredQuery.endAt = Fn(e.endAt)), n2;
}
function Pn(t2) {
  var e = Dn(t2.parent), n2 = t2.structuredQuery, r2 = n2.from ? n2.from.length : 0, i = null;
  if (r2 > 0) {
    R2(1 === r2);
    var o = n2.from[0];
    o.allDescendants ? i = o.collectionId : e = e.child(o.collectionId);
  }
  var s = [];
  n2.where && (s = Mn(n2.where));
  var u = [];
  n2.orderBy && (u = n2.orderBy.map(function(t3) {
    return function(t4) {
      return new qt(
        jn(t4.field),
        // visible for testing
        function(t5) {
          switch (t5) {
            case "ASCENDING":
              return "asc";
            case "DESCENDING":
              return "desc";
            default:
              return;
          }
        }(t4.direction)
      );
    }(t3);
  }));
  var a = null;
  n2.limit && (a = function(t3) {
    var e2;
    return rt(e2 = "object" == typeof t3 ? t3.value : t3) ? null : e2;
  }(n2.limit));
  var c = null;
  n2.startAt && (c = Vn(n2.startAt));
  var h2 = null;
  return n2.endAt && (h2 = Vn(n2.endAt)), Gt(e, i, u, s, a, "F", c, h2);
}
function Mn(t2) {
  return t2 ? void 0 !== t2.unaryFilter ? [Gn(t2)] : void 0 !== t2.fieldFilter ? [Kn(t2)] : void 0 !== t2.compositeFilter ? t2.compositeFilter.filters.map(function(t3) {
    return Mn(t3);
  }).reduce(function(t3, e) {
    return t3.concat(e);
  }) : C() : [];
}
function Fn(t2) {
  return {
    before: t2.before,
    values: t2.position
  };
}
function Vn(t2) {
  var e = !!t2.before, n2 = t2.values || [];
  return new Ft(n2, e);
}
function qn(t2) {
  return pn[t2];
}
function Un(t2) {
  return yn[t2];
}
function Bn(t2) {
  return {
    fieldPath: t2.canonicalString()
  };
}
function jn(t2) {
  return W2.fromServerFormat(t2.fieldPath);
}
function Kn(t2) {
  return At.create(jn(t2.fieldFilter.field), function(t3) {
    switch (t3) {
      case "EQUAL":
        return "==";
      case "NOT_EQUAL":
        return "!=";
      case "GREATER_THAN":
        return ">";
      case "GREATER_THAN_OR_EQUAL":
        return ">=";
      case "LESS_THAN":
        return "<";
      case "LESS_THAN_OR_EQUAL":
        return "<=";
      case "ARRAY_CONTAINS":
        return "array-contains";
      case "IN":
        return "in";
      case "NOT_IN":
        return "not-in";
      case "ARRAY_CONTAINS_ANY":
        return "array-contains-any";
      case "OPERATOR_UNSPECIFIED":
      default:
        return C();
    }
  }(t2.fieldFilter.op), t2.fieldFilter.value);
}
function Gn(t2) {
  switch (t2.unaryFilter.op) {
    case "IS_NAN":
      var e = jn(t2.unaryFilter.field);
      return At.create(e, "==", {
        doubleValue: NaN
      });
    case "IS_NULL":
      var n2 = jn(t2.unaryFilter.field);
      return At.create(n2, "==", {
        nullValue: "NULL_VALUE"
      });
    case "IS_NOT_NAN":
      var r2 = jn(t2.unaryFilter.field);
      return At.create(r2, "!=", {
        doubleValue: NaN
      });
    case "IS_NOT_NULL":
      var i = jn(t2.unaryFilter.field);
      return At.create(i, "!=", {
        nullValue: "NULL_VALUE"
      });
    case "OPERATOR_UNSPECIFIED":
    default:
      return C();
  }
}
function Qn(t2) {
  var e = [];
  return t2.fields.forEach(function(t3) {
    return e.push(t3.canonicalString());
  }), {
    fieldPaths: e
  };
}
function zn(t2) {
  return t2.length >= 4 && "projects" === t2.get(0) && "databases" === t2.get(2);
}
function Wn(t2) {
  for (var e = "", n2 = 0; n2 < t2.length; n2++)
    e.length > 0 && (e = Yn(e)), e = Hn(t2.get(n2), e);
  return Yn(e);
}
function Hn(t2, e) {
  for (var n2 = e, r2 = t2.length, i = 0; i < r2; i++) {
    var o = t2.charAt(i);
    switch (o) {
      case "\0":
        n2 += "";
        break;
      case "":
        n2 += "";
        break;
      default:
        n2 += o;
    }
  }
  return n2;
}
function Yn(t2) {
  return t2 + "";
}
function Xn(t2) {
  var e = t2.length;
  if (R2(e >= 2), 2 === e)
    return R2("" === t2.charAt(0) && "" === t2.charAt(1)), Q2.emptyPath();
  for (var n2 = e - 2, r2 = [], i = "", o = 0; o < e; ) {
    var s = t2.indexOf("", o);
    switch ((s < 0 || s > n2) && C(), t2.charAt(s + 1)) {
      case "":
        var u = t2.substring(o, s), a = void 0;
        0 === i.length ? (
          // Avoid copying for the common case of a segment that excludes \0
          // and \001
          a = u
        ) : (a = i += u, i = ""), r2.push(a);
        break;
      case "":
        i += t2.substring(o, s), i += "\0";
        break;
      case "":
        i += t2.substring(o, s + 1);
        break;
      default:
        C();
    }
    o = s + 2;
  }
  return new Q2(r2);
}
var $n = function(t2, e) {
  this.seconds = t2, this.nanoseconds = e;
};
var Jn = function(t2, e, n2) {
  this.ownerId = t2, this.allowTabSynchronization = e, this.leaseTimestampMs = n2;
};
Jn.store = "owner", /**
     * The key string used for the single object that exists in the
     * DbPrimaryClient store.
     */
Jn.key = "owner";
var Zn = function(t2, e, n2) {
  this.userId = t2, this.lastAcknowledgedBatchId = e, this.lastStreamToken = n2;
};
Zn.store = "mutationQueues", /** Keys are automatically assigned via the userId property. */
Zn.keyPath = "userId";
var tr = function(t2, e, n2, r2, i) {
  this.userId = t2, this.batchId = e, this.localWriteTimeMs = n2, this.baseMutations = r2, this.mutations = i;
};
tr.store = "mutations", /** Keys are automatically assigned via the userId, batchId properties. */
tr.keyPath = "batchId", /** The index name for lookup of mutations by user. */
tr.userMutationsIndex = "userMutationsIndex", /** The user mutations index is keyed by [userId, batchId] pairs. */
tr.userMutationsKeyPath = ["userId", "batchId"];
var er = (
  /** @class */
  function() {
    function t2() {
    }
    return t2.prefixForUser = function(t3) {
      return [t3];
    }, /**
     * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
     * index to iterate over all at document mutations for a given path or lower.
     */
    t2.prefixForPath = function(t3, e) {
      return [t3, Wn(e)];
    }, /**
     * Creates a full index key of [userId, encodedPath, batchId] for inserting
     * and deleting into the DbDocumentMutations index.
     */
    t2.key = function(t3, e, n2) {
      return [t3, Wn(e), n2];
    }, t2;
  }()
);
er.store = "documentMutations", /**
     * Because we store all the useful information for this store in the key,
     * there is no useful information to store as the value. The raw (unencoded)
     * path cannot be stored because IndexedDb doesn't store prototype
     * information.
     */
er.PLACEHOLDER = new er();
var nr = function(t2, e) {
  this.path = t2, this.readTime = e;
};
var rr = function(t2, e) {
  this.path = t2, this.version = e;
};
var ir = (
  // TODO: We are currently storing full document keys almost three times
  // (once as part of the primary key, once - partly - as `parentPath` and once
  // inside the encoded documents). During our next migration, we should
  // rewrite the primary key as parentPath + document ID which would allow us
  // to drop one value.
  function(t2, e, n2, r2, i, o) {
    this.unknownDocument = t2, this.noDocument = e, this.document = n2, this.hasCommittedMutations = r2, this.readTime = i, this.parentPath = o;
  }
);
ir.store = "remoteDocuments", /**
     * An index that provides access to all entries sorted by read time (which
     * corresponds to the last modification time of each row).
     *
     * This index is used to provide a changelog for Multi-Tab.
     */
ir.readTimeIndex = "readTimeIndex", ir.readTimeIndexPath = "readTime", /**
     * An index that provides access to documents in a collection sorted by read
     * time.
     *
     * This index is used to allow the RemoteDocumentCache to fetch newly changed
     * documents in a collection.
     */
ir.collectionReadTimeIndex = "collectionReadTimeIndex", ir.collectionReadTimeIndexPath = ["parentPath", "readTime"];
var or = (
  /**
       * @param byteSize - Approximately the total size in bytes of all the
       * documents in the document cache.
       */
  function(t2) {
    this.byteSize = t2;
  }
);
or.store = "remoteDocumentGlobal", or.key = "remoteDocumentGlobalKey";
var sr = function(t2, e, n2, r2, i, o, s) {
  this.targetId = t2, this.canonicalId = e, this.readTime = n2, this.resumeToken = r2, this.lastListenSequenceNumber = i, this.lastLimboFreeSnapshotVersion = o, this.query = s;
};
sr.store = "targets", /** Keys are automatically assigned via the targetId property. */
sr.keyPath = "targetId", /** The name of the queryTargets index. */
sr.queryTargetsIndexName = "queryTargetsIndex", /**
     * The index of all canonicalIds to the targets that they match. This is not
     * a unique mapping because canonicalId does not promise a unique name for all
     * possible queries, so we append the targetId to make the mapping unique.
     */
sr.queryTargetsKeyPath = ["canonicalId", "targetId"];
var ur = function(t2, e, n2) {
  this.targetId = t2, this.path = e, this.sequenceNumber = n2;
};
ur.store = "targetDocuments", /** Keys are automatically assigned via the targetId, path properties. */
ur.keyPath = ["targetId", "path"], /** The index name for the reverse index. */
ur.documentTargetsIndex = "documentTargetsIndex", /** We also need to create the reverse index for these properties. */
ur.documentTargetsKeyPath = ["path", "targetId"];
var ar = function(t2, e, n2, r2) {
  this.highestTargetId = t2, this.highestListenSequenceNumber = e, this.lastRemoteSnapshotVersion = n2, this.targetCount = r2;
};
ar.key = "targetGlobalKey", ar.store = "targetGlobal";
var cr = function(t2, e) {
  this.collectionId = t2, this.parent = e;
};
cr.store = "collectionParents", /** Keys are automatically assigned via the collectionId, parent properties. */
cr.keyPath = ["collectionId", "parent"];
var hr = function(t2, e, n2, r2) {
  this.clientId = t2, this.updateTimeMs = e, this.networkEnabled = n2, this.inForeground = r2;
};
hr.store = "clientMetadata", /** Keys are automatically assigned via the clientId properties. */
hr.keyPath = "clientId";
var fr = function(t2, e, n2) {
  this.bundleId = t2, this.createTime = e, this.version = n2;
};
fr.store = "bundles", fr.keyPath = "bundleId";
var lr = function(t2, e, n2) {
  this.name = t2, this.readTime = e, this.bundledQuery = n2;
};
lr.store = "namedQueries", lr.keyPath = "name";
var dr = __spreadArray(__spreadArray([], __spreadArray(__spreadArray([], __spreadArray(__spreadArray([], __spreadArray(__spreadArray([], [Zn.store, tr.store, er.store, ir.store, sr.store, Jn.store, ar.store, ur.store]), [hr.store])), [or.store])), [cr.store])), [fr.store, lr.store]);
var pr = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
var yr = (
  /** @class */
  function() {
    function t2() {
      this.onCommittedListeners = [];
    }
    return t2.prototype.addOnCommittedListener = function(t3) {
      this.onCommittedListeners.push(t3);
    }, t2.prototype.raiseOnCommittedEvent = function() {
      this.onCommittedListeners.forEach(function(t3) {
        return t3();
      });
    }, t2;
  }()
);
var vr = function() {
  var t2 = this;
  this.promise = new Promise(function(e, n2) {
    t2.resolve = e, t2.reject = n2;
  });
};
var mr = (
  /** @class */
  function() {
    function t2(t3) {
      var e = this;
      this.nextCallback = null, this.catchCallback = null, // When the operation resolves, we'll set result or error and mark isDone.
      this.result = void 0, this.error = void 0, this.isDone = false, // Set to true when .then() or .catch() are called and prevents additional
      // chaining.
      this.callbackAttached = false, t3(function(t4) {
        e.isDone = true, e.result = t4, e.nextCallback && // value should be defined unless T is Void, but we can't express
        // that in the type system.
        e.nextCallback(t4);
      }, function(t4) {
        e.isDone = true, e.error = t4, e.catchCallback && e.catchCallback(t4);
      });
    }
    return t2.prototype.catch = function(t3) {
      return this.next(void 0, t3);
    }, t2.prototype.next = function(e, n2) {
      var r2 = this;
      return this.callbackAttached && C(), this.callbackAttached = true, this.isDone ? this.error ? this.wrapFailure(n2, this.error) : this.wrapSuccess(e, this.result) : new t2(function(t3, i) {
        r2.nextCallback = function(n3) {
          r2.wrapSuccess(e, n3).next(t3, i);
        }, r2.catchCallback = function(e2) {
          r2.wrapFailure(n2, e2).next(t3, i);
        };
      });
    }, t2.prototype.toPromise = function() {
      var t3 = this;
      return new Promise(function(e, n2) {
        t3.next(e, n2);
      });
    }, t2.prototype.wrapUserFunction = function(e) {
      try {
        var n2 = e();
        return n2 instanceof t2 ? n2 : t2.resolve(n2);
      } catch (e2) {
        return t2.reject(e2);
      }
    }, t2.prototype.wrapSuccess = function(e, n2) {
      return e ? this.wrapUserFunction(function() {
        return e(n2);
      }) : t2.resolve(n2);
    }, t2.prototype.wrapFailure = function(e, n2) {
      return e ? this.wrapUserFunction(function() {
        return e(n2);
      }) : t2.reject(n2);
    }, t2.resolve = function(e) {
      return new t2(function(t3, n2) {
        t3(e);
      });
    }, t2.reject = function(e) {
      return new t2(function(t3, n2) {
        n2(e);
      });
    }, t2.waitFor = function(e) {
      return new t2(function(t3, n2) {
        var r2 = 0, i = 0, o = false;
        e.forEach(function(e2) {
          ++r2, e2.next(function() {
            ++i, o && i === r2 && t3();
          }, function(t4) {
            return n2(t4);
          });
        }), o = true, i === r2 && t3();
      });
    }, /**
     * Given an array of predicate functions that asynchronously evaluate to a
     * boolean, implements a short-circuiting `or` between the results. Predicates
     * will be evaluated until one of them returns `true`, then stop. The final
     * result will be whether any of them returned `true`.
     */
    t2.or = function(e) {
      for (var n2 = t2.resolve(false), r2 = function(e2) {
        n2 = n2.next(function(n3) {
          return n3 ? t2.resolve(n3) : e2();
        });
      }, i = 0, o = e; i < o.length; i++) {
        r2(o[i]);
      }
      return n2;
    }, t2.forEach = function(t3, e) {
      var n2 = this, r2 = [];
      return t3.forEach(function(t4, i) {
        r2.push(e.call(n2, t4, i));
      }), this.waitFor(r2);
    }, t2;
  }()
);
var gr = (
  /** @class */
  function() {
    function t2(t3, e) {
      var n2 = this;
      this.action = t3, this.transaction = e, this.aborted = false, /**
           * A promise that resolves with the result of the IndexedDb transaction.
           */
      this.ft = new vr(), this.transaction.oncomplete = function() {
        n2.ft.resolve();
      }, this.transaction.onabort = function() {
        e.error ? n2.ft.reject(new Ir(t3, e.error)) : n2.ft.resolve();
      }, this.transaction.onerror = function(e2) {
        var r2 = Dr(e2.target.error);
        n2.ft.reject(new Ir(t3, r2));
      };
    }
    return t2.open = function(e, n2, r2, i) {
      try {
        return new t2(n2, e.transaction(i, r2));
      } catch (e2) {
        throw new Ir(n2, e2);
      }
    }, Object.defineProperty(t2.prototype, "dt", {
      get: function() {
        return this.ft.promise;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.abort = function(t3) {
      t3 && this.ft.reject(t3), this.aborted || (N2("SimpleDb", "Aborting transaction:", t3 ? t3.message : "Client-initiated abort"), this.aborted = true, this.transaction.abort());
    }, /**
     * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
     * operations performed on the SimpleDbStore happen within the context of this
     * transaction and it cannot be used anymore once the transaction is
     * completed.
     *
     * Note that we can't actually enforce that the KeyType and ValueType are
     * correct, but they allow type safety through the rest of the consuming code.
     */
    t2.prototype.store = function(t3) {
      var e = this.transaction.objectStore(t3);
      return new Er(e);
    }, t2;
  }()
);
var wr = (
  /** @class */
  function() {
    function e(n2, r2, i) {
      this.name = n2, this.version = r2, this.wt = i, // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
      // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
      // whatever reason it's much harder to hit after 12.2 so we only proactively
      // log on 12.2.
      12.2 === e._t(getUA()) && A2("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
    }
    return e.delete = function(t2) {
      return N2("SimpleDb", "Removing database:", t2), Tr(window.indexedDB.deleteDatabase(t2)).toPromise();
    }, /** Returns true if IndexedDB is available in the current environment. */
    e.yt = function() {
      if ("undefined" == typeof indexedDB)
        return false;
      if (e.gt())
        return true;
      var n2 = getUA(), r2 = e._t(n2), i = 0 < r2 && r2 < 10, o = e.Et(n2), s = 0 < o && o < 4.5;
      return !(n2.indexOf("MSIE ") > 0 || n2.indexOf("Trident/") > 0 || n2.indexOf("Edge/") > 0 || i || s);
    }, /**
     * Returns true if the backing IndexedDB store is the Node IndexedDBShim
     * (see https://github.com/axemclion/IndexedDBShim).
     */
    e.gt = function() {
      var t2;
      return "undefined" != typeof process && "YES" === (null === (t2 = process.env) || void 0 === t2 ? void 0 : t2.Tt);
    }, /** Helper to get a typed SimpleDbStore from a transaction. */
    e.It = function(t2, e2) {
      return t2.store(e2);
    }, // visible for testing
    /** Parse User Agent to determine iOS version. Returns -1 if not found. */
    e._t = function(t2) {
      var e2 = t2.match(/i(?:phone|pad|pod) os ([\d_]+)/i), n2 = e2 ? e2[1].split("_").slice(0, 2).join(".") : "-1";
      return Number(n2);
    }, // visible for testing
    /** Parse User Agent to determine Android version. Returns -1 if not found. */
    e.Et = function(t2) {
      var e2 = t2.match(/Android ([\d.]+)/i), n2 = e2 ? e2[1].split(".").slice(0, 2).join(".") : "-1";
      return Number(n2);
    }, /**
     * Opens the specified database, creating or upgrading it if necessary.
     */
    e.prototype.At = function(t2) {
      return __awaiter(this, void 0, void 0, function() {
        var e2, n2 = this;
        return __generator(this, function(r2) {
          switch (r2.label) {
            case 0:
              return this.db ? [3, 2] : (N2("SimpleDb", "Opening database:", this.name), e2 = this, [4, new Promise(function(e3, r3) {
                var i = indexedDB.open(n2.name, n2.version);
                i.onsuccess = function(t3) {
                  var n3 = t3.target.result;
                  e3(n3);
                }, i.onblocked = function() {
                  r3(new Ir(t2, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
                }, i.onerror = function(e4) {
                  var n3 = e4.target.error;
                  "VersionError" === n3.name ? r3(new T2(E2.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")) : r3(new Ir(t2, n3));
                }, i.onupgradeneeded = function(t3) {
                  N2("SimpleDb", 'Database "' + n2.name + '" requires upgrade from version:', t3.oldVersion);
                  var e4 = t3.target.result;
                  n2.wt.Rt(e4, i.transaction, t3.oldVersion, n2.version).next(function() {
                    N2("SimpleDb", "Database upgrade to version " + n2.version + " complete");
                  });
                };
              })]);
            case 1:
              e2.db = r2.sent(), r2.label = 2;
            case 2:
              return [2, (this.bt && (this.db.onversionchange = function(t3) {
                return n2.bt(t3);
              }), this.db)];
          }
        });
      });
    }, e.prototype.vt = function(t2) {
      this.bt = t2, this.db && (this.db.onversionchange = function(e2) {
        return t2(e2);
      });
    }, e.prototype.runTransaction = function(t2, e2, n2, r2) {
      return __awaiter(this, void 0, void 0, function() {
        var i, o, s, u, a;
        return __generator(this, function(c) {
          switch (c.label) {
            case 0:
              i = "readonly" === e2, o = 0, s = function() {
                var e3, s2, a2, c2, h2;
                return __generator(this, function(f) {
                  switch (f.label) {
                    case 0:
                      ++o, f.label = 1;
                    case 1:
                      return f.trys.push([1, 4, , 5]), [4, u.At(t2)];
                    case 2:
                      return u.db = f.sent(), e3 = gr.open(u.db, t2, i ? "readonly" : "readwrite", n2), s2 = r2(e3).catch(function(t3) {
                        return e3.abort(t3), mr.reject(t3);
                      }).toPromise(), a2 = {}, s2.catch(function() {
                      }), [4, e3.dt];
                    case 3:
                      return [2, (a2.value = // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
                      // fire), but still return the original transactionFnResult back to the
                      // caller.
                      (f.sent(), s2), a2)];
                    case 4:
                      return c2 = f.sent(), h2 = "FirebaseError" !== c2.name && o < 3, N2("SimpleDb", "Transaction failed with error:", c2.message, "Retrying:", h2), u.close(), h2 ? [3, 5] : [2, {
                        value: Promise.reject(c2)
                      }];
                    case 5:
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              }, u = this, c.label = 1;
            case 1:
              return [5, s()];
            case 2:
              if ("object" == typeof (a = c.sent()))
                return [2, a.value];
              c.label = 3;
            case 3:
              return [3, 1];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, e.prototype.close = function() {
      this.db && this.db.close(), this.db = void 0;
    }, e;
  }()
);
var br = (
  /** @class */
  function() {
    function t2(t3) {
      this.Pt = t3, this.Vt = false, this.St = null;
    }
    return Object.defineProperty(t2.prototype, "isDone", {
      get: function() {
        return this.Vt;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "Dt", {
      get: function() {
        return this.St;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "cursor", {
      set: function(t3) {
        this.Pt = t3;
      },
      enumerable: false,
      configurable: true
    }), /**
     * This function can be called to stop iteration at any point.
     */
    t2.prototype.done = function() {
      this.Vt = true;
    }, /**
     * This function can be called to skip to that next key, which could be
     * an index or a primary key.
     */
    t2.prototype.Ct = function(t3) {
      this.St = t3;
    }, /**
     * Delete the current cursor value from the object store.
     *
     * NOTE: You CANNOT do this with a keysOnly query.
     */
    t2.prototype.delete = function() {
      return Tr(this.Pt.delete());
    }, t2;
  }()
);
var Ir = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, E2.UNAVAILABLE, "IndexedDB transaction '" + e2 + "' failed: " + n2) || this).name = "IndexedDbTransactionError", r2;
    }
    return __extends(e, t2), e;
  }(T2)
);
function _r(t2) {
  return "IndexedDbTransactionError" === t2.name;
}
var Er = (
  /** @class */
  function() {
    function t2(t3) {
      this.store = t3;
    }
    return t2.prototype.put = function(t3, e) {
      var n2;
      return void 0 !== e ? (N2("SimpleDb", "PUT", this.store.name, t3, e), n2 = this.store.put(e, t3)) : (N2("SimpleDb", "PUT", this.store.name, "<auto-key>", t3), n2 = this.store.put(t3)), Tr(n2);
    }, /**
     * Adds a new value into an Object Store and returns the new key. Similar to
     * IndexedDb's `add()`, this method will fail on primary key collisions.
     *
     * @param value - The object to write.
     * @returns The key of the value to add.
     */
    t2.prototype.add = function(t3) {
      return N2("SimpleDb", "ADD", this.store.name, t3, t3), Tr(this.store.add(t3));
    }, /**
     * Gets the object with the specified key from the specified store, or null
     * if no object exists with the specified key.
     *
     * @key The key of the object to get.
     * @returns The object with the specified key or null if no object exists.
     */
    t2.prototype.get = function(t3) {
      var e = this;
      return Tr(this.store.get(t3)).next(function(n2) {
        return void 0 === n2 && (n2 = null), N2("SimpleDb", "GET", e.store.name, t3, n2), n2;
      });
    }, t2.prototype.delete = function(t3) {
      return N2("SimpleDb", "DELETE", this.store.name, t3), Tr(this.store.delete(t3));
    }, /**
     * If we ever need more of the count variants, we can add overloads. For now,
     * all we need is to count everything in a store.
     *
     * Returns the number of rows in the store.
     */
    t2.prototype.count = function() {
      return N2("SimpleDb", "COUNT", this.store.name), Tr(this.store.count());
    }, t2.prototype.Nt = function(t3, e) {
      var n2 = this.cursor(this.options(t3, e)), r2 = [];
      return this.xt(n2, function(t4, e2) {
        r2.push(e2);
      }).next(function() {
        return r2;
      });
    }, t2.prototype.Ft = function(t3, e) {
      N2("SimpleDb", "DELETE ALL", this.store.name);
      var n2 = this.options(t3, e);
      n2.kt = false;
      var r2 = this.cursor(n2);
      return this.xt(r2, function(t4, e2, n3) {
        return n3.delete();
      });
    }, t2.prototype.Ot = function(t3, e) {
      var n2;
      e ? n2 = t3 : (n2 = {}, e = t3);
      var r2 = this.cursor(n2);
      return this.xt(r2, e);
    }, /**
     * Iterates over a store, but waits for the given callback to complete for
     * each entry before iterating the next entry. This allows the callback to do
     * asynchronous work to determine if this iteration should continue.
     *
     * The provided callback should return `true` to continue iteration, and
     * `false` otherwise.
     */
    t2.prototype.$t = function(t3) {
      var e = this.cursor({});
      return new mr(function(n2, r2) {
        e.onerror = function(t4) {
          var e2 = Dr(t4.target.error);
          r2(e2);
        }, e.onsuccess = function(e2) {
          var r3 = e2.target.result;
          r3 ? t3(r3.primaryKey, r3.value).next(function(t4) {
            t4 ? r3.continue() : n2();
          }) : n2();
        };
      });
    }, t2.prototype.xt = function(t3, e) {
      var n2 = [];
      return new mr(function(r2, i) {
        t3.onerror = function(t4) {
          i(t4.target.error);
        }, t3.onsuccess = function(t4) {
          var i2 = t4.target.result;
          if (i2) {
            var o = new br(i2), s = e(i2.primaryKey, i2.value, o);
            if (s instanceof mr) {
              var u = s.catch(function(t5) {
                return o.done(), mr.reject(t5);
              });
              n2.push(u);
            }
            o.isDone ? r2() : null === o.Dt ? i2.continue() : i2.continue(o.Dt);
          } else
            r2();
        };
      }).next(function() {
        return mr.waitFor(n2);
      });
    }, t2.prototype.options = function(t3, e) {
      var n2;
      return void 0 !== t3 && ("string" == typeof t3 ? n2 = t3 : e = t3), {
        index: n2,
        range: e
      };
    }, t2.prototype.cursor = function(t3) {
      var e = "next";
      if (t3.reverse && (e = "prev"), t3.index) {
        var n2 = this.store.index(t3.index);
        return t3.kt ? n2.openKeyCursor(t3.range, e) : n2.openCursor(t3.range, e);
      }
      return this.store.openCursor(t3.range, e);
    }, t2;
  }()
);
function Tr(t2) {
  return new mr(function(e, n2) {
    t2.onsuccess = function(t3) {
      var n3 = t3.target.result;
      e(n3);
    }, t2.onerror = function(t3) {
      var e2 = Dr(t3.target.error);
      n2(e2);
    };
  });
}
var Sr = false;
function Dr(e) {
  var n2 = wr._t(getUA());
  if (n2 >= 12.2 && n2 < 13) {
    var r2 = "An internal error was encountered in the Indexed Database server";
    if (e.message.indexOf(r2) >= 0) {
      var i = new T2("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + r2 + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
      return Sr || (Sr = true, // Throw a global exception outside of this promise chain, for the user to
      // potentially catch.
      setTimeout(function() {
        throw i;
      }, 0)), i;
    }
  }
  return e;
}
var Nr = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).Mt = e2, r2.currentSequenceNumber = n2, r2;
    }
    return __extends(e, t2), e;
  }(yr)
);
function Ar(t2, e) {
  var n2 = O2(t2);
  return wr.It(n2.Mt, e);
}
var kr = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2) {
      this.batchId = t3, this.localWriteTime = e, this.baseMutations = n2, this.mutations = r2;
    }
    return t2.prototype.applyToRemoteDocument = function(t3, e) {
      for (var n2 = e.mutationResults, r2 = 0; r2 < this.mutations.length; r2++) {
        var i = this.mutations[r2];
        i.key.isEqual(t3.key) && De(i, t3, n2[r2]);
      }
    }, /**
     * Computes the local view of a document given all the mutations in this
     * batch.
     *
     * @param document - The document to apply mutations to.
     */
    t2.prototype.applyToLocalView = function(t3) {
      for (var e = 0, n2 = this.baseMutations; e < n2.length; e++) {
        (o = n2[e]).key.isEqual(t3.key) && Ne(o, t3, this.localWriteTime);
      }
      for (var r2 = 0, i = this.mutations; r2 < i.length; r2++) {
        var o;
        (o = i[r2]).key.isEqual(t3.key) && Ne(o, t3, this.localWriteTime);
      }
    }, /**
     * Computes the local view for all provided documents given the mutations in
     * this batch.
     */
    t2.prototype.applyToLocalDocumentSet = function(t3) {
      var e = this;
      this.mutations.forEach(function(n2) {
        var r2 = t3.get(n2.key), i = r2;
        e.applyToLocalView(i), r2.isValidDocument() || i.convertToNoDocument(U2.min());
      });
    }, t2.prototype.keys = function() {
      return this.mutations.reduce(function(t3, e) {
        return t3.add(e.key);
      }, en());
    }, t2.prototype.isEqual = function(t3) {
      return this.batchId === t3.batchId && F2(this.mutations, t3.mutations, function(t4, e) {
        return ke(t4, e);
      }) && F2(this.baseMutations, t3.baseMutations, function(t4, e) {
        return ke(t4, e);
      });
    }, t2;
  }()
);
var xr = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2) {
      this.batch = t3, this.commitVersion = e, this.mutationResults = n2, this.docVersions = r2;
    }
    return t2.from = function(e, n2, r2) {
      R2(e.mutations.length === r2.length);
      for (var i = Ze(), o = e.mutations, s = 0; s < o.length; s++)
        i = i.insert(o[s].key, r2[s].version);
      return new t2(e, n2, r2, i);
    }, t2;
  }()
);
var Cr = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i, o, s) {
      void 0 === i && (i = U2.min()), void 0 === o && (o = U2.min()), void 0 === s && (s = Y2.EMPTY_BYTE_STRING), this.target = t3, this.targetId = e, this.purpose = n2, this.sequenceNumber = r2, this.snapshotVersion = i, this.lastLimboFreeSnapshotVersion = o, this.resumeToken = s;
    }
    return t2.prototype.withSequenceNumber = function(e) {
      return new t2(this.target, this.targetId, this.purpose, e, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
    }, /**
     * Creates a new target data instance with an updated resume token and
     * snapshot version.
     */
    t2.prototype.withResumeToken = function(e, n2) {
      return new t2(this.target, this.targetId, this.purpose, this.sequenceNumber, n2, this.lastLimboFreeSnapshotVersion, e);
    }, /**
     * Creates a new target data instance with an updated last limbo free
     * snapshot version number.
     */
    t2.prototype.withLastLimboFreeSnapshotVersion = function(e) {
      return new t2(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, e, this.resumeToken);
    }, t2;
  }()
);
var Rr = function(t2) {
  this.Lt = t2;
};
function Or(t2, e) {
  if (e.document)
    return xn(t2.Lt, e.document, !!e.hasCommittedMutations);
  if (e.noDocument) {
    var n2 = st.fromSegments(e.noDocument.path), r2 = Vr(e.noDocument.readTime), i = _t.newNoDocument(n2, r2);
    return e.hasCommittedMutations ? i.setHasCommittedMutations() : i;
  }
  if (e.unknownDocument) {
    var o = st.fromSegments(e.unknownDocument.path);
    r2 = Vr(e.unknownDocument.version);
    return _t.newUnknownDocument(o, r2);
  }
  return C();
}
function Lr(t2, e, n2) {
  var r2 = Pr(n2), i = e.key.path.popLast().toArray();
  if (e.isFoundDocument()) {
    var o = function(t3, e2) {
      return {
        name: En(t3, e2.key),
        fields: e2.data.toProto().mapValue.fields,
        updateTime: mn(t3, e2.version.toTimestamp())
      };
    }(t2.Lt, e), s = e.hasCommittedMutations;
    return new ir(
      /* unknownDocument= */
      null,
      /* noDocument= */
      null,
      o,
      s,
      r2,
      i
    );
  }
  if (e.isNoDocument()) {
    var u = e.key.path.toArray(), a = Fr(e.version);
    s = e.hasCommittedMutations;
    return new ir(
      /* unknownDocument= */
      null,
      new nr(u, a),
      /* document= */
      null,
      s,
      r2,
      i
    );
  }
  if (e.isUnknownDocument()) {
    var c = e.key.path.toArray(), h2 = Fr(e.version);
    return new ir(
      new rr(c, h2),
      /* noDocument= */
      null,
      /* document= */
      null,
      /* hasCommittedMutations= */
      true,
      r2,
      i
    );
  }
  return C();
}
function Pr(t2) {
  var e = t2.toTimestamp();
  return [e.seconds, e.nanoseconds];
}
function Mr(t2) {
  var e = new q2(t2[0], t2[1]);
  return U2.fromTimestamp(e);
}
function Fr(t2) {
  var e = t2.toTimestamp();
  return new $n(e.seconds, e.nanoseconds);
}
function Vr(t2) {
  var e = new q2(t2.seconds, t2.nanoseconds);
  return U2.fromTimestamp(e);
}
function qr(t2, e) {
  for (var n2 = (e.baseMutations || []).map(function(e2) {
    return Rn(t2.Lt, e2);
  }), r2 = 0; r2 < e.mutations.length - 1; ++r2) {
    var i = e.mutations[r2];
    if (r2 + 1 < e.mutations.length && void 0 !== e.mutations[r2 + 1].transform) {
      var o = e.mutations[r2 + 1];
      i.updateTransforms = o.transform.fieldTransforms, e.mutations.splice(r2 + 1, 1), ++r2;
    }
  }
  var s = e.mutations.map(function(e2) {
    return Rn(t2.Lt, e2);
  }), u = q2.fromMillis(e.localWriteTimeMs);
  return new kr(e.batchId, u, n2, s);
}
function Ur(t2) {
  var e, n2, r2 = Vr(t2.readTime), i = void 0 !== t2.lastLimboFreeSnapshotVersion ? Vr(t2.lastLimboFreeSnapshotVersion) : U2.min();
  return void 0 !== t2.query.documents ? (R2(1 === (n2 = t2.query).documents.length), e = Jt(Qt(Dn(n2.documents[0])))) : e = function(t3) {
    return Jt(Pn(t3));
  }(t2.query), new Cr(e, t2.targetId, 0, t2.lastListenSequenceNumber, r2, i, Y2.fromBase64String(t2.resumeToken));
}
function Br(t2, e) {
  var n2, r2 = Fr(e.snapshotVersion), i = Fr(e.lastLimboFreeSnapshotVersion);
  n2 = Nt(e.target) ? On(t2.Lt, e.target) : Ln(t2.Lt, e.target);
  var o = e.resumeToken.toBase64();
  return new sr(e.targetId, St(e.target), r2, o, e.sequenceNumber, i, n2);
}
function jr(t2) {
  var e = Pn({
    parent: t2.parent,
    structuredQuery: t2.structuredQuery
  });
  return "LAST" === t2.limitType ? Zt(
    e,
    e.limit,
    "L"
    /* Last */
  ) : e;
}
var Kr = (
  /** @class */
  function() {
    function t2() {
    }
    return t2.prototype.getBundleMetadata = function(t3, e) {
      return Gr(t3).get(e).next(function(t4) {
        if (t4)
          return {
            id: (e2 = t4).bundleId,
            createTime: Vr(e2.createTime),
            version: e2.version
          };
        var e2;
      });
    }, t2.prototype.saveBundleMetadata = function(t3, e) {
      return Gr(t3).put({
        bundleId: (n2 = e).id,
        createTime: Fr(bn(n2.createTime)),
        version: n2.version
      });
      var n2;
    }, t2.prototype.getNamedQuery = function(t3, e) {
      return Qr(t3).get(e).next(function(t4) {
        if (t4)
          return {
            name: (e2 = t4).name,
            query: jr(e2.bundledQuery),
            readTime: Vr(e2.readTime)
          };
        var e2;
      });
    }, t2.prototype.saveNamedQuery = function(t3, e) {
      return Qr(t3).put(function(t4) {
        return {
          name: t4.name,
          readTime: Fr(bn(t4.readTime)),
          bundledQuery: t4.bundledQuery
        };
      }(e));
    }, t2;
  }()
);
function Gr(t2) {
  return Ar(t2, fr.store);
}
function Qr(t2) {
  return Ar(t2, lr.store);
}
var zr = (
  /** @class */
  function() {
    function t2() {
      this.Bt = new Wr();
    }
    return t2.prototype.addToCollectionParentIndex = function(t3, e) {
      return this.Bt.add(e), mr.resolve();
    }, t2.prototype.getCollectionParents = function(t3, e) {
      return mr.resolve(this.Bt.getEntries(e));
    }, t2;
  }()
);
var Wr = (
  /** @class */
  function() {
    function t2() {
      this.index = {};
    }
    return t2.prototype.add = function(t3) {
      var e = t3.lastSegment(), n2 = t3.popLast(), r2 = this.index[e] || new ze(Q2.comparator), i = !r2.has(n2);
      return this.index[e] = r2.add(n2), i;
    }, t2.prototype.has = function(t3) {
      var e = t3.lastSegment(), n2 = t3.popLast(), r2 = this.index[e];
      return r2 && r2.has(n2);
    }, t2.prototype.getEntries = function(t3) {
      return (this.index[t3] || new ze(Q2.comparator)).toArray();
    }, t2;
  }()
);
var Hr = (
  /** @class */
  function() {
    function t2() {
      this.qt = new Wr();
    }
    return t2.prototype.addToCollectionParentIndex = function(t3, e) {
      var n2 = this;
      if (!this.qt.has(e)) {
        var r2 = e.lastSegment(), i = e.popLast();
        t3.addOnCommittedListener(function() {
          n2.qt.add(e);
        });
        var o = {
          collectionId: r2,
          parent: Wn(i)
        };
        return Yr(t3).put(o);
      }
      return mr.resolve();
    }, t2.prototype.getCollectionParents = function(t3, e) {
      var n2 = [], r2 = IDBKeyRange.bound(
        [e, ""],
        [V2(e), ""],
        /*lowerOpen=*/
        false,
        /*upperOpen=*/
        true
      );
      return Yr(t3).Nt(r2).next(function(t4) {
        for (var r3 = 0, i = t4; r3 < i.length; r3++) {
          var o = i[r3];
          if (o.collectionId !== e)
            break;
          n2.push(Xn(o.parent));
        }
        return n2;
      });
    }, t2;
  }()
);
function Yr(t2) {
  return Ar(t2, cr.store);
}
var Xr = {
  didRun: false,
  sequenceNumbersCollected: 0,
  targetsRemoved: 0,
  documentsRemoved: 0
};
var $r = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this.cacheSizeCollectionThreshold = t3, this.percentileToCollect = e, this.maximumSequenceNumbersToCollect = n2;
    }
    return t2.withCacheSize = function(e) {
      return new t2(e, t2.DEFAULT_COLLECTION_PERCENTILE, t2.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
    }, t2;
  }()
);
function Jr(t2, e, n2) {
  var r2 = t2.store(tr.store), i = t2.store(er.store), o = [], s = IDBKeyRange.only(n2.batchId), u = 0, a = r2.Ot({
    range: s
  }, function(t3, e2, n3) {
    return u++, n3.delete();
  });
  o.push(a.next(function() {
    R2(1 === u);
  }));
  for (var c = [], h2 = 0, f = n2.mutations; h2 < f.length; h2++) {
    var l = f[h2], d = er.key(e, l.key.path, n2.batchId);
    o.push(i.delete(d)), c.push(l.key);
  }
  return mr.waitFor(o).next(function() {
    return c;
  });
}
function Zr(t2) {
  if (!t2)
    return 0;
  var e;
  if (t2.document)
    e = t2.document;
  else if (t2.unknownDocument)
    e = t2.unknownDocument;
  else {
    if (!t2.noDocument)
      throw C();
    e = t2.noDocument;
  }
  return JSON.stringify(e).length;
}
$r.DEFAULT_COLLECTION_PERCENTILE = 10, $r.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3, $r.DEFAULT = new $r(41943040, $r.DEFAULT_COLLECTION_PERCENTILE, $r.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT), $r.DISABLED = new $r(-1, 0, 0);
var ti = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2) {
      this.userId = t3, this.R = e, this.Ut = n2, this.referenceDelegate = r2, /**
           * Caches the document keys for pending mutation batches. If the mutation
           * has been removed from IndexedDb, the cached value may continue to
           * be used to retrieve the batch's document keys. To remove a cached value
           * locally, `removeCachedMutationKeys()` should be invoked either directly
           * or through `removeMutationBatches()`.
           *
           * With multi-tab, when the primary client acknowledges or rejects a mutation,
           * this cache is used by secondary clients to invalidate the local
           * view of the documents that were previously affected by the mutation.
           */
      // PORTING NOTE: Multi-tab only.
      this.Qt = {};
    }
    return t2.Kt = function(e, n2, r2, i) {
      return R2("" !== e.uid), new t2(e.isAuthenticated() ? e.uid : "", n2, r2, i);
    }, t2.prototype.checkEmpty = function(t3) {
      var e = true, n2 = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
      return ni(t3).Ot({
        index: tr.userMutationsIndex,
        range: n2
      }, function(t4, n3, r2) {
        e = false, r2.done();
      }).next(function() {
        return e;
      });
    }, t2.prototype.addMutationBatch = function(t3, e, n2, r2) {
      var i = this, o = ri(t3), s = ni(t3);
      return s.add({}).next(function(u) {
        R2("number" == typeof u);
        for (var a = new kr(u, e, n2, r2), c = function(t4, e2, n3) {
          var r3 = n3.baseMutations.map(function(e3) {
            return Cn(t4.Lt, e3);
          }), i2 = n3.mutations.map(function(e3) {
            return Cn(t4.Lt, e3);
          });
          return new tr(e2, n3.batchId, n3.localWriteTime.toMillis(), r3, i2);
        }(i.R, i.userId, a), h2 = [], f = new ze(function(t4, e2) {
          return M2(t4.canonicalString(), e2.canonicalString());
        }), l = 0, d = r2; l < d.length; l++) {
          var p2 = d[l], y2 = er.key(i.userId, p2.key.path, u);
          f = f.add(p2.key.path.popLast()), h2.push(s.put(c)), h2.push(o.put(y2, er.PLACEHOLDER));
        }
        return f.forEach(function(e2) {
          h2.push(i.Ut.addToCollectionParentIndex(t3, e2));
        }), t3.addOnCommittedListener(function() {
          i.Qt[u] = a.keys();
        }), mr.waitFor(h2).next(function() {
          return a;
        });
      });
    }, t2.prototype.lookupMutationBatch = function(t3, e) {
      var n2 = this;
      return ni(t3).get(e).next(function(t4) {
        return t4 ? (R2(t4.userId === n2.userId), qr(n2.R, t4)) : null;
      });
    }, /**
     * Returns the document keys for the mutation batch with the given batchId.
     * For primary clients, this method returns `null` after
     * `removeMutationBatches()` has been called. Secondary clients return a
     * cached result until `removeCachedMutationKeys()` is invoked.
     */
    // PORTING NOTE: Multi-tab only.
    t2.prototype.jt = function(t3, e) {
      var n2 = this;
      return this.Qt[e] ? mr.resolve(this.Qt[e]) : this.lookupMutationBatch(t3, e).next(function(t4) {
        if (t4) {
          var r2 = t4.keys();
          return n2.Qt[e] = r2, r2;
        }
        return null;
      });
    }, t2.prototype.getNextMutationBatchAfterBatchId = function(t3, e) {
      var n2 = this, r2 = e + 1, i = IDBKeyRange.lowerBound([this.userId, r2]), o = null;
      return ni(t3).Ot({
        index: tr.userMutationsIndex,
        range: i
      }, function(t4, e2, i2) {
        e2.userId === n2.userId && (R2(e2.batchId >= r2), o = qr(n2.R, e2)), i2.done();
      }).next(function() {
        return o;
      });
    }, t2.prototype.getHighestUnacknowledgedBatchId = function(t3) {
      var e = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]), n2 = -1;
      return ni(t3).Ot({
        index: tr.userMutationsIndex,
        range: e,
        reverse: true
      }, function(t4, e2, r2) {
        n2 = e2.batchId, r2.done();
      }).next(function() {
        return n2;
      });
    }, t2.prototype.getAllMutationBatches = function(t3) {
      var e = this, n2 = IDBKeyRange.bound([this.userId, -1], [this.userId, Number.POSITIVE_INFINITY]);
      return ni(t3).Nt(tr.userMutationsIndex, n2).next(function(t4) {
        return t4.map(function(t5) {
          return qr(e.R, t5);
        });
      });
    }, t2.prototype.getAllMutationBatchesAffectingDocumentKey = function(t3, e) {
      var n2 = this, r2 = er.prefixForPath(this.userId, e.path), i = IDBKeyRange.lowerBound(r2), o = [];
      return ri(t3).Ot({
        range: i
      }, function(r3, i2, s) {
        var u = r3[0], a = r3[1], c = r3[2], h2 = Xn(a);
        if (u === n2.userId && e.path.isEqual(h2))
          return ni(t3).get(c).next(function(t4) {
            if (!t4)
              throw C();
            R2(t4.userId === n2.userId), o.push(qr(n2.R, t4));
          });
        s.done();
      }).next(function() {
        return o;
      });
    }, t2.prototype.getAllMutationBatchesAffectingDocumentKeys = function(t3, e) {
      var n2 = this, r2 = new ze(M2), i = [];
      return e.forEach(function(e2) {
        var o = er.prefixForPath(n2.userId, e2.path), s = IDBKeyRange.lowerBound(o), u = ri(t3).Ot({
          range: s
        }, function(t4, i2, o2) {
          var s2 = t4[0], u2 = t4[1], a = t4[2], c = Xn(u2);
          s2 === n2.userId && e2.path.isEqual(c) ? r2 = r2.add(a) : o2.done();
        });
        i.push(u);
      }), mr.waitFor(i).next(function() {
        return n2.Wt(t3, r2);
      });
    }, t2.prototype.getAllMutationBatchesAffectingQuery = function(t3, e) {
      var n2 = this, r2 = e.path, i = r2.length + 1, o = er.prefixForPath(this.userId, r2), s = IDBKeyRange.lowerBound(o), u = new ze(M2);
      return ri(t3).Ot({
        range: s
      }, function(t4, e2, o2) {
        var s2 = t4[0], a = t4[1], c = t4[2], h2 = Xn(a);
        s2 === n2.userId && r2.isPrefixOf(h2) ? (
          // Rows with document keys more than one segment longer than the
          // query path can't be matches. For example, a query on 'rooms'
          // can't match the document /rooms/abc/messages/xyx.
          // TODO(mcg): we'll need a different scanner when we implement
          // ancestor queries.
          h2.length === i && (u = u.add(c))
        ) : o2.done();
      }).next(function() {
        return n2.Wt(t3, u);
      });
    }, t2.prototype.Wt = function(t3, e) {
      var n2 = this, r2 = [], i = [];
      return e.forEach(function(e2) {
        i.push(ni(t3).get(e2).next(function(t4) {
          if (null === t4)
            throw C();
          R2(t4.userId === n2.userId), r2.push(qr(n2.R, t4));
        }));
      }), mr.waitFor(i).next(function() {
        return r2;
      });
    }, t2.prototype.removeMutationBatch = function(t3, e) {
      var n2 = this;
      return Jr(t3.Mt, this.userId, e).next(function(r2) {
        return t3.addOnCommittedListener(function() {
          n2.Gt(e.batchId);
        }), mr.forEach(r2, function(e2) {
          return n2.referenceDelegate.markPotentiallyOrphaned(t3, e2);
        });
      });
    }, /**
     * Clears the cached keys for a mutation batch. This method should be
     * called by secondary clients after they process mutation updates.
     *
     * Note that this method does not have to be called from primary clients as
     * the corresponding cache entries are cleared when an acknowledged or
     * rejected batch is removed from the mutation queue.
     */
    // PORTING NOTE: Multi-tab only
    t2.prototype.Gt = function(t3) {
      delete this.Qt[t3];
    }, t2.prototype.performConsistencyCheck = function(t3) {
      var e = this;
      return this.checkEmpty(t3).next(function(n2) {
        if (!n2)
          return mr.resolve();
        var r2 = IDBKeyRange.lowerBound(er.prefixForUser(e.userId)), i = [];
        return ri(t3).Ot({
          range: r2
        }, function(t4, n3, r3) {
          if (t4[0] === e.userId) {
            var o = Xn(t4[1]);
            i.push(o);
          } else
            r3.done();
        }).next(function() {
          R2(0 === i.length);
        });
      });
    }, t2.prototype.containsKey = function(t3, e) {
      return ei(t3, this.userId, e);
    }, // PORTING NOTE: Multi-tab only (state is held in memory in other clients).
    /** Returns the mutation queue's metadata from IndexedDb. */
    t2.prototype.zt = function(t3) {
      var e = this;
      return ii(t3).get(this.userId).next(function(t4) {
        return t4 || new Zn(
          e.userId,
          -1,
          /*lastStreamToken=*/
          ""
        );
      });
    }, t2;
  }()
);
function ei(t2, e, n2) {
  var r2 = er.prefixForPath(e, n2.path), i = r2[1], o = IDBKeyRange.lowerBound(r2), s = false;
  return ri(t2).Ot({
    range: o,
    kt: true
  }, function(t3, n3, r3) {
    var o2 = t3[0], u = t3[1];
    t3[2];
    o2 === e && u === i && (s = true), r3.done();
  }).next(function() {
    return s;
  });
}
function ni(t2) {
  return Ar(t2, tr.store);
}
function ri(t2) {
  return Ar(t2, er.store);
}
function ii(t2) {
  return Ar(t2, Zn.store);
}
var oi = (
  /** @class */
  function() {
    function t2(t3) {
      this.Ht = t3;
    }
    return t2.prototype.next = function() {
      return this.Ht += 2, this.Ht;
    }, t2.Jt = function() {
      return new t2(0);
    }, t2.Yt = function() {
      return new t2(-1);
    }, t2;
  }()
);
var si = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.referenceDelegate = t3, this.R = e;
    }
    return t2.prototype.allocateTargetId = function(t3) {
      var e = this;
      return this.Xt(t3).next(function(n2) {
        var r2 = new oi(n2.highestTargetId);
        return n2.highestTargetId = r2.next(), e.Zt(t3, n2).next(function() {
          return n2.highestTargetId;
        });
      });
    }, t2.prototype.getLastRemoteSnapshotVersion = function(t3) {
      return this.Xt(t3).next(function(t4) {
        return U2.fromTimestamp(new q2(t4.lastRemoteSnapshotVersion.seconds, t4.lastRemoteSnapshotVersion.nanoseconds));
      });
    }, t2.prototype.getHighestSequenceNumber = function(t3) {
      return this.Xt(t3).next(function(t4) {
        return t4.highestListenSequenceNumber;
      });
    }, t2.prototype.setTargetsMetadata = function(t3, e, n2) {
      var r2 = this;
      return this.Xt(t3).next(function(i) {
        return i.highestListenSequenceNumber = e, n2 && (i.lastRemoteSnapshotVersion = n2.toTimestamp()), e > i.highestListenSequenceNumber && (i.highestListenSequenceNumber = e), r2.Zt(t3, i);
      });
    }, t2.prototype.addTargetData = function(t3, e) {
      var n2 = this;
      return this.te(t3, e).next(function() {
        return n2.Xt(t3).next(function(r2) {
          return r2.targetCount += 1, n2.ee(e, r2), n2.Zt(t3, r2);
        });
      });
    }, t2.prototype.updateTargetData = function(t3, e) {
      return this.te(t3, e);
    }, t2.prototype.removeTargetData = function(t3, e) {
      var n2 = this;
      return this.removeMatchingKeysForTargetId(t3, e.targetId).next(function() {
        return ui(t3).delete(e.targetId);
      }).next(function() {
        return n2.Xt(t3);
      }).next(function(e2) {
        return R2(e2.targetCount > 0), e2.targetCount -= 1, n2.Zt(t3, e2);
      });
    }, /**
     * Drops any targets with sequence number less than or equal to the upper bound, excepting those
     * present in `activeTargetIds`. Document associations for the removed targets are also removed.
     * Returns the number of targets removed.
     */
    t2.prototype.removeTargets = function(t3, e, n2) {
      var r2 = this, i = 0, o = [];
      return ui(t3).Ot(function(s, u) {
        var a = Ur(u);
        a.sequenceNumber <= e && null === n2.get(a.targetId) && (i++, o.push(r2.removeTargetData(t3, a)));
      }).next(function() {
        return mr.waitFor(o);
      }).next(function() {
        return i;
      });
    }, /**
     * Call provided function with each `TargetData` that we have cached.
     */
    t2.prototype.forEachTarget = function(t3, e) {
      return ui(t3).Ot(function(t4, n2) {
        var r2 = Ur(n2);
        e(r2);
      });
    }, t2.prototype.Xt = function(t3) {
      return ai(t3).get(ar.key).next(function(t4) {
        return R2(null !== t4), t4;
      });
    }, t2.prototype.Zt = function(t3, e) {
      return ai(t3).put(ar.key, e);
    }, t2.prototype.te = function(t3, e) {
      return ui(t3).put(Br(this.R, e));
    }, /**
     * In-place updates the provided metadata to account for values in the given
     * TargetData. Saving is done separately. Returns true if there were any
     * changes to the metadata.
     */
    t2.prototype.ee = function(t3, e) {
      var n2 = false;
      return t3.targetId > e.highestTargetId && (e.highestTargetId = t3.targetId, n2 = true), t3.sequenceNumber > e.highestListenSequenceNumber && (e.highestListenSequenceNumber = t3.sequenceNumber, n2 = true), n2;
    }, t2.prototype.getTargetCount = function(t3) {
      return this.Xt(t3).next(function(t4) {
        return t4.targetCount;
      });
    }, t2.prototype.getTargetData = function(t3, e) {
      var n2 = St(e), r2 = IDBKeyRange.bound([n2, Number.NEGATIVE_INFINITY], [n2, Number.POSITIVE_INFINITY]), i = null;
      return ui(t3).Ot({
        range: r2,
        index: sr.queryTargetsIndexName
      }, function(t4, n3, r3) {
        var o = Ur(n3);
        Dt(e, o.target) && (i = o, r3.done());
      }).next(function() {
        return i;
      });
    }, t2.prototype.addMatchingKeys = function(t3, e, n2) {
      var r2 = this, i = [], o = ci(t3);
      return e.forEach(function(e2) {
        var s = Wn(e2.path);
        i.push(o.put(new ur(n2, s))), i.push(r2.referenceDelegate.addReference(t3, n2, e2));
      }), mr.waitFor(i);
    }, t2.prototype.removeMatchingKeys = function(t3, e, n2) {
      var r2 = this, i = ci(t3);
      return mr.forEach(e, function(e2) {
        var o = Wn(e2.path);
        return mr.waitFor([i.delete([n2, o]), r2.referenceDelegate.removeReference(t3, n2, e2)]);
      });
    }, t2.prototype.removeMatchingKeysForTargetId = function(t3, e) {
      var n2 = ci(t3), r2 = IDBKeyRange.bound(
        [e],
        [e + 1],
        /*lowerOpen=*/
        false,
        /*upperOpen=*/
        true
      );
      return n2.delete(r2);
    }, t2.prototype.getMatchingKeysForTargetId = function(t3, e) {
      var n2 = IDBKeyRange.bound(
        [e],
        [e + 1],
        /*lowerOpen=*/
        false,
        /*upperOpen=*/
        true
      ), r2 = ci(t3), i = en();
      return r2.Ot({
        range: n2,
        kt: true
      }, function(t4, e2, n3) {
        var r3 = Xn(t4[1]), o = new st(r3);
        i = i.add(o);
      }).next(function() {
        return i;
      });
    }, t2.prototype.containsKey = function(t3, e) {
      var n2 = Wn(e.path), r2 = IDBKeyRange.bound(
        [n2],
        [V2(n2)],
        /*lowerOpen=*/
        false,
        /*upperOpen=*/
        true
      ), i = 0;
      return ci(t3).Ot({
        index: ur.documentTargetsIndex,
        kt: true,
        range: r2
      }, function(t4, e2, n3) {
        var r3 = t4[0];
        t4[1];
        0 !== r3 && (i++, n3.done());
      }).next(function() {
        return i > 0;
      });
    }, /**
     * Looks up a TargetData entry by target ID.
     *
     * @param targetId - The target ID of the TargetData entry to look up.
     * @returns The cached TargetData entry, or null if the cache has no entry for
     * the target.
     */
    // PORTING NOTE: Multi-tab only.
    t2.prototype.lt = function(t3, e) {
      return ui(t3).get(e).next(function(t4) {
        return t4 ? Ur(t4) : null;
      });
    }, t2;
  }()
);
function ui(t2) {
  return Ar(t2, sr.store);
}
function ai(t2) {
  return Ar(t2, ar.store);
}
function ci(t2) {
  return Ar(t2, ur.store);
}
function hi(t2) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(e) {
      if (t2.code !== E2.FAILED_PRECONDITION || t2.message !== pr)
        throw t2;
      return N2("LocalStore", "Unexpectedly lost primary lease"), [
        2
        /*return*/
      ];
    });
  });
}
function fi(t2, e) {
  var n2 = t2[0], r2 = t2[1], i = e[0], o = e[1], s = M2(n2, i);
  return 0 === s ? M2(r2, o) : s;
}
var li = (
  /** @class */
  function() {
    function t2(t3) {
      this.ne = t3, this.buffer = new ze(fi), this.se = 0;
    }
    return t2.prototype.ie = function() {
      return ++this.se;
    }, t2.prototype.re = function(t3) {
      var e = [t3, this.ie()];
      if (this.buffer.size < this.ne)
        this.buffer = this.buffer.add(e);
      else {
        var n2 = this.buffer.last();
        fi(e, n2) < 0 && (this.buffer = this.buffer.delete(n2).add(e));
      }
    }, Object.defineProperty(t2.prototype, "maxValue", {
      get: function() {
        return this.buffer.last()[0];
      },
      enumerable: false,
      configurable: true
    }), t2;
  }()
);
var di = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.garbageCollector = t3, this.asyncQueue = e, this.oe = false, this.ce = null;
    }
    return t2.prototype.start = function(t3) {
      -1 !== this.garbageCollector.params.cacheSizeCollectionThreshold && this.ue(t3);
    }, t2.prototype.stop = function() {
      this.ce && (this.ce.cancel(), this.ce = null);
    }, Object.defineProperty(t2.prototype, "started", {
      get: function() {
        return null !== this.ce;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.ue = function(t3) {
      var e = this, n2 = this.oe ? 3e5 : 6e4;
      N2("LruGarbageCollector", "Garbage collection scheduled in " + n2 + "ms"), this.ce = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection", n2, function() {
        return __awaiter(e, void 0, void 0, function() {
          var e2;
          return __generator(this, function(n3) {
            switch (n3.label) {
              case 0:
                this.ce = null, this.oe = true, n3.label = 1;
              case 1:
                return n3.trys.push([1, 3, , 7]), [4, t3.collectGarbage(this.garbageCollector)];
              case 2:
                return n3.sent(), [3, 7];
              case 3:
                return _r(e2 = n3.sent()) ? (N2("LruGarbageCollector", "Ignoring IndexedDB error during garbage collection: ", e2), [3, 6]) : [3, 4];
              case 4:
                return [4, hi(e2)];
              case 5:
                n3.sent(), n3.label = 6;
              case 6:
                return [3, 7];
              case 7:
                return [4, this.ue(t3)];
              case 8:
                return n3.sent(), [
                  2
                  /*return*/
                ];
            }
          });
        });
      });
    }, t2;
  }()
);
var pi = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.ae = t3, this.params = e;
    }
    return t2.prototype.calculateTargetCount = function(t3, e) {
      return this.ae.he(t3).next(function(t4) {
        return Math.floor(e / 100 * t4);
      });
    }, t2.prototype.nthSequenceNumber = function(t3, e) {
      var n2 = this;
      if (0 === e)
        return mr.resolve(_.o);
      var r2 = new li(e);
      return this.ae.forEachTarget(t3, function(t4) {
        return r2.re(t4.sequenceNumber);
      }).next(function() {
        return n2.ae.le(t3, function(t4) {
          return r2.re(t4);
        });
      }).next(function() {
        return r2.maxValue;
      });
    }, t2.prototype.removeTargets = function(t3, e, n2) {
      return this.ae.removeTargets(t3, e, n2);
    }, t2.prototype.removeOrphanedDocuments = function(t3, e) {
      return this.ae.removeOrphanedDocuments(t3, e);
    }, t2.prototype.collect = function(t3, e) {
      var n2 = this;
      return -1 === this.params.cacheSizeCollectionThreshold ? (N2("LruGarbageCollector", "Garbage collection skipped; disabled"), mr.resolve(Xr)) : this.getCacheSize(t3).next(function(r2) {
        return r2 < n2.params.cacheSizeCollectionThreshold ? (N2("LruGarbageCollector", "Garbage collection skipped; Cache size " + r2 + " is lower than threshold " + n2.params.cacheSizeCollectionThreshold), Xr) : n2.fe(t3, e);
      });
    }, t2.prototype.getCacheSize = function(t3) {
      return this.ae.getCacheSize(t3);
    }, t2.prototype.fe = function(t3, e) {
      var n2, r2, i, o, s, u, a, h2 = this, f = Date.now();
      return this.calculateTargetCount(t3, this.params.percentileToCollect).next(function(e2) {
        return e2 > h2.params.maximumSequenceNumbersToCollect ? (N2("LruGarbageCollector", "Capping sequence numbers to collect down to the maximum of " + h2.params.maximumSequenceNumbersToCollect + " from " + e2), r2 = h2.params.maximumSequenceNumbersToCollect) : r2 = e2, o = Date.now(), h2.nthSequenceNumber(t3, r2);
      }).next(function(r3) {
        return n2 = r3, s = Date.now(), h2.removeTargets(t3, n2, e);
      }).next(function(e2) {
        return i = e2, u = Date.now(), h2.removeOrphanedDocuments(t3, n2);
      }).next(function(t4) {
        return a = Date.now(), D2() <= LogLevel.DEBUG && N2("LruGarbageCollector", "LRU Garbage Collection\n	Counted targets in " + (o - f) + "ms\n	Determined least recently used " + r2 + " in " + (s - o) + "ms\n	Removed " + i + " targets in " + (u - s) + "ms\n	Removed " + t4 + " documents in " + (a - u) + "ms\nTotal Duration: " + (a - f) + "ms"), mr.resolve({
          didRun: true,
          sequenceNumbersCollected: r2,
          targetsRemoved: i,
          documentsRemoved: t4
        });
      });
    }, t2;
  }()
);
var yi = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.db = t3, this.garbageCollector = function(t4, e2) {
        return new pi(t4, e2);
      }(this, e);
    }
    return t2.prototype.he = function(t3) {
      var e = this.de(t3);
      return this.db.getTargetCache().getTargetCount(t3).next(function(t4) {
        return e.next(function(e2) {
          return t4 + e2;
        });
      });
    }, t2.prototype.de = function(t3) {
      var e = 0;
      return this.le(t3, function(t4) {
        e++;
      }).next(function() {
        return e;
      });
    }, t2.prototype.forEachTarget = function(t3, e) {
      return this.db.getTargetCache().forEachTarget(t3, e);
    }, t2.prototype.le = function(t3, e) {
      return this.we(t3, function(t4, n2) {
        return e(n2);
      });
    }, t2.prototype.addReference = function(t3, e, n2) {
      return vi(t3, n2);
    }, t2.prototype.removeReference = function(t3, e, n2) {
      return vi(t3, n2);
    }, t2.prototype.removeTargets = function(t3, e, n2) {
      return this.db.getTargetCache().removeTargets(t3, e, n2);
    }, t2.prototype.markPotentiallyOrphaned = function(t3, e) {
      return vi(t3, e);
    }, /**
     * Returns true if anything would prevent this document from being garbage
     * collected, given that the document in question is not present in any
     * targets and has a sequence number less than or equal to the upper bound for
     * the collection run.
     */
    t2.prototype._e = function(t3, e) {
      return function(t4, e2) {
        var n2 = false;
        return ii(t4).$t(function(r2) {
          return ei(t4, r2, e2).next(function(t5) {
            return t5 && (n2 = true), mr.resolve(!t5);
          });
        }).next(function() {
          return n2;
        });
      }(t3, e);
    }, t2.prototype.removeOrphanedDocuments = function(t3, e) {
      var n2 = this, r2 = this.db.getRemoteDocumentCache().newChangeBuffer(), i = [], o = 0;
      return this.we(t3, function(s, u) {
        if (u <= e) {
          var a = n2._e(t3, s).next(function(e2) {
            if (!e2)
              return o++, r2.getEntry(t3, s).next(function() {
                return r2.removeEntry(s), ci(t3).delete([0, Wn(s.path)]);
              });
          });
          i.push(a);
        }
      }).next(function() {
        return mr.waitFor(i);
      }).next(function() {
        return r2.apply(t3);
      }).next(function() {
        return o;
      });
    }, t2.prototype.removeTarget = function(t3, e) {
      var n2 = e.withSequenceNumber(t3.currentSequenceNumber);
      return this.db.getTargetCache().updateTargetData(t3, n2);
    }, t2.prototype.updateLimboDocument = function(t3, e) {
      return vi(t3, e);
    }, /**
     * Call provided function for each document in the cache that is 'orphaned'. Orphaned
     * means not a part of any target, so the only entry in the target-document index for
     * that document will be the sentinel row (targetId 0), which will also have the sequence
     * number for the last time the document was accessed.
     */
    t2.prototype.we = function(t3, e) {
      var n2, r2 = ci(t3), i = _.o;
      return r2.Ot({
        index: ur.documentTargetsIndex
      }, function(t4, r3) {
        var o = t4[0], s = (t4[1], r3.path), u = r3.sequenceNumber;
        0 === o ? (
          // if nextToReport is valid, report it, this is a new key so the
          // last one must not be a member of any targets.
          (i !== _.o && e(new st(Xn(n2)), i), // set nextToReport to be this sequence number. It's the next one we
          // might report, if we don't find any targets for this document.
          // Note that the sequence number must be defined when the targetId
          // is 0.
          i = u, n2 = s)
        ) : (
          // set nextToReport to be invalid, we know we don't need to report
          // this one since we found a target for it.
          i = _.o
        );
      }).next(function() {
        i !== _.o && e(new st(Xn(n2)), i);
      });
    }, t2.prototype.getCacheSize = function(t3) {
      return this.db.getRemoteDocumentCache().getSize(t3);
    }, t2;
  }()
);
function vi(t2, e) {
  return ci(t2).put(
    /**
    * @returns A value suitable for writing a sentinel row in the target-document
    * store.
    */
    function(t3, e2) {
      return new ur(0, Wn(t3.path), e2);
    }(e, t2.currentSequenceNumber)
  );
}
var mi = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.mapKeyFn = t3, this.equalsFn = e, /**
           * The inner map for a key/value pair. Due to the possibility of collisions we
           * keep a list of entries that we do a linear search through to find an actual
           * match. Note that collisions should be rare, so we still expect near
           * constant time lookups in practice.
           */
      this.inner = {};
    }
    return t2.prototype.get = function(t3) {
      var e = this.mapKeyFn(t3), n2 = this.inner[e];
      if (void 0 !== n2)
        for (var r2 = 0, i = n2; r2 < i.length; r2++) {
          var o = i[r2], s = o[0], u = o[1];
          if (this.equalsFn(s, t3))
            return u;
        }
    }, t2.prototype.has = function(t3) {
      return void 0 !== this.get(t3);
    }, /** Put this key and value in the map. */
    t2.prototype.set = function(t3, e) {
      var n2 = this.mapKeyFn(t3), r2 = this.inner[n2];
      if (void 0 !== r2) {
        for (var i = 0; i < r2.length; i++)
          if (this.equalsFn(r2[i][0], t3))
            return void (r2[i] = [t3, e]);
        r2.push([t3, e]);
      } else
        this.inner[n2] = [[t3, e]];
    }, /**
     * Remove this key from the map. Returns a boolean if anything was deleted.
     */
    t2.prototype.delete = function(t3) {
      var e = this.mapKeyFn(t3), n2 = this.inner[e];
      if (void 0 === n2)
        return false;
      for (var r2 = 0; r2 < n2.length; r2++)
        if (this.equalsFn(n2[r2][0], t3))
          return 1 === n2.length ? delete this.inner[e] : n2.splice(r2, 1), true;
      return false;
    }, t2.prototype.forEach = function(t3) {
      j(this.inner, function(e, n2) {
        for (var r2 = 0, i = n2; r2 < i.length; r2++) {
          var o = i[r2], s = o[0], u = o[1];
          t3(s, u);
        }
      });
    }, t2.prototype.isEmpty = function() {
      return K2(this.inner);
    }, t2;
  }()
);
var gi = (
  /** @class */
  function() {
    function t2() {
      this.changes = new mi(function(t3) {
        return t3.toString();
      }, function(t3, e) {
        return t3.isEqual(e);
      }), this.changesApplied = false;
    }
    return t2.prototype.getReadTime = function(t3) {
      var e = this.changes.get(t3);
      return e ? e.readTime : U2.min();
    }, /**
     * Buffers a `RemoteDocumentCache.addEntry()` call.
     *
     * You can only modify documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */
    t2.prototype.addEntry = function(t3, e) {
      this.assertNotApplied(), this.changes.set(t3.key, {
        document: t3,
        readTime: e
      });
    }, /**
     * Buffers a `RemoteDocumentCache.removeEntry()` call.
     *
     * You can only remove documents that have already been retrieved via
     * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).
     */
    t2.prototype.removeEntry = function(t3, e) {
      void 0 === e && (e = null), this.assertNotApplied(), this.changes.set(t3, {
        document: _t.newInvalidDocument(t3),
        readTime: e
      });
    }, /**
     * Looks up an entry in the cache. The buffered changes will first be checked,
     * and if no buffered change applies, this will forward to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document or an invalid document if we have nothing
     * cached.
     */
    t2.prototype.getEntry = function(t3, e) {
      this.assertNotApplied();
      var n2 = this.changes.get(e);
      return void 0 !== n2 ? mr.resolve(n2.document) : this.getFromCache(t3, e);
    }, /**
     * Looks up several entries in the cache, forwarding to
     * `RemoteDocumentCache.getEntry()`.
     *
     * @param transaction - The transaction in which to perform any persistence
     *     operations.
     * @param documentKeys - The keys of the entries to look up.
     * @returns A map of cached documents, indexed by key. If an entry cannot be
     *     found, the corresponding key will be mapped to an invalid document.
     */
    t2.prototype.getEntries = function(t3, e) {
      return this.getAllFromCache(t3, e);
    }, /**
     * Applies buffered changes to the underlying RemoteDocumentCache, using
     * the provided transaction.
     */
    t2.prototype.apply = function(t3) {
      return this.assertNotApplied(), this.changesApplied = true, this.applyChanges(t3);
    }, /** Helper to assert this.changes is not null  */
    t2.prototype.assertNotApplied = function() {
    }, t2;
  }()
);
var wi = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.R = t3, this.Ut = e;
    }
    return t2.prototype.addEntry = function(t3, e, n2) {
      return _i(t3).put(Ei(e), n2);
    }, /**
     * Removes a document from the cache.
     *
     * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()` to ensure proper accounting of metadata.
     */
    t2.prototype.removeEntry = function(t3, e) {
      var n2 = _i(t3), r2 = Ei(e);
      return n2.delete(r2);
    }, /**
     * Updates the current cache size.
     *
     * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the
     * cache's metadata.
     */
    t2.prototype.updateMetadata = function(t3, e) {
      var n2 = this;
      return this.getMetadata(t3).next(function(r2) {
        return r2.byteSize += e, n2.me(t3, r2);
      });
    }, t2.prototype.getEntry = function(t3, e) {
      var n2 = this;
      return _i(t3).get(Ei(e)).next(function(t4) {
        return n2.ye(e, t4);
      });
    }, /**
     * Looks up an entry in the cache.
     *
     * @param documentKey - The key of the entry to look up.
     * @returns The cached document entry and its size.
     */
    t2.prototype.ge = function(t3, e) {
      var n2 = this;
      return _i(t3).get(Ei(e)).next(function(t4) {
        return {
          document: n2.ye(e, t4),
          size: Zr(t4)
        };
      });
    }, t2.prototype.getEntries = function(t3, e) {
      var n2 = this, r2 = Ye();
      return this.pe(t3, e, function(t4, e2) {
        var i = n2.ye(t4, e2);
        r2 = r2.insert(t4, i);
      }).next(function() {
        return r2;
      });
    }, /**
     * Looks up several entries in the cache.
     *
     * @param documentKeys - The set of keys entries to look up.
     * @returns A map of documents indexed by key and a map of sizes indexed by
     *     key (zero if the document does not exist).
     */
    t2.prototype.Ee = function(t3, e) {
      var n2 = this, r2 = Ye(), i = new Ke(st.comparator);
      return this.pe(t3, e, function(t4, e2) {
        var o = n2.ye(t4, e2);
        r2 = r2.insert(t4, o), i = i.insert(t4, Zr(e2));
      }).next(function() {
        return {
          documents: r2,
          Te: i
        };
      });
    }, t2.prototype.pe = function(t3, e, n2) {
      if (e.isEmpty())
        return mr.resolve();
      var r2 = IDBKeyRange.bound(e.first().path.toArray(), e.last().path.toArray()), i = e.getIterator(), o = i.getNext();
      return _i(t3).Ot({
        range: r2
      }, function(t4, e2, r3) {
        for (var s = st.fromSegments(t4); o && st.comparator(o, s) < 0; )
          n2(o, null), o = i.getNext();
        o && o.isEqual(s) && // Key found in cache.
        (n2(o, e2), o = i.hasNext() ? i.getNext() : null), // Skip to the next key (if there is one).
        o ? r3.Ct(o.path.toArray()) : r3.done();
      }).next(function() {
        for (; o; )
          n2(o, null), o = i.hasNext() ? i.getNext() : null;
      });
    }, t2.prototype.getDocumentsMatchingQuery = function(t3, e, n2) {
      var r2 = this, i = Ye(), o = e.path.length + 1, s = {};
      if (n2.isEqual(U2.min())) {
        var u = e.path.toArray();
        s.range = IDBKeyRange.lowerBound(u);
      } else {
        var a = e.path.toArray(), c = Pr(n2);
        s.range = IDBKeyRange.lowerBound(
          [a, c],
          /* open= */
          true
        ), s.index = ir.collectionReadTimeIndex;
      }
      return _i(t3).Ot(s, function(t4, n3, s2) {
        if (t4.length === o) {
          var u2 = Or(r2.R, n3);
          e.path.isPrefixOf(u2.key.path) ? re(e, u2) && (i = i.insert(u2.key, u2)) : s2.done();
        }
      }).next(function() {
        return i;
      });
    }, t2.prototype.newChangeBuffer = function(t3) {
      return new bi(this, !!t3 && t3.trackRemovals);
    }, t2.prototype.getSize = function(t3) {
      return this.getMetadata(t3).next(function(t4) {
        return t4.byteSize;
      });
    }, t2.prototype.getMetadata = function(t3) {
      return Ii(t3).get(or.key).next(function(t4) {
        return R2(!!t4), t4;
      });
    }, t2.prototype.me = function(t3, e) {
      return Ii(t3).put(or.key, e);
    }, /**
     * Decodes `remoteDoc` and returns the document (or null, if the document
     * corresponds to the format used for sentinel deletes).
     */
    t2.prototype.ye = function(t3, e) {
      if (e) {
        var n2 = Or(this.R, e);
        if (!n2.isNoDocument() || !n2.version.isEqual(U2.min()))
          return n2;
      }
      return _t.newInvalidDocument(t3);
    }, t2;
  }()
);
var bi = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).Ie = e2, r2.trackRemovals = n2, // A map of document sizes prior to applying the changes in this buffer.
      r2.Ae = new mi(function(t3) {
        return t3.toString();
      }, function(t3, e3) {
        return t3.isEqual(e3);
      }), r2;
    }
    return __extends(e, t2), e.prototype.applyChanges = function(t3) {
      var e2 = this, n2 = [], r2 = 0, i = new ze(function(t4, e3) {
        return M2(t4.canonicalString(), e3.canonicalString());
      });
      return this.changes.forEach(function(o, s) {
        var u = e2.Ae.get(o);
        if (s.document.isValidDocument()) {
          var a = Lr(e2.Ie.R, s.document, e2.getReadTime(o));
          i = i.add(o.path.popLast());
          var c = Zr(a);
          r2 += c - u, n2.push(e2.Ie.addEntry(t3, o, a));
        } else if (r2 -= u, e2.trackRemovals) {
          var h2 = Lr(e2.Ie.R, _t.newNoDocument(o, U2.min()), e2.getReadTime(o));
          n2.push(e2.Ie.addEntry(t3, o, h2));
        } else
          n2.push(e2.Ie.removeEntry(t3, o));
      }), i.forEach(function(r3) {
        n2.push(e2.Ie.Ut.addToCollectionParentIndex(t3, r3));
      }), n2.push(this.Ie.updateMetadata(t3, r2)), mr.waitFor(n2);
    }, e.prototype.getFromCache = function(t3, e2) {
      var n2 = this;
      return this.Ie.ge(t3, e2).next(function(t4) {
        return n2.Ae.set(e2, t4.size), t4.document;
      });
    }, e.prototype.getAllFromCache = function(t3, e2) {
      var n2 = this;
      return this.Ie.Ee(t3, e2).next(function(t4) {
        var e3 = t4.documents;
        return t4.Te.forEach(function(t5, e4) {
          n2.Ae.set(t5, e4);
        }), e3;
      });
    }, e;
  }(gi)
);
function Ii(t2) {
  return Ar(t2, or.store);
}
function _i(t2) {
  return Ar(t2, ir.store);
}
function Ei(t2) {
  return t2.path.toArray();
}
var Ti = (
  /** @class */
  function() {
    function t2(t3) {
      this.R = t3;
    }
    return t2.prototype.Rt = function(t3, e, n2, r2) {
      var i = this;
      R2(n2 < r2 && n2 >= 0 && r2 <= 11);
      var o = new gr("createOrUpgrade", e);
      n2 < 1 && r2 >= 1 && (function(t4) {
        t4.createObjectStore(Jn.store);
      }(t3), function(t4) {
        t4.createObjectStore(Zn.store, {
          keyPath: Zn.keyPath
        }), t4.createObjectStore(tr.store, {
          keyPath: tr.keyPath,
          autoIncrement: true
        }).createIndex(tr.userMutationsIndex, tr.userMutationsKeyPath, {
          unique: true
        }), t4.createObjectStore(er.store);
      }(t3), Si(t3), function(t4) {
        t4.createObjectStore(ir.store);
      }(t3));
      var s = mr.resolve();
      return n2 < 3 && r2 >= 3 && // Brand new clients don't need to drop and recreate--only clients that
      // potentially have corrupt data.
      (0 !== n2 && (function(t4) {
        t4.deleteObjectStore(ur.store), t4.deleteObjectStore(sr.store), t4.deleteObjectStore(ar.store);
      }(t3), Si(t3)), s = s.next(function() {
        return function(t4) {
          var e2 = t4.store(ar.store), n3 = new ar(
            /*highestTargetId=*/
            0,
            /*lastListenSequenceNumber=*/
            0,
            U2.min().toTimestamp(),
            /*targetCount=*/
            0
          );
          return e2.put(ar.key, n3);
        }(o);
      })), n2 < 4 && r2 >= 4 && (0 !== n2 && // Schema version 3 uses auto-generated keys to generate globally unique
      // mutation batch IDs (this was previously ensured internally by the
      // client). To migrate to the new schema, we have to read all mutations
      // and write them back out. We preserve the existing batch IDs to guarantee
      // consistency with other object stores. Any further mutation batch IDs will
      // be auto-generated.
      (s = s.next(function() {
        return function(t4, e2) {
          return e2.store(tr.store).Nt().next(function(n3) {
            t4.deleteObjectStore(tr.store), t4.createObjectStore(tr.store, {
              keyPath: tr.keyPath,
              autoIncrement: true
            }).createIndex(tr.userMutationsIndex, tr.userMutationsKeyPath, {
              unique: true
            });
            var r3 = e2.store(tr.store), i2 = n3.map(function(t5) {
              return r3.put(t5);
            });
            return mr.waitFor(i2);
          });
        }(t3, o);
      })), s = s.next(function() {
        !function(t4) {
          t4.createObjectStore(hr.store, {
            keyPath: hr.keyPath
          });
        }(t3);
      })), n2 < 5 && r2 >= 5 && (s = s.next(function() {
        return i.Re(o);
      })), n2 < 6 && r2 >= 6 && (s = s.next(function() {
        return function(t4) {
          t4.createObjectStore(or.store);
        }(t3), i.be(o);
      })), n2 < 7 && r2 >= 7 && (s = s.next(function() {
        return i.ve(o);
      })), n2 < 8 && r2 >= 8 && (s = s.next(function() {
        return i.Pe(t3, o);
      })), n2 < 9 && r2 >= 9 && (s = s.next(function() {
        !function(t4) {
          t4.objectStoreNames.contains("remoteDocumentChanges") && t4.deleteObjectStore("remoteDocumentChanges");
        }(t3), function(t4) {
          var e2 = t4.objectStore(ir.store);
          e2.createIndex(ir.readTimeIndex, ir.readTimeIndexPath, {
            unique: false
          }), e2.createIndex(ir.collectionReadTimeIndex, ir.collectionReadTimeIndexPath, {
            unique: false
          });
        }(e);
      })), n2 < 10 && r2 >= 10 && (s = s.next(function() {
        return i.Ve(o);
      })), n2 < 11 && r2 >= 11 && (s = s.next(function() {
        !function(t4) {
          t4.createObjectStore(fr.store, {
            keyPath: fr.keyPath
          });
        }(t3), function(t4) {
          t4.createObjectStore(lr.store, {
            keyPath: lr.keyPath
          });
        }(t3);
      })), s;
    }, t2.prototype.be = function(t3) {
      var e = 0;
      return t3.store(ir.store).Ot(function(t4, n2) {
        e += Zr(n2);
      }).next(function() {
        var n2 = new or(e);
        return t3.store(or.store).put(or.key, n2);
      });
    }, t2.prototype.Re = function(t3) {
      var e = this, n2 = t3.store(Zn.store), r2 = t3.store(tr.store);
      return n2.Nt().next(function(n3) {
        return mr.forEach(n3, function(n4) {
          var i = IDBKeyRange.bound([n4.userId, -1], [n4.userId, n4.lastAcknowledgedBatchId]);
          return r2.Nt(tr.userMutationsIndex, i).next(function(r3) {
            return mr.forEach(r3, function(r4) {
              R2(r4.userId === n4.userId);
              var i2 = qr(e.R, r4);
              return Jr(t3, n4.userId, i2).next(function() {
              });
            });
          });
        });
      });
    }, /**
     * Ensures that every document in the remote document cache has a corresponding sentinel row
     * with a sequence number. Missing rows are given the most recently used sequence number.
     */
    t2.prototype.ve = function(t3) {
      var e = t3.store(ur.store), n2 = t3.store(ir.store);
      return t3.store(ar.store).get(ar.key).next(function(t4) {
        var r2 = [];
        return n2.Ot(function(n3, i) {
          var o = new Q2(n3), s = function(t5) {
            return [0, Wn(t5)];
          }(o);
          r2.push(e.get(s).next(function(n4) {
            return n4 ? mr.resolve() : function(n5) {
              return e.put(new ur(0, Wn(n5), t4.highestListenSequenceNumber));
            }(o);
          }));
        }).next(function() {
          return mr.waitFor(r2);
        });
      });
    }, t2.prototype.Pe = function(t3, e) {
      t3.createObjectStore(cr.store, {
        keyPath: cr.keyPath
      });
      var n2 = e.store(cr.store), r2 = new Wr(), i = function(t4) {
        if (r2.add(t4)) {
          var e2 = t4.lastSegment(), i2 = t4.popLast();
          return n2.put({
            collectionId: e2,
            parent: Wn(i2)
          });
        }
      };
      return e.store(ir.store).Ot({
        kt: true
      }, function(t4, e2) {
        var n3 = new Q2(t4);
        return i(n3.popLast());
      }).next(function() {
        return e.store(er.store).Ot({
          kt: true
        }, function(t4, e2) {
          t4[0];
          var n3 = t4[1], r3 = (t4[2], Xn(n3));
          return i(r3.popLast());
        });
      });
    }, t2.prototype.Ve = function(t3) {
      var e = this, n2 = t3.store(sr.store);
      return n2.Ot(function(t4, r2) {
        var i = Ur(r2), o = Br(e.R, i);
        return n2.put(o);
      });
    }, t2;
  }()
);
function Si(t2) {
  t2.createObjectStore(ur.store, {
    keyPath: ur.keyPath
  }).createIndex(ur.documentTargetsIndex, ur.documentTargetsKeyPath, {
    unique: true
  }), // NOTE: This is unique only because the TargetId is the suffix.
  t2.createObjectStore(sr.store, {
    keyPath: sr.keyPath
  }).createIndex(sr.queryTargetsIndexName, sr.queryTargetsKeyPath, {
    unique: true
  }), t2.createObjectStore(ar.store);
}
var Di = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
var Ni = (
  /** @class */
  function() {
    function t2(e, n2, r2, i, o, s, u, a, c, h2) {
      if (this.allowTabSynchronization = e, this.persistenceKey = n2, this.clientId = r2, this.Se = o, this.window = s, this.document = u, this.De = c, this.Ce = h2, this.Ne = null, this.xe = false, this.isPrimary = false, this.networkEnabled = true, /** Our window.unload handler, if registered. */
      this.Fe = null, this.inForeground = false, /** Our 'visibilitychange' listener if registered. */
      this.ke = null, /** The client metadata refresh task. */
      this.Oe = null, /** The last time we garbage collected the client metadata object store. */
      this.$e = Number.NEGATIVE_INFINITY, /** A listener to notify on primary state changes. */
      this.Me = function(t3) {
        return Promise.resolve();
      }, !t2.yt())
        throw new T2(E2.UNIMPLEMENTED, "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");
      this.referenceDelegate = new yi(this, i), this.Le = n2 + "main", this.R = new Rr(a), this.Be = new wr(this.Le, 11, new Ti(this.R)), this.qe = new si(this.referenceDelegate, this.R), this.Ut = new Hr(), this.Ue = function(t3, e2) {
        return new wi(t3, e2);
      }(this.R, this.Ut), this.Qe = new Kr(), this.window && this.window.localStorage ? this.Ke = this.window.localStorage : (this.Ke = null, false === h2 && A2("IndexedDbPersistence", "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."));
    }
    return t2.prototype.start = function() {
      var t3 = this;
      return this.je().then(function() {
        if (!t3.isPrimary && !t3.allowTabSynchronization)
          throw new T2(E2.FAILED_PRECONDITION, Di);
        return t3.We(), t3.Ge(), t3.ze(), t3.runTransaction("getHighestListenSequenceNumber", "readonly", function(e) {
          return t3.qe.getHighestSequenceNumber(e);
        });
      }).then(function(e) {
        t3.Ne = new _(e, t3.De);
      }).then(function() {
        t3.xe = true;
      }).catch(function(e) {
        return t3.Be && t3.Be.close(), Promise.reject(e);
      });
    }, /**
     * Registers a listener that gets called when the primary state of the
     * instance changes. Upon registering, this listener is invoked immediately
     * with the current primary state.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */
    t2.prototype.He = function(t3) {
      var e = this;
      return this.Me = function(n2) {
        return __awaiter(e, void 0, void 0, function() {
          return __generator(this, function(e2) {
            return this.started ? [2, t3(n2)] : [
              2
              /*return*/
            ];
          });
        });
      }, t3(this.isPrimary);
    }, /**
     * Registers a listener that gets called when the database receives a
     * version change event indicating that it has deleted.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */
    t2.prototype.setDatabaseDeletedListener = function(t3) {
      var e = this;
      this.Be.vt(function(n2) {
        return __awaiter(e, void 0, void 0, function() {
          return __generator(this, function(e2) {
            switch (e2.label) {
              case 0:
                return null === n2.newVersion ? [4, t3()] : [3, 2];
              case 1:
                e2.sent(), e2.label = 2;
              case 2:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      });
    }, /**
     * Adjusts the current network state in the client's metadata, potentially
     * affecting the primary lease.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */
    t2.prototype.setNetworkEnabled = function(t3) {
      var e = this;
      this.networkEnabled !== t3 && (this.networkEnabled = t3, // Schedule a primary lease refresh for immediate execution. The eventual
      // lease update will be propagated via `primaryStateListener`.
      this.Se.enqueueAndForget(function() {
        return __awaiter(e, void 0, void 0, function() {
          return __generator(this, function(t4) {
            switch (t4.label) {
              case 0:
                return this.started ? [4, this.je()] : [3, 2];
              case 1:
                t4.sent(), t4.label = 2;
              case 2:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }));
    }, /**
     * Updates the client metadata in IndexedDb and attempts to either obtain or
     * extend the primary lease for the local client. Asynchronously notifies the
     * primary state listener if the client either newly obtained or released its
     * primary lease.
     */
    t2.prototype.je = function() {
      var t3 = this;
      return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", function(e) {
        return ki(e).put(new hr(t3.clientId, Date.now(), t3.networkEnabled, t3.inForeground)).next(function() {
          if (t3.isPrimary)
            return t3.Je(e).next(function(e2) {
              e2 || (t3.isPrimary = false, t3.Se.enqueueRetryable(function() {
                return t3.Me(false);
              }));
            });
        }).next(function() {
          return t3.Ye(e);
        }).next(function(n2) {
          return t3.isPrimary && !n2 ? t3.Xe(e).next(function() {
            return false;
          }) : !!n2 && t3.Ze(e).next(function() {
            return true;
          });
        });
      }).catch(function(e) {
        if (_r(e))
          return N2("IndexedDbPersistence", "Failed to extend owner lease: ", e), t3.isPrimary;
        if (!t3.allowTabSynchronization)
          throw e;
        return N2("IndexedDbPersistence", "Releasing owner lease after error during lease refresh", e), /* isPrimary= */
        false;
      }).then(function(e) {
        t3.isPrimary !== e && t3.Se.enqueueRetryable(function() {
          return t3.Me(e);
        }), t3.isPrimary = e;
      });
    }, t2.prototype.Je = function(t3) {
      var e = this;
      return Ai(t3).get(Jn.key).next(function(t4) {
        return mr.resolve(e.tn(t4));
      });
    }, t2.prototype.en = function(t3) {
      return ki(t3).delete(this.clientId);
    }, /**
     * If the garbage collection threshold has passed, prunes the
     * RemoteDocumentChanges and the ClientMetadata store based on the last update
     * time of all clients.
     */
    t2.prototype.nn = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e, n2, r2, i = this;
        return __generator(this, function(o) {
          switch (o.label) {
            case 0:
              return !this.isPrimary || this.sn(this.$e, 18e5) ? [3, 2] : (this.$e = Date.now(), [4, this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", function(t4) {
                var e2 = Ar(t4, hr.store);
                return e2.Nt().next(function(t5) {
                  var n3 = i.rn(t5, 18e5), r3 = t5.filter(function(t6) {
                    return -1 === n3.indexOf(t6);
                  });
                  return mr.forEach(r3, function(t6) {
                    return e2.delete(t6.clientId);
                  }).next(function() {
                    return r3;
                  });
                });
              }).catch(function() {
                return [];
              })]);
            case 1:
              if (t3 = o.sent(), this.Ke)
                for (e = 0, n2 = t3; e < n2.length; e++)
                  r2 = n2[e], this.Ke.removeItem(this.on(r2.clientId));
              o.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, /**
     * Schedules a recurring timer to update the client metadata and to either
     * extend or acquire the primary lease if the client is eligible.
     */
    t2.prototype.ze = function() {
      var t3 = this;
      this.Oe = this.Se.enqueueAfterDelay("client_metadata_refresh", 4e3, function() {
        return t3.je().then(function() {
          return t3.nn();
        }).then(function() {
          return t3.ze();
        });
      });
    }, /** Checks whether `client` is the local client. */
    t2.prototype.tn = function(t3) {
      return !!t3 && t3.ownerId === this.clientId;
    }, /**
     * Evaluate the state of all active clients and determine whether the local
     * client is or can act as the holder of the primary lease. Returns whether
     * the client is eligible for the lease, but does not actually acquire it.
     * May return 'false' even if there is no active leaseholder and another
     * (foreground) client should become leaseholder instead.
     */
    t2.prototype.Ye = function(t3) {
      var e = this;
      return this.Ce ? mr.resolve(true) : Ai(t3).get(Jn.key).next(function(n2) {
        if (null !== n2 && e.sn(n2.leaseTimestampMs, 5e3) && !e.cn(n2.ownerId)) {
          if (e.tn(n2) && e.networkEnabled)
            return true;
          if (!e.tn(n2)) {
            if (!n2.allowTabSynchronization)
              throw new T2(E2.FAILED_PRECONDITION, Di);
            return false;
          }
        }
        return !(!e.networkEnabled || !e.inForeground) || ki(t3).Nt().next(function(t4) {
          return void 0 === e.rn(t4, 5e3).find(function(t5) {
            if (e.clientId !== t5.clientId) {
              var n3 = !e.networkEnabled && t5.networkEnabled, r2 = !e.inForeground && t5.inForeground, i = e.networkEnabled === t5.networkEnabled;
              if (n3 || r2 && i)
                return true;
            }
            return false;
          });
        });
      }).next(function(t4) {
        return e.isPrimary !== t4 && N2("IndexedDbPersistence", "Client " + (t4 ? "is" : "is not") + " eligible for a primary lease."), t4;
      });
    }, t2.prototype.shutdown = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3 = this;
        return __generator(this, function(e) {
          switch (e.label) {
            case 0:
              return this.xe = false, this.un(), this.Oe && (this.Oe.cancel(), this.Oe = null), this.an(), this.hn(), [4, this.Be.runTransaction("shutdown", "readwrite", [Jn.store, hr.store], function(e2) {
                var n2 = new Nr(e2, _.o);
                return t3.Xe(n2).next(function() {
                  return t3.en(n2);
                });
              })];
            case 1:
              return e.sent(), this.Be.close(), // Remove the entry marking the client as zombied from LocalStorage since
              // we successfully deleted its metadata from IndexedDb.
              this.ln(), [
                2
                /*return*/
              ];
          }
        });
      });
    }, /**
     * Returns clients that are not zombied and have an updateTime within the
     * provided threshold.
     */
    t2.prototype.rn = function(t3, e) {
      var n2 = this;
      return t3.filter(function(t4) {
        return n2.sn(t4.updateTimeMs, e) && !n2.cn(t4.clientId);
      });
    }, /**
     * Returns the IDs of the clients that are currently active. If multi-tab
     * is not supported, returns an array that only contains the local client's
     * ID.
     *
     * PORTING NOTE: This is only used for Web multi-tab.
     */
    t2.prototype.fn = function() {
      var t3 = this;
      return this.runTransaction("getActiveClients", "readonly", function(e) {
        return ki(e).Nt().next(function(e2) {
          return t3.rn(e2, 18e5).map(function(t4) {
            return t4.clientId;
          });
        });
      });
    }, Object.defineProperty(t2.prototype, "started", {
      get: function() {
        return this.xe;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.getMutationQueue = function(t3) {
      return ti.Kt(t3, this.R, this.Ut, this.referenceDelegate);
    }, t2.prototype.getTargetCache = function() {
      return this.qe;
    }, t2.prototype.getRemoteDocumentCache = function() {
      return this.Ue;
    }, t2.prototype.getIndexManager = function() {
      return this.Ut;
    }, t2.prototype.getBundleCache = function() {
      return this.Qe;
    }, t2.prototype.runTransaction = function(t3, e, n2) {
      var r2 = this;
      N2("IndexedDbPersistence", "Starting transaction:", t3);
      var i, o = "readonly" === e ? "readonly" : "readwrite";
      return this.Be.runTransaction(t3, o, dr, function(o2) {
        return i = new Nr(o2, r2.Ne ? r2.Ne.next() : _.o), "readwrite-primary" === e ? r2.Je(i).next(function(t4) {
          return !!t4 || r2.Ye(i);
        }).next(function(e2) {
          if (!e2)
            throw A2("Failed to obtain primary lease for action '" + t3 + "'."), r2.isPrimary = false, r2.Se.enqueueRetryable(function() {
              return r2.Me(false);
            }), new T2(E2.FAILED_PRECONDITION, pr);
          return n2(i);
        }).next(function(t4) {
          return r2.Ze(i).next(function() {
            return t4;
          });
        }) : r2.dn(i).next(function() {
          return n2(i);
        });
      }).then(function(t4) {
        return i.raiseOnCommittedEvent(), t4;
      });
    }, /**
     * Verifies that the current tab is the primary leaseholder or alternatively
     * that the leaseholder has opted into multi-tab synchronization.
     */
    // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
    // be turned off.
    t2.prototype.dn = function(t3) {
      var e = this;
      return Ai(t3).get(Jn.key).next(function(t4) {
        if (null !== t4 && e.sn(t4.leaseTimestampMs, 5e3) && !e.cn(t4.ownerId) && !e.tn(t4) && !(e.Ce || e.allowTabSynchronization && t4.allowTabSynchronization))
          throw new T2(E2.FAILED_PRECONDITION, Di);
      });
    }, /**
     * Obtains or extends the new primary lease for the local client. This
     * method does not verify that the client is eligible for this lease.
     */
    t2.prototype.Ze = function(t3) {
      var e = new Jn(this.clientId, this.allowTabSynchronization, Date.now());
      return Ai(t3).put(Jn.key, e);
    }, t2.yt = function() {
      return wr.yt();
    }, /** Checks the primary lease and removes it if we are the current primary. */
    t2.prototype.Xe = function(t3) {
      var e = this, n2 = Ai(t3);
      return n2.get(Jn.key).next(function(t4) {
        return e.tn(t4) ? (N2("IndexedDbPersistence", "Releasing primary lease."), n2.delete(Jn.key)) : mr.resolve();
      });
    }, /** Verifies that `updateTimeMs` is within `maxAgeMs`. */
    t2.prototype.sn = function(t3, e) {
      var n2 = Date.now();
      return !(t3 < n2 - e || t3 > n2 && (A2("Detected an update time that is in the future: " + t3 + " > " + n2), 1));
    }, t2.prototype.We = function() {
      var t3 = this;
      null !== this.document && "function" == typeof this.document.addEventListener && (this.ke = function() {
        t3.Se.enqueueAndForget(function() {
          return t3.inForeground = "visible" === t3.document.visibilityState, t3.je();
        });
      }, this.document.addEventListener("visibilitychange", this.ke), this.inForeground = "visible" === this.document.visibilityState);
    }, t2.prototype.an = function() {
      this.ke && (this.document.removeEventListener("visibilitychange", this.ke), this.ke = null);
    }, /**
     * Attaches a window.unload handler that will synchronously write our
     * clientId to a "zombie client id" location in LocalStorage. This can be used
     * by tabs trying to acquire the primary lease to determine that the lease
     * is no longer valid even if the timestamp is recent. This is particularly
     * important for the refresh case (so the tab correctly re-acquires the
     * primary lease). LocalStorage is used for this rather than IndexedDb because
     * it is a synchronous API and so can be used reliably from  an unload
     * handler.
     */
    t2.prototype.Ge = function() {
      var t3, e = this;
      "function" == typeof (null === (t3 = this.window) || void 0 === t3 ? void 0 : t3.addEventListener) && (this.Fe = function() {
        e.un(), e.Se.enqueueAndForget(function() {
          return e.shutdown();
        });
      }, this.window.addEventListener("unload", this.Fe));
    }, t2.prototype.hn = function() {
      this.Fe && (this.window.removeEventListener("unload", this.Fe), this.Fe = null);
    }, /**
     * Returns whether a client is "zombied" based on its LocalStorage entry.
     * Clients become zombied when their tab closes without running all of the
     * cleanup logic in `shutdown()`.
     */
    t2.prototype.cn = function(t3) {
      var e;
      try {
        var n2 = null !== (null === (e = this.Ke) || void 0 === e ? void 0 : e.getItem(this.on(t3)));
        return N2("IndexedDbPersistence", "Client '" + t3 + "' " + (n2 ? "is" : "is not") + " zombied in LocalStorage"), n2;
      } catch (t4) {
        return A2("IndexedDbPersistence", "Failed to get zombied client id.", t4), false;
      }
    }, /**
     * Record client as zombied (a client that had its tab closed). Zombied
     * clients are ignored during primary tab selection.
     */
    t2.prototype.un = function() {
      if (this.Ke)
        try {
          this.Ke.setItem(this.on(this.clientId), String(Date.now()));
        } catch (t3) {
          A2("Failed to set zombie client id.", t3);
        }
    }, /** Removes the zombied client entry if it exists. */
    t2.prototype.ln = function() {
      if (this.Ke)
        try {
          this.Ke.removeItem(this.on(this.clientId));
        } catch (t3) {
        }
    }, t2.prototype.on = function(t3) {
      return "firestore_zombie_" + this.persistenceKey + "_" + t3;
    }, t2;
  }()
);
function Ai(t2) {
  return Ar(t2, Jn.store);
}
function ki(t2) {
  return Ar(t2, hr.store);
}
function xi(t2, e) {
  var n2 = t2.projectId;
  return t2.isDefaultDatabase || (n2 += "." + t2.database), "firestore/" + e + "/" + n2 + "/";
}
var Ci = function(t2, e) {
  this.progress = t2, this.wn = e;
};
var Ri = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this.Ue = t3, this._n = e, this.Ut = n2;
    }
    return t2.prototype.mn = function(t3, e) {
      var n2 = this;
      return this._n.getAllMutationBatchesAffectingDocumentKey(t3, e).next(function(r2) {
        return n2.yn(t3, e, r2);
      });
    }, /** Internal version of `getDocument` that allows reusing batches. */
    t2.prototype.yn = function(t3, e, n2) {
      return this.Ue.getEntry(t3, e).next(function(t4) {
        for (var e2 = 0, r2 = n2; e2 < r2.length; e2++) {
          r2[e2].applyToLocalView(t4);
        }
        return t4;
      });
    }, // Returns the view of the given `docs` as they would appear after applying
    // all mutations in the given `batches`.
    t2.prototype.gn = function(t3, e) {
      t3.forEach(function(t4, n2) {
        for (var r2 = 0, i = e; r2 < i.length; r2++) {
          i[r2].applyToLocalView(n2);
        }
      });
    }, /**
     * Gets the local view of the documents identified by `keys`.
     *
     * If we don't have cached state for a document in `keys`, a NoDocument will
     * be stored for that key in the resulting set.
     */
    t2.prototype.pn = function(t3, e) {
      var n2 = this;
      return this.Ue.getEntries(t3, e).next(function(e2) {
        return n2.En(t3, e2).next(function() {
          return e2;
        });
      });
    }, /**
     * Applies the local view the given `baseDocs` without retrieving documents
     * from the local store.
     */
    t2.prototype.En = function(t3, e) {
      var n2 = this;
      return this._n.getAllMutationBatchesAffectingDocumentKeys(t3, e).next(function(t4) {
        return n2.gn(e, t4);
      });
    }, /**
     * Performs a query against the local view of all documents.
     *
     * @param transaction - The persistence transaction.
     * @param query - The query to match documents against.
     * @param sinceReadTime - If not set to SnapshotVersion.min(), return only
     *     documents that have been read since this snapshot version (exclusive).
     */
    t2.prototype.getDocumentsMatchingQuery = function(t3, e, n2) {
      return function(t4) {
        return st.isDocumentKey(t4.path) && null === t4.collectionGroup && 0 === t4.filters.length;
      }(e) ? this.Tn(t3, e.path) : Xt(e) ? this.In(t3, e, n2) : this.An(t3, e, n2);
    }, t2.prototype.Tn = function(t3, e) {
      return this.mn(t3, new st(e)).next(function(t4) {
        var e2 = $e();
        return t4.isFoundDocument() && (e2 = e2.insert(t4.key, t4)), e2;
      });
    }, t2.prototype.In = function(t3, e, n2) {
      var r2 = this, i = e.collectionGroup, o = $e();
      return this.Ut.getCollectionParents(t3, i).next(function(s) {
        return mr.forEach(s, function(s2) {
          var u = function(t4, e2) {
            return new Kt(
              e2,
              /*collectionGroup=*/
              null,
              t4.explicitOrderBy.slice(),
              t4.filters.slice(),
              t4.limit,
              t4.limitType,
              t4.startAt,
              t4.endAt
            );
          }(e, s2.child(i));
          return r2.An(t3, u, n2).next(function(t4) {
            t4.forEach(function(t5, e2) {
              o = o.insert(t5, e2);
            });
          });
        }).next(function() {
          return o;
        });
      });
    }, t2.prototype.An = function(t3, e, n2) {
      var r2, i, o = this;
      return this.Ue.getDocumentsMatchingQuery(t3, e, n2).next(function(n3) {
        return r2 = n3, o._n.getAllMutationBatchesAffectingQuery(t3, e);
      }).next(function(e2) {
        return i = e2, o.Rn(t3, i, r2).next(function(t4) {
          r2 = t4;
          for (var e3 = 0, n3 = i; e3 < n3.length; e3++)
            for (var o2 = n3[e3], s = 0, u = o2.mutations; s < u.length; s++) {
              var a = u[s], c = a.key, h2 = r2.get(c);
              null == h2 && // Create invalid document to apply mutations on top of
              (h2 = _t.newInvalidDocument(c), r2 = r2.insert(c, h2)), Ne(a, h2, o2.localWriteTime), h2.isFoundDocument() || (r2 = r2.remove(c));
            }
        });
      }).next(function() {
        return r2.forEach(function(t4, n3) {
          re(e, n3) || (r2 = r2.remove(t4));
        }), r2;
      });
    }, t2.prototype.Rn = function(t3, e, n2) {
      for (var r2 = en(), i = 0, o = e; i < o.length; i++)
        for (var s = 0, u = o[i].mutations; s < u.length; s++) {
          var a = u[s];
          a instanceof Re && null === n2.get(a.key) && (r2 = r2.add(a.key));
        }
      var c = n2;
      return this.Ue.getEntries(t3, r2).next(function(t4) {
        return t4.forEach(function(t5, e2) {
          e2.isFoundDocument() && (c = c.insert(t5, e2));
        }), c;
      });
    }, t2;
  }()
);
var Oi = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2) {
      this.targetId = t3, this.fromCache = e, this.bn = n2, this.vn = r2;
    }
    return t2.Pn = function(e, n2) {
      for (var r2 = en(), i = en(), o = 0, s = n2.docChanges; o < s.length; o++) {
        var u = s[o];
        switch (u.type) {
          case 0:
            r2 = r2.add(u.doc.key);
            break;
          case 1:
            i = i.add(u.doc.key);
        }
      }
      return new t2(e, n2.fromCache, r2, i);
    }, t2;
  }()
);
var Li = (
  /** @class */
  function() {
    function t2() {
    }
    return t2.prototype.Vn = function(t3) {
      this.Sn = t3;
    }, /** Returns all local documents matching the specified query. */
    t2.prototype.getDocumentsMatchingQuery = function(t3, e, n2, r2) {
      var i = this;
      return function(t4) {
        return 0 === t4.filters.length && null === t4.limit && null == t4.startAt && null == t4.endAt && (0 === t4.explicitOrderBy.length || 1 === t4.explicitOrderBy.length && t4.explicitOrderBy[0].field.isKeyField());
      }(e) || n2.isEqual(U2.min()) ? this.Dn(t3, e) : this.Sn.pn(t3, r2).next(function(o) {
        var s = i.Cn(e, o);
        return (zt(e) || Wt(e)) && i.Nn(e.limitType, s, r2, n2) ? i.Dn(t3, e) : (D2() <= LogLevel.DEBUG && N2("QueryEngine", "Re-using previous result from %s to execute query: %s", n2.toString(), ne(e)), i.Sn.getDocumentsMatchingQuery(t3, e, n2).next(function(t4) {
          return s.forEach(function(e2) {
            t4 = t4.insert(e2.key, e2);
          }), t4;
        }));
      });
    }, /** Applies the query filter and sorting to the provided documents.  */
    t2.prototype.Cn = function(t3, e) {
      var n2 = new ze(ie(t3));
      return e.forEach(function(e2, r2) {
        re(t3, r2) && (n2 = n2.add(r2));
      }), n2;
    }, /**
     * Determines if a limit query needs to be refilled from cache, making it
     * ineligible for index-free execution.
     *
     * @param sortedPreviousResults - The documents that matched the query when it
     * was last synchronized, sorted by the query's comparator.
     * @param remoteKeys - The document keys that matched the query at the last
     * snapshot.
     * @param limboFreeSnapshotVersion - The version of the snapshot when the
     * query was last synchronized.
     */
    t2.prototype.Nn = function(t3, e, n2, r2) {
      if (n2.size !== e.size)
        return true;
      var i = "F" === t3 ? e.last() : e.first();
      return !!i && (i.hasPendingWrites || i.version.compareTo(r2) > 0);
    }, t2.prototype.Dn = function(t3, e) {
      return D2() <= LogLevel.DEBUG && N2("QueryEngine", "Using full collection scan to execute query:", ne(e)), this.Sn.getDocumentsMatchingQuery(t3, e, U2.min());
    }, t2;
  }()
);
var Pi = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2) {
      this.persistence = t3, this.xn = e, this.R = r2, /**
           * Maps a targetID to data about its target.
           *
           * PORTING NOTE: We are using an immutable data structure on Web to make re-runs
           * of `applyRemoteEvent()` idempotent.
           */
      this.Fn = new Ke(M2), /** Maps a target to its targetID. */
      // TODO(wuandy): Evaluate if TargetId can be part of Target.
      this.kn = new mi(function(t4) {
        return St(t4);
      }, Dt), /**
           * The read time of the last entry processed by `getNewDocumentChanges()`.
           *
           * PORTING NOTE: This is only used for multi-tab synchronization.
           */
      this.On = U2.min(), this._n = t3.getMutationQueue(n2), this.$n = t3.getRemoteDocumentCache(), this.qe = t3.getTargetCache(), this.Mn = new Ri(this.$n, this._n, this.persistence.getIndexManager()), this.Qe = t3.getBundleCache(), this.xn.Vn(this.Mn);
    }
    return t2.prototype.collectGarbage = function(t3) {
      var e = this;
      return this.persistence.runTransaction("Collect garbage", "readwrite-primary", function(n2) {
        return t3.collect(n2, e.Fn);
      });
    }, t2;
  }()
);
function Mi(t2, e, n2, r2) {
  return new Pi(t2, e, n2, r2);
}
function Fi(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2, i, o;
    return __generator(this, function(s) {
      switch (s.label) {
        case 0:
          return n2 = O2(t2), r2 = n2._n, i = n2.Mn, [4, n2.persistence.runTransaction("Handle user change", "readonly", function(t3) {
            var o2;
            return n2._n.getAllMutationBatches(t3).next(function(s2) {
              return o2 = s2, r2 = n2.persistence.getMutationQueue(e), // Recreate our LocalDocumentsView using the new
              // MutationQueue.
              i = new Ri(n2.$n, r2, n2.persistence.getIndexManager()), r2.getAllMutationBatches(t3);
            }).next(function(e2) {
              for (var n3 = [], r3 = [], s2 = en(), u = 0, a = o2; u < a.length; u++) {
                var c = a[u];
                n3.push(c.batchId);
                for (var h2 = 0, f = c.mutations; h2 < f.length; h2++) {
                  var l = f[h2];
                  s2 = s2.add(l.key);
                }
              }
              for (var d = 0, p2 = e2; d < p2.length; d++) {
                var y2 = p2[d];
                r3.push(y2.batchId);
                for (var v2 = 0, m = y2.mutations; v2 < m.length; v2++) {
                  var g = m[v2];
                  s2 = s2.add(g.key);
                }
              }
              return i.pn(t3, s2).next(function(t4) {
                return {
                  Ln: t4,
                  removedBatchIds: n3,
                  addedBatchIds: r3
                };
              });
            });
          })];
        case 1:
          return o = s.sent(), [2, (n2._n = r2, n2.Mn = i, n2.xn.Vn(n2.Mn), o)];
      }
    });
  });
}
function Vi(t2, e) {
  var n2 = O2(t2);
  return n2.persistence.runTransaction("Acknowledge batch", "readwrite-primary", function(t3) {
    var r2 = e.batch.keys(), i = n2.$n.newChangeBuffer({
      trackRemovals: true
    });
    return function(t4, e2, n3, r3) {
      var i2 = n3.batch, o = i2.keys(), s = mr.resolve();
      return o.forEach(function(t5) {
        s = s.next(function() {
          return r3.getEntry(e2, t5);
        }).next(function(e3) {
          var o2 = n3.docVersions.get(t5);
          R2(null !== o2), e3.version.compareTo(o2) < 0 && (i2.applyToRemoteDocument(e3, n3), e3.isValidDocument() && // We use the commitVersion as the readTime rather than the
          // document's updateTime since the updateTime is not advanced
          // for updates that do not modify the underlying document.
          r3.addEntry(e3, n3.commitVersion));
        });
      }), s.next(function() {
        return t4._n.removeMutationBatch(e2, i2);
      });
    }(n2, t3, e, i).next(function() {
      return i.apply(t3);
    }).next(function() {
      return n2._n.performConsistencyCheck(t3);
    }).next(function() {
      return n2.Mn.pn(t3, r2);
    });
  });
}
function qi(t2) {
  var e = O2(t2);
  return e.persistence.runTransaction("Get last remote snapshot version", "readonly", function(t3) {
    return e.qe.getLastRemoteSnapshotVersion(t3);
  });
}
function Ui(t2, e) {
  var n2 = O2(t2), r2 = e.snapshotVersion, i = n2.Fn;
  return n2.persistence.runTransaction("Apply remote event", "readwrite-primary", function(t3) {
    var o = n2.$n.newChangeBuffer({
      trackRemovals: true
    });
    i = n2.Fn;
    var s = [];
    e.targetChanges.forEach(function(e2, o2) {
      var u2 = i.get(o2);
      if (u2) {
        s.push(n2.qe.removeMatchingKeys(t3, e2.removedDocuments, o2).next(function() {
          return n2.qe.addMatchingKeys(t3, e2.addedDocuments, o2);
        }));
        var a2 = e2.resumeToken;
        if (a2.approximateByteSize() > 0) {
          var c = u2.withResumeToken(a2, r2).withSequenceNumber(t3.currentSequenceNumber);
          i = i.insert(o2, c), // Update the target data if there are target changes (or if
          // sufficient time has passed since the last update).
          /**
          * Returns true if the newTargetData should be persisted during an update of
          * an active target. TargetData should always be persisted when a target is
          * being released and should not call this function.
          *
          * While the target is active, TargetData updates can be omitted when nothing
          * about the target has changed except metadata like the resume token or
          * snapshot version. Occasionally it's worth the extra write to prevent these
          * values from getting too stale after a crash, but this doesn't have to be
          * too frequent.
          */
          function(t4, e3, n3) {
            return R2(e3.resumeToken.approximateByteSize() > 0), 0 === t4.resumeToken.approximateByteSize() || // Don't allow resume token changes to be buffered indefinitely. This
            // allows us to be reasonably up-to-date after a crash and avoids needing
            // to loop over all active queries on shutdown. Especially in the browser
            // we may not get time to do anything interesting while the current tab is
            // closing.
            (e3.snapshotVersion.toMicroseconds() - t4.snapshotVersion.toMicroseconds() >= 3e8 || n3.addedDocuments.size + n3.modifiedDocuments.size + n3.removedDocuments.size > 0);
          }(u2, c, e2) && s.push(n2.qe.updateTargetData(t3, c));
        }
      }
    });
    var u = Ye();
    if (e.documentUpdates.forEach(function(r3, i2) {
      e.resolvedLimboDocuments.has(r3) && s.push(n2.persistence.referenceDelegate.updateLimboDocument(t3, r3));
    }), // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
    // documents in advance in a single call.
    s.push(Bi(t3, o, e.documentUpdates, r2, void 0).next(function(t4) {
      u = t4;
    })), !r2.isEqual(U2.min())) {
      var a = n2.qe.getLastRemoteSnapshotVersion(t3).next(function(e2) {
        return n2.qe.setTargetsMetadata(t3, t3.currentSequenceNumber, r2);
      });
      s.push(a);
    }
    return mr.waitFor(s).next(function() {
      return o.apply(t3);
    }).next(function() {
      return n2.Mn.En(t3, u);
    }).next(function() {
      return u;
    });
  }).then(function(t3) {
    return n2.Fn = i, t3;
  });
}
function Bi(t2, e, n2, r2, i) {
  var o = en();
  return n2.forEach(function(t3) {
    return o = o.add(t3);
  }), e.getEntries(t2, o).next(function(t3) {
    var o2 = Ye();
    return n2.forEach(function(n3, s) {
      var u = t3.get(n3), a = (null == i ? void 0 : i.get(n3)) || r2;
      s.isNoDocument() && s.version.isEqual(U2.min()) ? (
        // NoDocuments with SnapshotVersion.min() are used in manufactured
        // events. We remove these documents from cache since we lost
        // access.
        (e.removeEntry(n3, a), o2 = o2.insert(n3, s))
      ) : !u.isValidDocument() || s.version.compareTo(u.version) > 0 || 0 === s.version.compareTo(u.version) && u.hasPendingWrites ? (e.addEntry(s, a), o2 = o2.insert(n3, s)) : N2("LocalStore", "Ignoring outdated watch update for ", n3, ". Current version:", u.version, " Watch version:", s.version);
    }), o2;
  });
}
function ji(t2, e) {
  var n2 = O2(t2);
  return n2.persistence.runTransaction("Get next mutation batch", "readonly", function(t3) {
    return void 0 === e && (e = -1), n2._n.getNextMutationBatchAfterBatchId(t3, e);
  });
}
function Ki(t2, e) {
  var n2 = O2(t2);
  return n2.persistence.runTransaction("Allocate target", "readwrite", function(t3) {
    var r2;
    return n2.qe.getTargetData(t3, e).next(function(i) {
      return i ? (
        // This target has been listened to previously, so reuse the
        // previous targetID.
        // TODO(mcg): freshen last accessed date?
        (r2 = i, mr.resolve(r2))
      ) : n2.qe.allocateTargetId(t3).next(function(i2) {
        return r2 = new Cr(e, i2, 0, t3.currentSequenceNumber), n2.qe.addTargetData(t3, r2).next(function() {
          return r2;
        });
      });
    });
  }).then(function(t3) {
    var r2 = n2.Fn.get(t3.targetId);
    return (null === r2 || t3.snapshotVersion.compareTo(r2.snapshotVersion) > 0) && (n2.Fn = n2.Fn.insert(t3.targetId, t3), n2.kn.set(e, t3.targetId)), t3;
  });
}
function Gi(t2, e, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2, i, o, s;
    return __generator(this, function(u) {
      switch (u.label) {
        case 0:
          r2 = O2(t2), i = r2.Fn.get(e), o = n2 ? "readwrite" : "readwrite-primary", u.label = 1;
        case 1:
          return u.trys.push([1, 4, , 5]), n2 ? [3, 3] : [4, r2.persistence.runTransaction("Release target", o, function(t3) {
            return r2.persistence.referenceDelegate.removeTarget(t3, i);
          })];
        case 2:
          u.sent(), u.label = 3;
        case 3:
          return [3, 5];
        case 4:
          if (!_r(s = u.sent()))
            throw s;
          return N2("LocalStore", "Failed to update sequence numbers for target " + e + ": " + s), [3, 5];
        case 5:
          return r2.Fn = r2.Fn.remove(e), r2.kn.delete(i.target), [
            2
            /*return*/
          ];
      }
    });
  });
}
function Qi(t2, e, n2) {
  var r2 = O2(t2), i = U2.min(), o = en();
  return r2.persistence.runTransaction("Execute query", "readonly", function(t3) {
    return function(t4, e2, n3) {
      var r3 = O2(t4), i2 = r3.kn.get(n3);
      return void 0 !== i2 ? mr.resolve(r3.Fn.get(i2)) : r3.qe.getTargetData(e2, n3);
    }(r2, t3, Jt(e)).next(function(e2) {
      if (e2)
        return i = e2.lastLimboFreeSnapshotVersion, r2.qe.getMatchingKeysForTargetId(t3, e2.targetId).next(function(t4) {
          o = t4;
        });
    }).next(function() {
      return r2.xn.getDocumentsMatchingQuery(t3, e, n2 ? i : U2.min(), n2 ? o : en());
    }).next(function(t4) {
      return {
        documents: t4,
        Bn: o
      };
    });
  });
}
function zi(t2, e) {
  var n2 = O2(t2), r2 = O2(n2.qe), i = n2.Fn.get(e);
  return i ? Promise.resolve(i.target) : n2.persistence.runTransaction("Get target data", "readonly", function(t3) {
    return r2.lt(t3, e).next(function(t4) {
      return t4 ? t4.target : null;
    });
  });
}
function Wi(t2) {
  var e = O2(t2);
  return e.persistence.runTransaction("Get new document changes", "readonly", function(t3) {
    return function(t4, e2, n2) {
      var r2 = O2(t4), i = Ye(), o = Pr(n2), s = _i(e2), u = IDBKeyRange.lowerBound(o, true);
      return s.Ot({
        index: ir.readTimeIndex,
        range: u
      }, function(t5, e3) {
        var n3 = Or(r2.R, e3);
        i = i.insert(n3.key, n3), o = e3.readTime;
      }).next(function() {
        return {
          wn: i,
          readTime: Mr(o)
        };
      });
    }(e.$n, t3, e.On);
  }).then(function(t3) {
    var n2 = t3.wn, r2 = t3.readTime;
    return e.On = r2, n2;
  });
}
function Hi(t2) {
  return __awaiter(this, void 0, void 0, function() {
    var e;
    return __generator(this, function(n2) {
      return [2, (e = O2(t2)).persistence.runTransaction("Synchronize last document change read time", "readonly", function(t3) {
        return function(t4) {
          var e2 = _i(t4), n3 = U2.min();
          return e2.Ot({
            index: ir.readTimeIndex,
            reverse: true
          }, function(t5, e3, r2) {
            e3.readTime && (n3 = Mr(e3.readTime)), r2.done();
          }).next(function() {
            return n3;
          });
        }(t3);
      }).then(function(t3) {
        e.On = t3;
      })];
    });
  });
}
function Yi(t2, e, n2, r2) {
  return __awaiter(this, void 0, void 0, function() {
    var i, o, s, u, a, c, h2, f, l, d;
    return __generator(this, function(p2) {
      switch (p2.label) {
        case 0:
          for (i = O2(t2), o = en(), s = Ye(), u = Ze(), a = 0, c = n2; a < c.length; a++)
            h2 = c[a], f = e.qn(h2.metadata.name), h2.document && (o = o.add(f)), s = s.insert(f, e.Un(h2)), u = u.insert(f, e.Qn(h2.metadata.readTime));
          return l = i.$n.newChangeBuffer({
            trackRemovals: true
          }), [4, Ki(i, function(t3) {
            return Jt(Qt(Q2.fromString("__bundle__/docs/" + t3)));
          }(r2))];
        case 1:
          return d = p2.sent(), [2, i.persistence.runTransaction("Apply bundle documents", "readwrite", function(t3) {
            return Bi(t3, l, s, U2.min(), u).next(function(e2) {
              return l.apply(t3), e2;
            }).next(function(e2) {
              return i.qe.removeMatchingKeysForTargetId(t3, d.targetId).next(function() {
                return i.qe.addMatchingKeys(t3, o, d.targetId);
              }).next(function() {
                return i.Mn.En(t3, e2);
              }).next(function() {
                return e2;
              });
            });
          })];
      }
    });
  });
}
function Xi(t2, e, n2) {
  return void 0 === n2 && (n2 = en()), __awaiter(this, void 0, void 0, function() {
    var r2, i;
    return __generator(this, function(o) {
      switch (o.label) {
        case 0:
          return [4, Ki(t2, Jt(jr(e.bundledQuery)))];
        case 1:
          return r2 = o.sent(), [2, (i = O2(t2)).persistence.runTransaction("Save named query", "readwrite", function(t3) {
            var o2 = bn(e.readTime);
            if (r2.snapshotVersion.compareTo(o2) >= 0)
              return i.Qe.saveNamedQuery(t3, e);
            var s = r2.withResumeToken(Y2.EMPTY_BYTE_STRING, o2);
            return i.Fn = i.Fn.insert(s.targetId, s), i.qe.updateTargetData(t3, s).next(function() {
              return i.qe.removeMatchingKeysForTargetId(t3, r2.targetId);
            }).next(function() {
              return i.qe.addMatchingKeys(t3, n2, r2.targetId);
            }).next(function() {
              return i.Qe.saveNamedQuery(t3, e);
            });
          })];
      }
    });
  });
}
var $i = (
  /** @class */
  function() {
    function t2(t3) {
      this.R = t3, this.Kn = /* @__PURE__ */ new Map(), this.jn = /* @__PURE__ */ new Map();
    }
    return t2.prototype.getBundleMetadata = function(t3, e) {
      return mr.resolve(this.Kn.get(e));
    }, t2.prototype.saveBundleMetadata = function(t3, e) {
      var n2;
      return this.Kn.set(e.id, {
        id: (n2 = e).id,
        version: n2.version,
        createTime: bn(n2.createTime)
      }), mr.resolve();
    }, t2.prototype.getNamedQuery = function(t3, e) {
      return mr.resolve(this.jn.get(e));
    }, t2.prototype.saveNamedQuery = function(t3, e) {
      return this.jn.set(e.name, function(t4) {
        return {
          name: t4.name,
          query: jr(t4.bundledQuery),
          readTime: bn(t4.readTime)
        };
      }(e)), mr.resolve();
    }, t2;
  }()
);
var Ji = (
  /** @class */
  function() {
    function t2() {
      this.Wn = new ze(Zi.Gn), // A set of outstanding references to a document sorted by target id.
      this.zn = new ze(Zi.Hn);
    }
    return t2.prototype.isEmpty = function() {
      return this.Wn.isEmpty();
    }, /** Adds a reference to the given document key for the given ID. */
    t2.prototype.addReference = function(t3, e) {
      var n2 = new Zi(t3, e);
      this.Wn = this.Wn.add(n2), this.zn = this.zn.add(n2);
    }, /** Add references to the given document keys for the given ID. */
    t2.prototype.Jn = function(t3, e) {
      var n2 = this;
      t3.forEach(function(t4) {
        return n2.addReference(t4, e);
      });
    }, /**
     * Removes a reference to the given document key for the given
     * ID.
     */
    t2.prototype.removeReference = function(t3, e) {
      this.Yn(new Zi(t3, e));
    }, t2.prototype.Xn = function(t3, e) {
      var n2 = this;
      t3.forEach(function(t4) {
        return n2.removeReference(t4, e);
      });
    }, /**
     * Clears all references with a given ID. Calls removeRef() for each key
     * removed.
     */
    t2.prototype.Zn = function(t3) {
      var e = this, n2 = new st(new Q2([])), r2 = new Zi(n2, t3), i = new Zi(n2, t3 + 1), o = [];
      return this.zn.forEachInRange([r2, i], function(t4) {
        e.Yn(t4), o.push(t4.key);
      }), o;
    }, t2.prototype.ts = function() {
      var t3 = this;
      this.Wn.forEach(function(e) {
        return t3.Yn(e);
      });
    }, t2.prototype.Yn = function(t3) {
      this.Wn = this.Wn.delete(t3), this.zn = this.zn.delete(t3);
    }, t2.prototype.es = function(t3) {
      var e = new st(new Q2([])), n2 = new Zi(e, t3), r2 = new Zi(e, t3 + 1), i = en();
      return this.zn.forEachInRange([n2, r2], function(t4) {
        i = i.add(t4.key);
      }), i;
    }, t2.prototype.containsKey = function(t3) {
      var e = new Zi(t3, 0), n2 = this.Wn.firstAfterOrEqual(e);
      return null !== n2 && t3.isEqual(n2.key);
    }, t2;
  }()
);
var Zi = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.key = t3, this.ns = e;
    }
    return t2.Gn = function(t3, e) {
      return st.comparator(t3.key, e.key) || M2(t3.ns, e.ns);
    }, /** Compare by ID then by key */
    t2.Hn = function(t3, e) {
      return M2(t3.ns, e.ns) || st.comparator(t3.key, e.key);
    }, t2;
  }()
);
var to = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.Ut = t3, this.referenceDelegate = e, /**
           * The set of all mutations that have been sent but not yet been applied to
           * the backend.
           */
      this._n = [], /** Next value to use when assigning sequential IDs to each mutation batch. */
      this.ss = 1, /** An ordered mapping between documents and the mutations batch IDs. */
      this.rs = new ze(Zi.Gn);
    }
    return t2.prototype.checkEmpty = function(t3) {
      return mr.resolve(0 === this._n.length);
    }, t2.prototype.addMutationBatch = function(t3, e, n2, r2) {
      var i = this.ss;
      this.ss++, this._n.length > 0 && this._n[this._n.length - 1];
      var o = new kr(i, e, n2, r2);
      this._n.push(o);
      for (var s = 0, u = r2; s < u.length; s++) {
        var a = u[s];
        this.rs = this.rs.add(new Zi(a.key, i)), this.Ut.addToCollectionParentIndex(t3, a.key.path.popLast());
      }
      return mr.resolve(o);
    }, t2.prototype.lookupMutationBatch = function(t3, e) {
      return mr.resolve(this.os(e));
    }, t2.prototype.getNextMutationBatchAfterBatchId = function(t3, e) {
      var n2 = e + 1, r2 = this.cs(n2), i = r2 < 0 ? 0 : r2;
      return mr.resolve(this._n.length > i ? this._n[i] : null);
    }, t2.prototype.getHighestUnacknowledgedBatchId = function() {
      return mr.resolve(0 === this._n.length ? -1 : this.ss - 1);
    }, t2.prototype.getAllMutationBatches = function(t3) {
      return mr.resolve(this._n.slice());
    }, t2.prototype.getAllMutationBatchesAffectingDocumentKey = function(t3, e) {
      var n2 = this, r2 = new Zi(e, 0), i = new Zi(e, Number.POSITIVE_INFINITY), o = [];
      return this.rs.forEachInRange([r2, i], function(t4) {
        var e2 = n2.os(t4.ns);
        o.push(e2);
      }), mr.resolve(o);
    }, t2.prototype.getAllMutationBatchesAffectingDocumentKeys = function(t3, e) {
      var n2 = this, r2 = new ze(M2);
      return e.forEach(function(t4) {
        var e2 = new Zi(t4, 0), i = new Zi(t4, Number.POSITIVE_INFINITY);
        n2.rs.forEachInRange([e2, i], function(t5) {
          r2 = r2.add(t5.ns);
        });
      }), mr.resolve(this.us(r2));
    }, t2.prototype.getAllMutationBatchesAffectingQuery = function(t3, e) {
      var n2 = e.path, r2 = n2.length + 1, i = n2;
      st.isDocumentKey(i) || (i = i.child(""));
      var o = new Zi(new st(i), 0), s = new ze(M2);
      return this.rs.forEachWhile(function(t4) {
        var e2 = t4.key.path;
        return !!n2.isPrefixOf(e2) && // Rows with document keys more than one segment longer than the query
        // path can't be matches. For example, a query on 'rooms' can't match
        // the document /rooms/abc/messages/xyx.
        // TODO(mcg): we'll need a different scanner when we implement
        // ancestor queries.
        (e2.length === r2 && (s = s.add(t4.ns)), true);
      }, o), mr.resolve(this.us(s));
    }, t2.prototype.us = function(t3) {
      var e = this, n2 = [];
      return t3.forEach(function(t4) {
        var r2 = e.os(t4);
        null !== r2 && n2.push(r2);
      }), n2;
    }, t2.prototype.removeMutationBatch = function(t3, e) {
      var n2 = this;
      R2(0 === this.hs(e.batchId, "removed")), this._n.shift();
      var r2 = this.rs;
      return mr.forEach(e.mutations, function(i) {
        var o = new Zi(i.key, e.batchId);
        return r2 = r2.delete(o), n2.referenceDelegate.markPotentiallyOrphaned(t3, i.key);
      }).next(function() {
        n2.rs = r2;
      });
    }, t2.prototype.Gt = function(t3) {
    }, t2.prototype.containsKey = function(t3, e) {
      var n2 = new Zi(e, 0), r2 = this.rs.firstAfterOrEqual(n2);
      return mr.resolve(e.isEqual(r2 && r2.key));
    }, t2.prototype.performConsistencyCheck = function(t3) {
      return this._n.length, mr.resolve();
    }, /**
     * Finds the index of the given batchId in the mutation queue and asserts that
     * the resulting index is within the bounds of the queue.
     *
     * @param batchId - The batchId to search for
     * @param action - A description of what the caller is doing, phrased in passive
     * form (e.g. "acknowledged" in a routine that acknowledges batches).
     */
    t2.prototype.hs = function(t3, e) {
      return this.cs(t3);
    }, /**
     * Finds the index of the given batchId in the mutation queue. This operation
     * is O(1).
     *
     * @returns The computed index of the batch with the given batchId, based on
     * the state of the queue. Note this index can be negative if the requested
     * batchId has already been remvoed from the queue or past the end of the
     * queue if the batchId is larger than the last added batch.
     */
    t2.prototype.cs = function(t3) {
      return 0 === this._n.length ? 0 : t3 - this._n[0].batchId;
    }, /**
     * A version of lookupMutationBatch that doesn't return a promise, this makes
     * other functions that uses this code easier to read and more efficent.
     */
    t2.prototype.os = function(t3) {
      var e = this.cs(t3);
      return e < 0 || e >= this._n.length ? null : this._n[e];
    }, t2;
  }()
);
var eo = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.Ut = t3, this.ls = e, /** Underlying cache of documents and their read times. */
      this.docs = new Ke(st.comparator), /** Size of all cached documents. */
      this.size = 0;
    }
    return t2.prototype.addEntry = function(t3, e, n2) {
      var r2 = e.key, i = this.docs.get(r2), o = i ? i.size : 0, s = this.ls(e);
      return this.docs = this.docs.insert(r2, {
        document: e.clone(),
        size: s,
        readTime: n2
      }), this.size += s - o, this.Ut.addToCollectionParentIndex(t3, r2.path.popLast());
    }, /**
     * Removes the specified entry from the cache and updates the cache size as appropriate.
     *
     * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer
     * returned by `newChangeBuffer()`.
     */
    t2.prototype.removeEntry = function(t3) {
      var e = this.docs.get(t3);
      e && (this.docs = this.docs.remove(t3), this.size -= e.size);
    }, t2.prototype.getEntry = function(t3, e) {
      var n2 = this.docs.get(e);
      return mr.resolve(n2 ? n2.document.clone() : _t.newInvalidDocument(e));
    }, t2.prototype.getEntries = function(t3, e) {
      var n2 = this, r2 = Ye();
      return e.forEach(function(t4) {
        var e2 = n2.docs.get(t4);
        r2 = r2.insert(t4, e2 ? e2.document.clone() : _t.newInvalidDocument(t4));
      }), mr.resolve(r2);
    }, t2.prototype.getDocumentsMatchingQuery = function(t3, e, n2) {
      for (var r2 = Ye(), i = new st(e.path.child("")), o = this.docs.getIteratorFrom(i); o.hasNext(); ) {
        var s = o.getNext(), u = s.key, a = s.value, c = a.document, h2 = a.readTime;
        if (!e.path.isPrefixOf(u.path))
          break;
        h2.compareTo(n2) <= 0 || re(e, c) && (r2 = r2.insert(c.key, c.clone()));
      }
      return mr.resolve(r2);
    }, t2.prototype.fs = function(t3, e) {
      return mr.forEach(this.docs, function(t4) {
        return e(t4);
      });
    }, t2.prototype.newChangeBuffer = function(t3) {
      return new no(this);
    }, t2.prototype.getSize = function(t3) {
      return mr.resolve(this.size);
    }, t2;
  }()
);
var no = (
  /** @class */
  function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).Ie = e2, n2;
    }
    return __extends(e, t2), e.prototype.applyChanges = function(t3) {
      var e2 = this, n2 = [];
      return this.changes.forEach(function(r2, i) {
        i.document.isValidDocument() ? n2.push(e2.Ie.addEntry(t3, i.document, e2.getReadTime(r2))) : e2.Ie.removeEntry(r2);
      }), mr.waitFor(n2);
    }, e.prototype.getFromCache = function(t3, e2) {
      return this.Ie.getEntry(t3, e2);
    }, e.prototype.getAllFromCache = function(t3, e2) {
      return this.Ie.getEntries(t3, e2);
    }, e;
  }(gi)
);
var ro = (
  /** @class */
  function() {
    function t2(t3) {
      this.persistence = t3, /**
           * Maps a target to the data about that target
           */
      this.ds = new mi(function(t4) {
        return St(t4);
      }, Dt), /** The last received snapshot version. */
      this.lastRemoteSnapshotVersion = U2.min(), /** The highest numbered target ID encountered. */
      this.highestTargetId = 0, /** The highest sequence number encountered. */
      this.ws = 0, /**
           * A ordered bidirectional mapping between documents and the remote target
           * IDs.
           */
      this._s = new Ji(), this.targetCount = 0, this.ys = oi.Jt();
    }
    return t2.prototype.forEachTarget = function(t3, e) {
      return this.ds.forEach(function(t4, n2) {
        return e(n2);
      }), mr.resolve();
    }, t2.prototype.getLastRemoteSnapshotVersion = function(t3) {
      return mr.resolve(this.lastRemoteSnapshotVersion);
    }, t2.prototype.getHighestSequenceNumber = function(t3) {
      return mr.resolve(this.ws);
    }, t2.prototype.allocateTargetId = function(t3) {
      return this.highestTargetId = this.ys.next(), mr.resolve(this.highestTargetId);
    }, t2.prototype.setTargetsMetadata = function(t3, e, n2) {
      return n2 && (this.lastRemoteSnapshotVersion = n2), e > this.ws && (this.ws = e), mr.resolve();
    }, t2.prototype.te = function(t3) {
      this.ds.set(t3.target, t3);
      var e = t3.targetId;
      e > this.highestTargetId && (this.ys = new oi(e), this.highestTargetId = e), t3.sequenceNumber > this.ws && (this.ws = t3.sequenceNumber);
    }, t2.prototype.addTargetData = function(t3, e) {
      return this.te(e), this.targetCount += 1, mr.resolve();
    }, t2.prototype.updateTargetData = function(t3, e) {
      return this.te(e), mr.resolve();
    }, t2.prototype.removeTargetData = function(t3, e) {
      return this.ds.delete(e.target), this._s.Zn(e.targetId), this.targetCount -= 1, mr.resolve();
    }, t2.prototype.removeTargets = function(t3, e, n2) {
      var r2 = this, i = 0, o = [];
      return this.ds.forEach(function(s, u) {
        u.sequenceNumber <= e && null === n2.get(u.targetId) && (r2.ds.delete(s), o.push(r2.removeMatchingKeysForTargetId(t3, u.targetId)), i++);
      }), mr.waitFor(o).next(function() {
        return i;
      });
    }, t2.prototype.getTargetCount = function(t3) {
      return mr.resolve(this.targetCount);
    }, t2.prototype.getTargetData = function(t3, e) {
      var n2 = this.ds.get(e) || null;
      return mr.resolve(n2);
    }, t2.prototype.addMatchingKeys = function(t3, e, n2) {
      return this._s.Jn(e, n2), mr.resolve();
    }, t2.prototype.removeMatchingKeys = function(t3, e, n2) {
      this._s.Xn(e, n2);
      var r2 = this.persistence.referenceDelegate, i = [];
      return r2 && e.forEach(function(e2) {
        i.push(r2.markPotentiallyOrphaned(t3, e2));
      }), mr.waitFor(i);
    }, t2.prototype.removeMatchingKeysForTargetId = function(t3, e) {
      return this._s.Zn(e), mr.resolve();
    }, t2.prototype.getMatchingKeysForTargetId = function(t3, e) {
      var n2 = this._s.es(e);
      return mr.resolve(n2);
    }, t2.prototype.containsKey = function(t3, e) {
      return mr.resolve(this._s.containsKey(e));
    }, t2;
  }()
);
var io = (
  /** @class */
  function() {
    function t2(t3, e) {
      var n2 = this;
      this.gs = {}, this.Ne = new _(0), this.xe = false, this.xe = true, this.referenceDelegate = t3(this), this.qe = new ro(this), this.Ut = new zr(), this.Ue = function(t4, e2) {
        return new eo(t4, function(t5) {
          return n2.referenceDelegate.ps(t5);
        });
      }(this.Ut), this.R = new Rr(e), this.Qe = new $i(this.R);
    }
    return t2.prototype.start = function() {
      return Promise.resolve();
    }, t2.prototype.shutdown = function() {
      return this.xe = false, Promise.resolve();
    }, Object.defineProperty(t2.prototype, "started", {
      get: function() {
        return this.xe;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.setDatabaseDeletedListener = function() {
    }, t2.prototype.setNetworkEnabled = function() {
    }, t2.prototype.getIndexManager = function() {
      return this.Ut;
    }, t2.prototype.getMutationQueue = function(t3) {
      var e = this.gs[t3.toKey()];
      return e || (e = new to(this.Ut, this.referenceDelegate), this.gs[t3.toKey()] = e), e;
    }, t2.prototype.getTargetCache = function() {
      return this.qe;
    }, t2.prototype.getRemoteDocumentCache = function() {
      return this.Ue;
    }, t2.prototype.getBundleCache = function() {
      return this.Qe;
    }, t2.prototype.runTransaction = function(t3, e, n2) {
      var r2 = this;
      N2("MemoryPersistence", "Starting transaction:", t3);
      var i = new oo(this.Ne.next());
      return this.referenceDelegate.Es(), n2(i).next(function(t4) {
        return r2.referenceDelegate.Ts(i).next(function() {
          return t4;
        });
      }).toPromise().then(function(t4) {
        return i.raiseOnCommittedEvent(), t4;
      });
    }, t2.prototype.Is = function(t3, e) {
      return mr.or(Object.values(this.gs).map(function(n2) {
        return function() {
          return n2.containsKey(t3, e);
        };
      }));
    }, t2;
  }()
);
var oo = (
  /** @class */
  function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).currentSequenceNumber = e2, n2;
    }
    return __extends(e, t2), e;
  }(yr)
);
var so = (
  /** @class */
  function() {
    function t2(t3) {
      this.persistence = t3, /** Tracks all documents that are active in Query views. */
      this.As = new Ji(), /** The list of documents that are potentially GCed after each transaction. */
      this.Rs = null;
    }
    return t2.bs = function(e) {
      return new t2(e);
    }, Object.defineProperty(t2.prototype, "vs", {
      get: function() {
        if (this.Rs)
          return this.Rs;
        throw C();
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.addReference = function(t3, e, n2) {
      return this.As.addReference(n2, e), this.vs.delete(n2.toString()), mr.resolve();
    }, t2.prototype.removeReference = function(t3, e, n2) {
      return this.As.removeReference(n2, e), this.vs.add(n2.toString()), mr.resolve();
    }, t2.prototype.markPotentiallyOrphaned = function(t3, e) {
      return this.vs.add(e.toString()), mr.resolve();
    }, t2.prototype.removeTarget = function(t3, e) {
      var n2 = this;
      this.As.Zn(e.targetId).forEach(function(t4) {
        return n2.vs.add(t4.toString());
      });
      var r2 = this.persistence.getTargetCache();
      return r2.getMatchingKeysForTargetId(t3, e.targetId).next(function(t4) {
        t4.forEach(function(t5) {
          return n2.vs.add(t5.toString());
        });
      }).next(function() {
        return r2.removeTargetData(t3, e);
      });
    }, t2.prototype.Es = function() {
      this.Rs = /* @__PURE__ */ new Set();
    }, t2.prototype.Ts = function(t3) {
      var e = this, n2 = this.persistence.getRemoteDocumentCache().newChangeBuffer();
      return mr.forEach(this.vs, function(r2) {
        var i = st.fromPath(r2);
        return e.Ps(t3, i).next(function(t4) {
          t4 || n2.removeEntry(i);
        });
      }).next(function() {
        return e.Rs = null, n2.apply(t3);
      });
    }, t2.prototype.updateLimboDocument = function(t3, e) {
      var n2 = this;
      return this.Ps(t3, e).next(function(t4) {
        t4 ? n2.vs.delete(e.toString()) : n2.vs.add(e.toString());
      });
    }, t2.prototype.ps = function(t3) {
      return 0;
    }, t2.prototype.Ps = function(t3, e) {
      var n2 = this;
      return mr.or([function() {
        return mr.resolve(n2.As.containsKey(e));
      }, function() {
        return n2.persistence.getTargetCache().containsKey(t3, e);
      }, function() {
        return n2.persistence.Is(t3, e);
      }]);
    }, t2;
  }()
);
var uo = (
  /** @class */
  function() {
    function t2(t3) {
      this.uid = t3;
    }
    return t2.prototype.isAuthenticated = function() {
      return null != this.uid;
    }, /**
     * Returns a key representing this user, suitable for inclusion in a
     * dictionary.
     */
    t2.prototype.toKey = function() {
      return this.isAuthenticated() ? "uid:" + this.uid : "anonymous-user";
    }, t2.prototype.isEqual = function(t3) {
      return t3.uid === this.uid;
    }, t2;
  }()
);
function ao(t2, e) {
  return "firestore_clients_" + t2 + "_" + e;
}
function co(t2, e, n2) {
  var r2 = "firestore_mutations_" + t2 + "_" + n2;
  return e.isAuthenticated() && (r2 += "_" + e.uid), r2;
}
function ho(t2, e) {
  return "firestore_targets_" + t2 + "_" + e;
}
uo.UNAUTHENTICATED = new uo(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for
// non-FirebaseAuth providers.
uo.GOOGLE_CREDENTIALS = new uo("google-credentials-uid"), uo.FIRST_PARTY = new uo("first-party-uid");
var fo = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2) {
      this.user = t3, this.batchId = e, this.state = n2, this.error = r2;
    }
    return t2.Vs = function(e, n2, r2) {
      var i, o = JSON.parse(r2), s = "object" == typeof o && -1 !== ["pending", "acknowledged", "rejected"].indexOf(o.state) && (void 0 === o.error || "object" == typeof o.error);
      return s && o.error && ((s = "string" == typeof o.error.message && "string" == typeof o.error.code) && (i = new T2(o.error.code, o.error.message))), s ? new t2(e, n2, o.state, i) : (A2("SharedClientState", "Failed to parse mutation state for ID '" + n2 + "': " + r2), null);
    }, t2.prototype.Ss = function() {
      var t3 = {
        state: this.state,
        updateTimeMs: Date.now()
      };
      return this.error && (t3.error = {
        code: this.error.code,
        message: this.error.message
      }), JSON.stringify(t3);
    }, t2;
  }()
);
var lo = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this.targetId = t3, this.state = e, this.error = n2;
    }
    return t2.Vs = function(e, n2) {
      var r2, i = JSON.parse(n2), o = "object" == typeof i && -1 !== ["not-current", "current", "rejected"].indexOf(i.state) && (void 0 === i.error || "object" == typeof i.error);
      return o && i.error && ((o = "string" == typeof i.error.message && "string" == typeof i.error.code) && (r2 = new T2(i.error.code, i.error.message))), o ? new t2(e, i.state, r2) : (A2("SharedClientState", "Failed to parse target state for ID '" + e + "': " + n2), null);
    }, t2.prototype.Ss = function() {
      var t3 = {
        state: this.state,
        updateTimeMs: Date.now()
      };
      return this.error && (t3.error = {
        code: this.error.code,
        message: this.error.message
      }), JSON.stringify(t3);
    }, t2;
  }()
);
var po = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.clientId = t3, this.activeTargetIds = e;
    }
    return t2.Vs = function(e, n2) {
      for (var r2 = JSON.parse(n2), i = "object" == typeof r2 && r2.activeTargetIds instanceof Array, o = rn(), s = 0; i && s < r2.activeTargetIds.length; ++s)
        i = ot(r2.activeTargetIds[s]), o = o.add(r2.activeTargetIds[s]);
      return i ? new t2(e, o) : (A2("SharedClientState", "Failed to parse client data for instance '" + e + "': " + n2), null);
    }, t2;
  }()
);
var yo = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.clientId = t3, this.onlineState = e;
    }
    return t2.Vs = function(e) {
      var n2 = JSON.parse(e);
      return "object" == typeof n2 && -1 !== ["Unknown", "Online", "Offline"].indexOf(n2.onlineState) && "string" == typeof n2.clientId ? new t2(n2.clientId, n2.onlineState) : (A2("SharedClientState", "Failed to parse online state: " + e), null);
    }, t2;
  }()
);
var vo = (
  /** @class */
  function() {
    function t2() {
      this.activeTargetIds = rn();
    }
    return t2.prototype.Ds = function(t3) {
      this.activeTargetIds = this.activeTargetIds.add(t3);
    }, t2.prototype.Cs = function(t3) {
      this.activeTargetIds = this.activeTargetIds.delete(t3);
    }, /**
     * Converts this entry into a JSON-encoded format we can use for WebStorage.
     * Does not encode `clientId` as it is part of the key in WebStorage.
     */
    t2.prototype.Ss = function() {
      var t3 = {
        activeTargetIds: this.activeTargetIds.toArray(),
        updateTimeMs: Date.now()
      };
      return JSON.stringify(t3);
    }, t2;
  }()
);
var mo = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i) {
      this.window = t3, this.Se = e, this.persistenceKey = n2, this.Ns = r2, this.syncEngine = null, this.onlineStateHandler = null, this.sequenceNumberHandler = null, this.xs = this.Fs.bind(this), this.ks = new Ke(M2), this.started = false, /**
           * Captures WebStorage events that occur before `start()` is called. These
           * events are replayed once `WebStorageSharedClientState` is started.
           */
      this.Os = [];
      var o = n2.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      this.storage = this.window.localStorage, this.currentUser = i, this.$s = ao(this.persistenceKey, this.Ns), this.Ms = /** Assembles the key for the current sequence number. */
      function(t4) {
        return "firestore_sequence_number_" + t4;
      }(this.persistenceKey), this.ks = this.ks.insert(this.Ns, new vo()), this.Ls = new RegExp("^firestore_clients_" + o + "_([^_]*)$"), this.Bs = new RegExp("^firestore_mutations_" + o + "_(\\d+)(?:_(.*))?$"), this.qs = new RegExp("^firestore_targets_" + o + "_(\\d+)$"), this.Us = /** Assembles the key for the online state of the primary tab. */
      function(t4) {
        return "firestore_online_state_" + t4;
      }(this.persistenceKey), this.Qs = function(t4) {
        return "firestore_bundle_loaded_" + t4;
      }(this.persistenceKey), // Rather than adding the storage observer during start(), we add the
      // storage observer during initialization. This ensures that we collect
      // events before other components populate their initial state (during their
      // respective start() calls). Otherwise, we might for example miss a
      // mutation that is added after LocalStore's start() processed the existing
      // mutations but before we observe WebStorage events.
      this.window.addEventListener("storage", this.xs);
    }
    return t2.yt = function(t3) {
      return !(!t3 || !t3.localStorage);
    }, t2.prototype.start = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e, n2, r2, i, o, s, u, a, c, h2, f = this;
        return __generator(this, function(l) {
          switch (l.label) {
            case 0:
              return [4, this.syncEngine.fn()];
            case 1:
              for (t3 = l.sent(), e = 0, n2 = t3; e < n2.length; e++)
                (r2 = n2[e]) !== this.Ns && (i = this.getItem(ao(this.persistenceKey, r2))) && (o = po.Vs(r2, i)) && (this.ks = this.ks.insert(o.clientId, o));
              for (this.Ks(), (s = this.storage.getItem(this.Us)) && (u = this.js(s)) && this.Ws(u), a = 0, c = this.Os; a < c.length; a++)
                h2 = c[a], this.Fs(h2);
              return this.Os = [], // Register a window unload hook to remove the client metadata entry from
              // WebStorage even if `shutdown()` was not called.
              this.window.addEventListener("unload", function() {
                return f.shutdown();
              }), this.started = true, [
                2
                /*return*/
              ];
          }
        });
      });
    }, t2.prototype.writeSequenceNumber = function(t3) {
      this.setItem(this.Ms, JSON.stringify(t3));
    }, t2.prototype.getAllActiveQueryTargets = function() {
      return this.Gs(this.ks);
    }, t2.prototype.isActiveQueryTarget = function(t3) {
      var e = false;
      return this.ks.forEach(function(n2, r2) {
        r2.activeTargetIds.has(t3) && (e = true);
      }), e;
    }, t2.prototype.addPendingMutation = function(t3) {
      this.zs(t3, "pending");
    }, t2.prototype.updateMutationState = function(t3, e, n2) {
      this.zs(t3, e, n2), // Once a final mutation result is observed by other clients, they no longer
      // access the mutation's metadata entry. Since WebStorage replays events
      // in order, it is safe to delete the entry right after updating it.
      this.Hs(t3);
    }, t2.prototype.addLocalQueryTarget = function(t3) {
      var e = "not-current";
      if (this.isActiveQueryTarget(t3)) {
        var n2 = this.storage.getItem(ho(this.persistenceKey, t3));
        if (n2) {
          var r2 = lo.Vs(t3, n2);
          r2 && (e = r2.state);
        }
      }
      return this.Js.Ds(t3), this.Ks(), e;
    }, t2.prototype.removeLocalQueryTarget = function(t3) {
      this.Js.Cs(t3), this.Ks();
    }, t2.prototype.isLocalQueryTarget = function(t3) {
      return this.Js.activeTargetIds.has(t3);
    }, t2.prototype.clearQueryState = function(t3) {
      this.removeItem(ho(this.persistenceKey, t3));
    }, t2.prototype.updateQueryState = function(t3, e, n2) {
      this.Ys(t3, e, n2);
    }, t2.prototype.handleUserChange = function(t3, e, n2) {
      var r2 = this;
      e.forEach(function(t4) {
        r2.Hs(t4);
      }), this.currentUser = t3, n2.forEach(function(t4) {
        r2.addPendingMutation(t4);
      });
    }, t2.prototype.setOnlineState = function(t3) {
      this.Xs(t3);
    }, t2.prototype.notifyBundleLoaded = function() {
      this.Zs();
    }, t2.prototype.shutdown = function() {
      this.started && (this.window.removeEventListener("storage", this.xs), this.removeItem(this.$s), this.started = false);
    }, t2.prototype.getItem = function(t3) {
      var e = this.storage.getItem(t3);
      return N2("SharedClientState", "READ", t3, e), e;
    }, t2.prototype.setItem = function(t3, e) {
      N2("SharedClientState", "SET", t3, e), this.storage.setItem(t3, e);
    }, t2.prototype.removeItem = function(t3) {
      N2("SharedClientState", "REMOVE", t3), this.storage.removeItem(t3);
    }, t2.prototype.Fs = function(t3) {
      var e = this, n2 = t3;
      if (n2.storageArea === this.storage) {
        if (N2("SharedClientState", "EVENT", n2.key, n2.newValue), n2.key === this.$s)
          return void A2("Received WebStorage notification for local change. Another client might have garbage-collected our state");
        this.Se.enqueueRetryable(function() {
          return __awaiter(e, void 0, void 0, function() {
            var t4, e2, r2, i, o, s;
            return __generator(this, function(u) {
              if (this.started) {
                if (null !== n2.key) {
                  if (this.Ls.test(n2.key)) {
                    if (null == n2.newValue)
                      return t4 = this.ti(n2.key), [2, this.ei(t4, null)];
                    if (e2 = this.ni(n2.key, n2.newValue))
                      return [2, this.ei(e2.clientId, e2)];
                  } else if (this.Bs.test(n2.key)) {
                    if (null !== n2.newValue && (r2 = this.si(n2.key, n2.newValue)))
                      return [2, this.ii(r2)];
                  } else if (this.qs.test(n2.key)) {
                    if (null !== n2.newValue && (i = this.ri(n2.key, n2.newValue)))
                      return [2, this.oi(i)];
                  } else if (n2.key === this.Us) {
                    if (null !== n2.newValue && (o = this.js(n2.newValue)))
                      return [2, this.Ws(o)];
                  } else if (n2.key === this.Ms)
                    (s = function(t5) {
                      var e3 = _.o;
                      if (null != t5)
                        try {
                          var n3 = JSON.parse(t5);
                          R2("number" == typeof n3), e3 = n3;
                        } catch (t6) {
                          A2("SharedClientState", "Failed to read sequence number from WebStorage", t6);
                        }
                      return e3;
                    }(n2.newValue)) !== _.o && this.sequenceNumberHandler(s);
                  else if (n2.key === this.Qs)
                    return [2, this.syncEngine.ci()];
                }
              } else
                this.Os.push(n2);
              return [
                2
                /*return*/
              ];
            });
          });
        });
      }
    }, Object.defineProperty(t2.prototype, "Js", {
      get: function() {
        return this.ks.get(this.Ns);
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.Ks = function() {
      this.setItem(this.$s, this.Js.Ss());
    }, t2.prototype.zs = function(t3, e, n2) {
      var r2 = new fo(this.currentUser, t3, e, n2), i = co(this.persistenceKey, this.currentUser, t3);
      this.setItem(i, r2.Ss());
    }, t2.prototype.Hs = function(t3) {
      var e = co(this.persistenceKey, this.currentUser, t3);
      this.removeItem(e);
    }, t2.prototype.Xs = function(t3) {
      var e = {
        clientId: this.Ns,
        onlineState: t3
      };
      this.storage.setItem(this.Us, JSON.stringify(e));
    }, t2.prototype.Ys = function(t3, e, n2) {
      var r2 = ho(this.persistenceKey, t3), i = new lo(t3, e, n2);
      this.setItem(r2, i.Ss());
    }, t2.prototype.Zs = function() {
      this.setItem(this.Qs, "value-not-used");
    }, /**
     * Parses a client state key in WebStorage. Returns null if the key does not
     * match the expected key format.
     */
    t2.prototype.ti = function(t3) {
      var e = this.Ls.exec(t3);
      return e ? e[1] : null;
    }, /**
     * Parses a client state in WebStorage. Returns 'null' if the value could not
     * be parsed.
     */
    t2.prototype.ni = function(t3, e) {
      var n2 = this.ti(t3);
      return po.Vs(n2, e);
    }, /**
     * Parses a mutation batch state in WebStorage. Returns 'null' if the value
     * could not be parsed.
     */
    t2.prototype.si = function(t3, e) {
      var n2 = this.Bs.exec(t3), r2 = Number(n2[1]), i = void 0 !== n2[2] ? n2[2] : null;
      return fo.Vs(new uo(i), r2, e);
    }, /**
     * Parses a query target state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */
    t2.prototype.ri = function(t3, e) {
      var n2 = this.qs.exec(t3), r2 = Number(n2[1]);
      return lo.Vs(r2, e);
    }, /**
     * Parses an online state from WebStorage. Returns 'null' if the value
     * could not be parsed.
     */
    t2.prototype.js = function(t3) {
      return yo.Vs(t3);
    }, t2.prototype.ii = function(t3) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(e) {
          return t3.user.uid === this.currentUser.uid ? [2, this.syncEngine.ui(t3.batchId, t3.state, t3.error)] : (N2("SharedClientState", "Ignoring mutation for non-active user " + t3.user.uid), [
            2
            /*return*/
          ]);
        });
      });
    }, t2.prototype.oi = function(t3) {
      return this.syncEngine.ai(t3.targetId, t3.state, t3.error);
    }, t2.prototype.ei = function(t3, e) {
      var n2 = this, r2 = e ? this.ks.insert(t3, e) : this.ks.remove(t3), i = this.Gs(this.ks), o = this.Gs(r2), s = [], u = [];
      return o.forEach(function(t4) {
        i.has(t4) || s.push(t4);
      }), i.forEach(function(t4) {
        o.has(t4) || u.push(t4);
      }), this.syncEngine.hi(s, u).then(function() {
        n2.ks = r2;
      });
    }, t2.prototype.Ws = function(t3) {
      this.ks.get(t3.clientId) && this.onlineStateHandler(t3.onlineState);
    }, t2.prototype.Gs = function(t3) {
      var e = rn();
      return t3.forEach(function(t4, n2) {
        e = e.unionWith(n2.activeTargetIds);
      }), e;
    }, t2;
  }()
);
var go = (
  /** @class */
  function() {
    function t2() {
      this.li = new vo(), this.fi = {}, this.onlineStateHandler = null, this.sequenceNumberHandler = null;
    }
    return t2.prototype.addPendingMutation = function(t3) {
    }, t2.prototype.updateMutationState = function(t3, e, n2) {
    }, t2.prototype.addLocalQueryTarget = function(t3) {
      return this.li.Ds(t3), this.fi[t3] || "not-current";
    }, t2.prototype.updateQueryState = function(t3, e, n2) {
      this.fi[t3] = e;
    }, t2.prototype.removeLocalQueryTarget = function(t3) {
      this.li.Cs(t3);
    }, t2.prototype.isLocalQueryTarget = function(t3) {
      return this.li.activeTargetIds.has(t3);
    }, t2.prototype.clearQueryState = function(t3) {
      delete this.fi[t3];
    }, t2.prototype.getAllActiveQueryTargets = function() {
      return this.li.activeTargetIds;
    }, t2.prototype.isActiveQueryTarget = function(t3) {
      return this.li.activeTargetIds.has(t3);
    }, t2.prototype.start = function() {
      return this.li = new vo(), Promise.resolve();
    }, t2.prototype.handleUserChange = function(t3, e, n2) {
    }, t2.prototype.setOnlineState = function(t3) {
    }, t2.prototype.shutdown = function() {
    }, t2.prototype.writeSequenceNumber = function(t3) {
    }, t2.prototype.notifyBundleLoaded = function() {
    }, t2;
  }()
);
var wo = (
  /** @class */
  function() {
    function t2() {
    }
    return t2.prototype.di = function(t3) {
    }, t2.prototype.shutdown = function() {
    }, t2;
  }()
);
var bo = (
  /** @class */
  function() {
    function t2() {
      var t3 = this;
      this.wi = function() {
        return t3._i();
      }, this.mi = function() {
        return t3.yi();
      }, this.gi = [], this.pi();
    }
    return t2.prototype.di = function(t3) {
      this.gi.push(t3);
    }, t2.prototype.shutdown = function() {
      window.removeEventListener("online", this.wi), window.removeEventListener("offline", this.mi);
    }, t2.prototype.pi = function() {
      window.addEventListener("online", this.wi), window.addEventListener("offline", this.mi);
    }, t2.prototype._i = function() {
      N2("ConnectivityMonitor", "Network connectivity changed: AVAILABLE");
      for (var t3 = 0, e = this.gi; t3 < e.length; t3++) {
        (0, e[t3])(
          0
          /* AVAILABLE */
        );
      }
    }, t2.prototype.yi = function() {
      N2("ConnectivityMonitor", "Network connectivity changed: UNAVAILABLE");
      for (var t3 = 0, e = this.gi; t3 < e.length; t3++) {
        (0, e[t3])(
          1
          /* UNAVAILABLE */
        );
      }
    }, // TODO(chenbrian): Consider passing in window either into this component or
    // here for testing via FakeWindow.
    /** Checks that all used attributes of window are available. */
    t2.yt = function() {
      return "undefined" != typeof window && void 0 !== window.addEventListener && void 0 !== window.removeEventListener;
    }, t2;
  }()
);
var Io = {
  BatchGetDocuments: "batchGet",
  Commit: "commit",
  RunQuery: "runQuery"
};
var _o = (
  /** @class */
  function() {
    function t2(t3) {
      this.Ei = t3.Ei, this.Ti = t3.Ti;
    }
    return t2.prototype.Ii = function(t3) {
      this.Ai = t3;
    }, t2.prototype.Ri = function(t3) {
      this.bi = t3;
    }, t2.prototype.onMessage = function(t3) {
      this.vi = t3;
    }, t2.prototype.close = function() {
      this.Ti();
    }, t2.prototype.send = function(t3) {
      this.Ei(t3);
    }, t2.prototype.Pi = function() {
      this.Ai();
    }, t2.prototype.Vi = function(t3) {
      this.bi(t3);
    }, t2.prototype.Si = function(t3) {
      this.vi(t3);
    }, t2;
  }()
);
var Eo = (
  /** @class */
  function(t2) {
    function u(e) {
      var n2 = this;
      return (n2 = t2.call(this, e) || this).forceLongPolling = e.forceLongPolling, n2.autoDetectLongPolling = e.autoDetectLongPolling, n2;
    }
    return __extends(u, t2), u.prototype.ki = function(t3, e, n2, r2) {
      return new Promise(function(i, o) {
        var s = new XhrIo();
        s.listenOnce(EventType.COMPLETE, function() {
          try {
            switch (s.getLastErrorCode()) {
              case ErrorCode.NO_ERROR:
                var e2 = s.getResponseJson();
                N2("Connection", "XHR received:", JSON.stringify(e2)), i(e2);
                break;
              case ErrorCode.TIMEOUT:
                N2("Connection", 'RPC "' + t3 + '" timed out'), o(new T2(E2.DEADLINE_EXCEEDED, "Request time out"));
                break;
              case ErrorCode.HTTP_ERROR:
                var n3 = s.getStatus();
                if (N2("Connection", 'RPC "' + t3 + '" failed with status:', n3, "response text:", s.getResponseText()), n3 > 0) {
                  var r3 = s.getResponseJson().error;
                  if (r3 && r3.status && r3.message) {
                    var u3 = function(t4) {
                      var e3 = t4.toLowerCase().replace(/_/g, "-");
                      return Object.values(E2).indexOf(e3) >= 0 ? e3 : E2.UNKNOWN;
                    }(r3.status);
                    o(new T2(u3, r3.message));
                  } else
                    o(new T2(E2.UNKNOWN, "Server responded with status " + s.getStatus()));
                } else
                  o(new T2(E2.UNAVAILABLE, "Connection failed."));
                break;
              default:
                C();
            }
          } finally {
            N2("Connection", 'RPC "' + t3 + '" completed.');
          }
        });
        var u2 = JSON.stringify(r2);
        s.send(e, "POST", u2, n2, 15);
      });
    }, u.prototype.$i = function(t3, u2) {
      var a = [this.Di, "/", "google.firestore.v1.Firestore", "/", t3, "/channel"], c = createWebChannelTransport(), h2 = getStatEventTarget(), f = {
        // Required for backend stickiness, routing behavior is based on this
        // parameter.
        httpSessionIdParam: "gsessionid",
        initMessageHeaders: {},
        messageUrlParams: {
          // This param is used to improve routing and project isolation by the
          // backend and must be included in every request.
          database: "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database
        },
        sendRawJson: true,
        supportsCrossDomainXhr: true,
        internalChannelParams: {
          // Override the default timeout (randomized between 10-20 seconds) since
          // a large write batch on a slow internet connection may take a long
          // time to send to the backend. Rather than have WebChannel impose a
          // tight timeout which could lead to infinite timeouts and retries, we
          // set it very large (5-10 minutes) and rely on the browser's builtin
          // timeouts to kick in if the request isn't working.
          forwardChannelRequestTimeoutMs: 6e5
        },
        forceLongPolling: this.forceLongPolling,
        detectBufferingProxy: this.autoDetectLongPolling
      };
      this.Fi(f.initMessageHeaders, u2), // Sending the custom headers we just added to request.initMessageHeaders
      // (Authorization, etc.) will trigger the browser to make a CORS preflight
      // request because the XHR will no longer meet the criteria for a "simple"
      // CORS request:
      // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
      // Therefore to avoid the CORS preflight request (an extra network
      // roundtrip), we use the httpHeadersOverwriteParam option to specify that
      // the headers should instead be encoded into a special "$httpHeaders" query
      // parameter, which is recognized by the webchannel backend. This is
      // formally defined here:
      // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
      // TODO(b/145624756): There is a backend bug where $httpHeaders isn't respected if the request
      // doesn't have an Origin header. So we have to exclude a few browser environments that are
      // known to (sometimes) not include an Origin. See
      // https://github.com/firebase/firebase-js-sdk/issues/1491.
      isMobileCordova() || isReactNative() || isElectron() || isIE() || isUWP() || isBrowserExtension() || (f.httpHeadersOverwriteParam = "$httpHeaders");
      var l = a.join("");
      N2("Connection", "Creating WebChannel: " + l, f);
      var g = c.createWebChannel(l, f), w2 = false, b = false, I2 = new _o({
        Ei: function(t4) {
          b ? N2("Connection", "Not sending because WebChannel is closed:", t4) : (w2 || (N2("Connection", "Opening WebChannel transport."), g.open(), w2 = true), N2("Connection", "WebChannel sending:", t4), g.send(t4));
        },
        Ti: function() {
          return g.close();
        }
      }), _2 = function(t4, e, n2) {
        t4.listen(e, function(t5) {
          try {
            n2(t5);
          } catch (t6) {
            setTimeout(function() {
              throw t6;
            }, 0);
          }
        });
      };
      return _2(g, WebChannel.EventType.OPEN, function() {
        b || N2("Connection", "WebChannel transport opened.");
      }), _2(g, WebChannel.EventType.CLOSE, function() {
        b || (b = true, N2("Connection", "WebChannel transport closed"), I2.Vi());
      }), _2(g, WebChannel.EventType.ERROR, function(t4) {
        b || (b = true, k2("Connection", "WebChannel transport errored:", t4), I2.Vi(new T2(E2.UNAVAILABLE, "The operation could not be completed")));
      }), _2(g, WebChannel.EventType.MESSAGE, function(t4) {
        var e;
        if (!b) {
          var n2 = t4.data[0];
          R2(!!n2);
          var r2 = n2, i = r2.error || (null === (e = r2[0]) || void 0 === e ? void 0 : e.error);
          if (i) {
            N2("Connection", "WebChannel received error:", i);
            var o = i.status, s = (
              /**
              * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
              *
              * @returns The Code equivalent to the given status string or undefined if
              *     there is no match.
              */
              function(t5) {
                var e2 = Me[t5];
                if (void 0 !== e2)
                  return je(e2);
              }(o)
            ), u3 = i.message;
            void 0 === s && (s = E2.INTERNAL, u3 = "Unknown error status: " + o + " with message " + i.message), // Mark closed so no further events are propagated
            b = true, I2.Vi(new T2(s, u3)), g.close();
          } else
            N2("Connection", "WebChannel received:", n2), I2.Si(n2);
        }
      }), _2(h2, Event.STAT_EVENT, function(t4) {
        t4.stat === Stat.PROXY ? N2("Connection", "Detected buffering proxy") : t4.stat === Stat.NOPROXY && N2("Connection", "Detected no buffering proxy");
      }), setTimeout(function() {
        I2.Pi();
      }, 0), I2;
    }, u;
  }(
    /** @class */
    function() {
      function t2(t3) {
        this.databaseInfo = t3, this.databaseId = t3.databaseId;
        var e = t3.ssl ? "https" : "http";
        this.Di = e + "://" + t3.host, this.Ci = "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database + "/documents";
      }
      return t2.prototype.Ni = function(t3, e, n2, r2) {
        var i = this.xi(t3, e);
        N2("RestConnection", "Sending: ", i, n2);
        var o = {};
        return this.Fi(o, r2), this.ki(t3, i, o, n2).then(function(t4) {
          return N2("RestConnection", "Received: ", t4), t4;
        }, function(e2) {
          throw k2("RestConnection", t3 + " failed with error: ", e2, "url: ", i, "request:", n2), e2;
        });
      }, t2.prototype.Oi = function(t3, e, n2, r2) {
        return this.Ni(t3, e, n2, r2);
      }, /**
       * Modifies the headers for a request, adding any authorization token if
       * present and any additional headers for the request.
       */
      t2.prototype.Fi = function(t3, e) {
        if (t3["X-Goog-Api-Client"] = "gl-js/ fire/8.3.3", t3["X-Firebase-GMPID"] = this.databaseInfo.appId, // Content-Type: text/plain will avoid preflight requests which might
        // mess with CORS and redirects by proxies. If we add custom headers
        // we will need to change this code to potentially use the $httpOverwrite
        // parameter supported by ESF to avoid triggering preflight requests.
        t3["Content-Type"] = "text/plain", e)
          for (var n2 in e.authHeaders)
            e.authHeaders.hasOwnProperty(n2) && (t3[n2] = e.authHeaders[n2]);
      }, t2.prototype.xi = function(t3, e) {
        var n2 = Io[t3];
        return this.Di + "/v1/" + e + ":" + n2;
      }, t2;
    }()
  )
);
function To() {
  return "undefined" != typeof window ? window : null;
}
function So() {
  return "undefined" != typeof document ? document : null;
}
function Do(t2) {
  return new vn(
    t2,
    /* useProto3Json= */
    true
  );
}
var No = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i) {
      void 0 === n2 && (n2 = 1e3), void 0 === r2 && (r2 = 1.5), void 0 === i && (i = 6e4), this.Se = t3, this.timerId = e, this.Mi = n2, this.Li = r2, this.Bi = i, this.qi = 0, this.Ui = null, /** The last backoff attempt, as epoch milliseconds. */
      this.Qi = Date.now(), this.reset();
    }
    return t2.prototype.reset = function() {
      this.qi = 0;
    }, /**
     * Resets the backoff delay to the maximum delay (e.g. for use after a
     * RESOURCE_EXHAUSTED error).
     */
    t2.prototype.Ki = function() {
      this.qi = this.Bi;
    }, /**
     * Returns a promise that resolves after currentDelayMs, and increases the
     * delay for any subsequent attempts. If there was a pending backoff operation
     * already, it will be canceled.
     */
    t2.prototype.ji = function(t3) {
      var e = this;
      this.cancel();
      var n2 = Math.floor(this.qi + this.Wi()), r2 = Math.max(0, Date.now() - this.Qi), i = Math.max(0, n2 - r2);
      i > 0 && N2("ExponentialBackoff", "Backing off for " + i + " ms (base delay: " + this.qi + " ms, delay with jitter: " + n2 + " ms, last attempt: " + r2 + " ms ago)"), this.Ui = this.Se.enqueueAfterDelay(this.timerId, i, function() {
        return e.Qi = Date.now(), t3();
      }), // Apply backoff factor to determine next delay and ensure it is within
      // bounds.
      this.qi *= this.Li, this.qi < this.Mi && (this.qi = this.Mi), this.qi > this.Bi && (this.qi = this.Bi);
    }, t2.prototype.Gi = function() {
      null !== this.Ui && (this.Ui.skipDelay(), this.Ui = null);
    }, t2.prototype.cancel = function() {
      null !== this.Ui && (this.Ui.cancel(), this.Ui = null);
    }, /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */
    t2.prototype.Wi = function() {
      return (Math.random() - 0.5) * this.qi;
    }, t2;
  }()
);
var Ao = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i, o) {
      this.Se = t3, this.zi = n2, this.Hi = r2, this.Ji = i, this.listener = o, this.state = 0, /**
           * A close count that's incremented every time the stream is closed; used by
           * getCloseGuardedDispatcher() to invalidate callbacks that happen after
           * close.
           */
      this.Yi = 0, this.Xi = null, this.stream = null, this.Zi = new No(t3, e);
    }
    return t2.prototype.tr = function() {
      return 1 === this.state || 2 === this.state || 4 === this.state;
    }, /**
     * Returns true if the underlying RPC is open (the onOpen() listener has been
     * called) and the stream is ready for outbound requests.
     */
    t2.prototype.er = function() {
      return 2 === this.state;
    }, /**
     * Starts the RPC. Only allowed if isStarted() returns false. The stream is
     * not immediately ready for use: onOpen() will be invoked when the RPC is
     * ready for outbound requests, at which point isOpen() will return true.
     *
     * When start returns, isStarted() will return true.
     */
    t2.prototype.start = function() {
      3 !== this.state ? this.auth() : this.nr();
    }, /**
     * Stops the RPC. This call is idempotent and allowed regardless of the
     * current isStarted() state.
     *
     * When stop returns, isStarted() and isOpen() will both return false.
     */
    t2.prototype.stop = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          switch (t3.label) {
            case 0:
              return this.tr() ? [4, this.close(
                0
                /* Initial */
              )] : [3, 2];
            case 1:
              t3.sent(), t3.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, /**
     * After an error the stream will usually back off on the next attempt to
     * start it. If the error warrants an immediate restart of the stream, the
     * sender can use this to indicate that the receiver should not back off.
     *
     * Each error will call the onClose() listener. That function can decide to
     * inhibit backoff if required.
     */
    t2.prototype.sr = function() {
      this.state = 0, this.Zi.reset();
    }, /**
     * Marks this stream as idle. If no further actions are performed on the
     * stream for one minute, the stream will automatically close itself and
     * notify the stream's onClose() handler with Status.OK. The stream will then
     * be in a !isStarted() state, requiring the caller to start the stream again
     * before further use.
     *
     * Only streams that are in state 'Open' can be marked idle, as all other
     * states imply pending network operations.
     */
    t2.prototype.ir = function() {
      var t3 = this;
      this.er() && null === this.Xi && (this.Xi = this.Se.enqueueAfterDelay(this.zi, 6e4, function() {
        return t3.rr();
      }));
    }, /** Sends a message to the underlying stream. */
    t2.prototype.cr = function(t3) {
      this.ur(), this.stream.send(t3);
    }, /** Called by the idle timer when the stream should close due to inactivity. */
    t2.prototype.rr = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          return this.er() ? [2, this.close(
            0
            /* Initial */
          )] : [
            2
            /*return*/
          ];
        });
      });
    }, /** Marks the stream as active again. */
    t2.prototype.ur = function() {
      this.Xi && (this.Xi.cancel(), this.Xi = null);
    }, /**
     * Closes the stream and cleans up as necessary:
     *
     * * closes the underlying GRPC stream;
     * * calls the onClose handler with the given 'error';
     * * sets internal stream state to 'finalState';
     * * adjusts the backoff timer based on the error
     *
     * A new stream can be opened by calling start().
     *
     * @param finalState - the intended state of the stream after closing.
     * @param error - the error the connection was closed with.
     */
    t2.prototype.close = function(t3, e) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              return this.ur(), this.Zi.cancel(), // Invalidates any stream-related callbacks (e.g. from auth or the
              // underlying stream), guaranteeing they won't execute.
              this.Yi++, 3 !== t3 ? (
                // If this is an intentional close ensure we don't delay our next connection attempt.
                this.Zi.reset()
              ) : e && e.code === E2.RESOURCE_EXHAUSTED ? (
                // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
                (A2(e.toString()), A2("Using maximum backoff delay to prevent overloading the backend."), this.Zi.Ki())
              ) : e && e.code === E2.UNAUTHENTICATED && // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
              // just expired.
              this.Ji.invalidateToken(), // Clean up the underlying stream because we are no longer interested in events.
              null !== this.stream && (this.ar(), this.stream.close(), this.stream = null), // This state must be assigned before calling onClose() to allow the callback to
              // inhibit backoff or otherwise manipulate the state in its non-started state.
              this.state = t3, [4, this.listener.Ri(e)];
            case 1:
              return n2.sent(), [
                2
                /*return*/
              ];
          }
        });
      });
    }, /**
     * Can be overridden to perform additional cleanup before the stream is closed.
     * Calling super.tearDown() is not required.
     */
    t2.prototype.ar = function() {
    }, t2.prototype.auth = function() {
      var t3 = this;
      this.state = 1;
      var e = this.hr(this.Yi), n2 = this.Yi;
      this.Ji.getToken().then(function(e2) {
        t3.Yi === n2 && // Normally we'd have to schedule the callback on the AsyncQueue.
        // However, the following calls are safe to be called outside the
        // AsyncQueue since they don't chain asynchronous calls
        t3.lr(e2);
      }, function(n3) {
        e(function() {
          var e2 = new T2(E2.UNKNOWN, "Fetching auth token failed: " + n3.message);
          return t3.dr(e2);
        });
      });
    }, t2.prototype.lr = function(t3) {
      var e = this, n2 = this.hr(this.Yi);
      this.stream = this.wr(t3), this.stream.Ii(function() {
        n2(function() {
          return e.state = 2, e.listener.Ii();
        });
      }), this.stream.Ri(function(t4) {
        n2(function() {
          return e.dr(t4);
        });
      }), this.stream.onMessage(function(t4) {
        n2(function() {
          return e.onMessage(t4);
        });
      });
    }, t2.prototype.nr = function() {
      var t3 = this;
      this.state = 4, this.Zi.ji(function() {
        return __awaiter(t3, void 0, void 0, function() {
          return __generator(this, function(t4) {
            return this.state = 0, this.start(), [
              2
              /*return*/
            ];
          });
        });
      });
    }, // Visible for tests
    t2.prototype.dr = function(t3) {
      return N2("PersistentStream", "close with error: " + t3), this.stream = null, this.close(3, t3);
    }, /**
     * Returns a "dispatcher" function that dispatches operations onto the
     * AsyncQueue but only runs them if closeCount remains unchanged. This allows
     * us to turn auth / stream callbacks into no-ops if the stream is closed /
     * re-opened, etc.
     */
    t2.prototype.hr = function(t3) {
      var e = this;
      return function(n2) {
        e.Se.enqueueAndForget(function() {
          return e.Yi === t3 ? n2() : (N2("PersistentStream", "stream callback skipped by getCloseGuardedDispatcher."), Promise.resolve());
        });
      };
    }, t2;
  }()
);
var ko = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2, i, o) {
      var s = this;
      return (s = t2.call(this, e2, "listen_stream_connection_backoff", "listen_stream_idle", n2, r2, o) || this).R = i, s;
    }
    return __extends(e, t2), e.prototype.wr = function(t3) {
      return this.Hi.$i("Listen", t3);
    }, e.prototype.onMessage = function(t3) {
      this.Zi.reset();
      var e2 = function(t4, e3) {
        var n3;
        if ("targetChange" in e3) {
          e3.targetChange;
          var r2 = function(t5) {
            return "NO_CHANGE" === t5 ? 0 : "ADD" === t5 ? 1 : "REMOVE" === t5 ? 2 : "CURRENT" === t5 ? 3 : "RESET" === t5 ? 4 : C();
          }(e3.targetChange.targetChangeType || "NO_CHANGE"), i = e3.targetChange.targetIds || [], o = function(t5, e4) {
            return t5.I ? (R2(void 0 === e4 || "string" == typeof e4), Y2.fromBase64String(e4 || "")) : (R2(void 0 === e4 || e4 instanceof Uint8Array), Y2.fromUint8Array(e4 || new Uint8Array()));
          }(t4, e3.targetChange.resumeToken), s = (u = e3.targetChange.cause) && function(t5) {
            var e4 = void 0 === t5.code ? E2.UNKNOWN : je(t5.code);
            return new T2(e4, t5.message || "");
          }(u);
          n3 = new cn(r2, i, o, s || null);
        } else if ("documentChange" in e3) {
          e3.documentChange, (r2 = e3.documentChange).document, r2.document.name, r2.document.updateTime, i = Tn(t4, r2.document.name), o = bn(r2.document.updateTime);
          var u = new bt({
            mapValue: {
              fields: r2.document.fields
            }
          }), a = (s = _t.newFoundDocument(i, o, u), r2.targetIds || []), c = r2.removedTargetIds || [];
          n3 = new un(a, c, s.key, s);
        } else if ("documentDelete" in e3)
          e3.documentDelete, (r2 = e3.documentDelete).document, i = Tn(t4, r2.document), o = r2.readTime ? bn(r2.readTime) : U2.min(), u = _t.newNoDocument(i, o), s = r2.removedTargetIds || [], n3 = new un([], s, u.key, u);
        else if ("documentRemove" in e3)
          e3.documentRemove, (r2 = e3.documentRemove).document, i = Tn(t4, r2.document), o = r2.removedTargetIds || [], n3 = new un([], o, i, null);
        else {
          if (!("filter" in e3))
            return C();
          e3.filter;
          var h2 = e3.filter;
          h2.targetId, r2 = h2.count || 0, i = new Ue(r2), o = h2.targetId, n3 = new an(o, i);
        }
        return n3;
      }(this.R, t3), n2 = function(t4) {
        if (!("targetChange" in t4))
          return U2.min();
        var e3 = t4.targetChange;
        return e3.targetIds && e3.targetIds.length ? U2.min() : e3.readTime ? bn(e3.readTime) : U2.min();
      }(t3);
      return this.listener._r(e2, n2);
    }, /**
     * Registers interest in the results of the given target. If the target
     * includes a resumeToken it will be included in the request. Results that
     * affect the target will be streamed back as WatchChange messages that
     * reference the targetId.
     */
    e.prototype.mr = function(t3) {
      var e2 = {};
      e2.database = Nn(this.R), e2.addTarget = function(t4, e3) {
        var n3, r2 = e3.target;
        return (n3 = Nt(r2) ? {
          documents: On(t4, r2)
        } : {
          query: Ln(t4, r2)
        }).targetId = e3.targetId, e3.resumeToken.approximateByteSize() > 0 ? n3.resumeToken = gn(t4, e3.resumeToken) : e3.snapshotVersion.compareTo(U2.min()) > 0 && // TODO(wuandy): Consider removing above check because it is most likely true.
        // Right now, many tests depend on this behaviour though (leaving min() out
        // of serialization).
        (n3.readTime = mn(t4, e3.snapshotVersion.toTimestamp())), n3;
      }(this.R, t3);
      var n2 = function(t4, e3) {
        var n3 = function(t5, e4) {
          switch (e4) {
            case 0:
              return null;
            case 1:
              return "existence-filter-mismatch";
            case 2:
              return "limbo-document";
            default:
              return C();
          }
        }(0, e3.purpose);
        return null == n3 ? null : {
          "goog-listen-tags": n3
        };
      }(this.R, t3);
      n2 && (e2.labels = n2), this.cr(e2);
    }, /**
     * Unregisters interest in the results of the target associated with the
     * given targetId.
     */
    e.prototype.yr = function(t3) {
      var e2 = {};
      e2.database = Nn(this.R), e2.removeTarget = t3, this.cr(e2);
    }, e;
  }(Ao)
);
var xo = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2, i, o) {
      var s = this;
      return (s = t2.call(this, e2, "write_stream_connection_backoff", "write_stream_idle", n2, r2, o) || this).R = i, s.gr = false, s;
    }
    return __extends(e, t2), Object.defineProperty(e.prototype, "pr", {
      /**
       * Tracks whether or not a handshake has been successfully exchanged and
       * the stream is ready to accept mutations.
       */
      get: function() {
        return this.gr;
      },
      enumerable: false,
      configurable: true
    }), // Override of PersistentStream.start
    e.prototype.start = function() {
      this.gr = false, this.lastStreamToken = void 0, t2.prototype.start.call(this);
    }, e.prototype.ar = function() {
      this.gr && this.Er([]);
    }, e.prototype.wr = function(t3) {
      return this.Hi.$i("Write", t3);
    }, e.prototype.onMessage = function(t3) {
      if (
        // Always capture the last stream token.
        R2(!!t3.streamToken), this.lastStreamToken = t3.streamToken, this.gr
      ) {
        this.Zi.reset();
        var e2 = function(t4, e3) {
          return t4 && t4.length > 0 ? (R2(void 0 !== e3), t4.map(function(t5) {
            return function(t6, e4) {
              var n3 = t6.updateTime ? bn(t6.updateTime) : bn(e4);
              return n3.isEqual(U2.min()) && // The Firestore Emulator currently returns an update time of 0 for
              // deletes of non-existing documents (rather than null). This breaks the
              // test "get deleted doc while offline with source=cache" as NoDocuments
              // with version 0 are filtered by IndexedDb's RemoteDocumentCache.
              // TODO(#2149): Remove this when Emulator is fixed
              (n3 = bn(e4)), new _e(n3, t6.transformResults || []);
            }(t5, e3);
          })) : [];
        }(t3.writeResults, t3.commitTime), n2 = bn(t3.commitTime);
        return this.listener.Tr(n2, e2);
      }
      return R2(!t3.writeResults || 0 === t3.writeResults.length), this.gr = true, this.listener.Ir();
    }, /**
     * Sends an initial streamToken to the server, performing the handshake
     * required to make the StreamingWrite RPC work. Subsequent
     * calls should wait until onHandshakeComplete was called.
     */
    e.prototype.Ar = function() {
      var t3 = {};
      t3.database = Nn(this.R), this.cr(t3);
    }, /** Sends a group of mutations to the Firestore backend to apply. */
    e.prototype.Er = function(t3) {
      var e2 = this, n2 = {
        streamToken: this.lastStreamToken,
        writes: t3.map(function(t4) {
          return Cn(e2.R, t4);
        })
      };
      this.cr(n2);
    }, e;
  }(Ao)
);
var Co = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2) {
      var i = this;
      return (i = t2.call(this) || this).credentials = e2, i.Hi = n2, i.R = r2, i.Rr = false, i;
    }
    return __extends(e, t2), e.prototype.br = function() {
      if (this.Rr)
        throw new T2(E2.FAILED_PRECONDITION, "The client has already been terminated.");
    }, /** Gets an auth token and invokes the provided RPC. */
    e.prototype.Ni = function(t3, e2, n2) {
      var r2 = this;
      return this.br(), this.credentials.getToken().then(function(i) {
        return r2.Hi.Ni(t3, e2, n2, i);
      }).catch(function(t4) {
        throw t4.code === E2.UNAUTHENTICATED && r2.credentials.invalidateToken(), t4;
      });
    }, /** Gets an auth token and invokes the provided RPC with streamed results. */
    e.prototype.Oi = function(t3, e2, n2) {
      var r2 = this;
      return this.br(), this.credentials.getToken().then(function(i) {
        return r2.Hi.Oi(t3, e2, n2, i);
      }).catch(function(t4) {
        throw t4.code === E2.UNAUTHENTICATED && r2.credentials.invalidateToken(), t4;
      });
    }, e.prototype.terminate = function() {
      this.Rr = false;
    }, e;
  }(function() {
  })
);
var Ro = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.asyncQueue = t3, this.onlineStateHandler = e, /** The current OnlineState. */
      this.state = "Unknown", /**
           * A count of consecutive failures to open the stream. If it reaches the
           * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
           * Offline.
           */
      this.vr = 0, /**
           * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
           * transition from OnlineState.Unknown to OnlineState.Offline without waiting
           * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
           */
      this.Pr = null, /**
           * Whether the client should log a warning message if it fails to connect to
           * the backend (initially true, cleared after a successful stream, or if we've
           * logged the message already).
           */
      this.Vr = true;
    }
    return t2.prototype.Sr = function() {
      var t3 = this;
      0 === this.vr && (this.Dr(
        "Unknown"
        /* Unknown */
      ), this.Pr = this.asyncQueue.enqueueAfterDelay("online_state_timeout", 1e4, function() {
        return t3.Pr = null, t3.Cr("Backend didn't respond within 10 seconds."), t3.Dr(
          "Offline"
          /* Offline */
        ), Promise.resolve();
      }));
    }, /**
     * Updates our OnlineState as appropriate after the watch stream reports a
     * failure. The first failure moves us to the 'Unknown' state. We then may
     * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
     * actually transition to the 'Offline' state.
     */
    t2.prototype.Nr = function(t3) {
      "Online" === this.state ? this.Dr(
        "Unknown"
        /* Unknown */
      ) : (this.vr++, this.vr >= 1 && (this.Fr(), this.Cr("Connection failed 1 times. Most recent error: " + t3.toString()), this.Dr(
        "Offline"
        /* Offline */
      )));
    }, /**
     * Explicitly sets the OnlineState to the specified state.
     *
     * Note that this resets our timers / failure counters, etc. used by our
     * Offline heuristics, so must not be used in place of
     * handleWatchStreamStart() and handleWatchStreamFailure().
     */
    t2.prototype.set = function(t3) {
      this.Fr(), this.vr = 0, "Online" === t3 && // We've connected to watch at least once. Don't warn the developer
      // about being offline going forward.
      (this.Vr = false), this.Dr(t3);
    }, t2.prototype.Dr = function(t3) {
      t3 !== this.state && (this.state = t3, this.onlineStateHandler(t3));
    }, t2.prototype.Cr = function(t3) {
      var e = "Could not reach Cloud Firestore backend. " + t3 + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
      this.Vr ? (A2(e), this.Vr = false) : N2("OnlineStateTracker", e);
    }, t2.prototype.Fr = function() {
      null !== this.Pr && (this.Pr.cancel(), this.Pr = null);
    }, t2;
  }()
);
var Oo = function(t2, e, n2, r2, i) {
  var o = this;
  this.localStore = t2, this.datastore = e, this.asyncQueue = n2, this.remoteSyncer = {}, /**
           * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
           * LocalStore via fillWritePipeline() and have or will send to the write
           * stream.
           *
           * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
           * restart the write stream. When the stream is established the writes in the
           * pipeline will be sent in order.
           *
           * Writes remain in writePipeline until they are acknowledged by the backend
           * and thus will automatically be re-sent if the stream is interrupted /
           * restarted before they're acknowledged.
           *
           * Write responses from the backend are linked to their originating request
           * purely based on order, and so we can just shift() writes from the front of
           * the writePipeline as we receive responses.
           */
  this.kr = [], /**
           * A mapping of watched targets that the client cares about tracking and the
           * user has explicitly called a 'listen' for this target.
           *
           * These targets may or may not have been sent to or acknowledged by the
           * server. On re-establishing the listen stream, these targets should be sent
           * to the server. The targets removed with unlistens are removed eagerly
           * without waiting for confirmation from the listen stream.
           */
  this.Or = /* @__PURE__ */ new Map(), /**
           * A set of reasons for why the RemoteStore may be offline. If empty, the
           * RemoteStore may start its network connections.
           */
  this.$r = /* @__PURE__ */ new Set(), /**
           * Event handlers that get called when the network is disabled or enabled.
           *
           * PORTING NOTE: These functions are used on the Web client to create the
           * underlying streams (to support tree-shakeable streams). On Android and iOS,
           * the streams are created during construction of RemoteStore.
           */
  this.Mr = [], this.Lr = i, this.Lr.di(function(t3) {
    n2.enqueueAndForget(function() {
      return __awaiter(o, void 0, void 0, function() {
        return __generator(this, function(t4) {
          switch (t4.label) {
            case 0:
              return jo(this) ? (N2("RemoteStore", "Restarting streams for network reachability change."), [4, function(t5) {
                return __awaiter(this, void 0, void 0, function() {
                  var e2;
                  return __generator(this, function(n3) {
                    switch (n3.label) {
                      case 0:
                        return (e2 = O2(t5)).$r.add(
                          4
                          /* ConnectivityChange */
                        ), [4, Po(e2)];
                      case 1:
                        return n3.sent(), e2.Br.set(
                          "Unknown"
                          /* Unknown */
                        ), e2.$r.delete(
                          4
                          /* ConnectivityChange */
                        ), [4, Lo(e2)];
                      case 2:
                        return n3.sent(), [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              }(this)]) : [3, 2];
            case 1:
              t4.sent(), t4.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    });
  }), this.Br = new Ro(n2, r2);
};
function Lo(t2) {
  return __awaiter(this, void 0, void 0, function() {
    var e, n2;
    return __generator(this, function(r2) {
      switch (r2.label) {
        case 0:
          if (!jo(t2))
            return [3, 4];
          e = 0, n2 = t2.Mr, r2.label = 1;
        case 1:
          return e < n2.length ? [4, (0, n2[e])(
            /* enabled= */
            true
          )] : [3, 4];
        case 2:
          r2.sent(), r2.label = 3;
        case 3:
          return e++, [3, 1];
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Po(t2) {
  return __awaiter(this, void 0, void 0, function() {
    var e, n2;
    return __generator(this, function(r2) {
      switch (r2.label) {
        case 0:
          e = 0, n2 = t2.Mr, r2.label = 1;
        case 1:
          return e < n2.length ? [4, (0, n2[e])(
            /* enabled= */
            false
          )] : [3, 4];
        case 2:
          r2.sent(), r2.label = 3;
        case 3:
          return e++, [3, 1];
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Mo(t2, e) {
  var n2 = O2(t2);
  n2.Or.has(e.targetId) || // Mark this as something the client is currently listening for.
  (n2.Or.set(e.targetId, e), Bo(n2) ? (
    // The listen will be sent in onWatchStreamOpen
    Uo(n2)
  ) : rs(n2).er() && Vo(n2, e));
}
function Fo(t2, e) {
  var n2 = O2(t2), r2 = rs(n2);
  n2.Or.delete(e), r2.er() && qo(n2, e), 0 === n2.Or.size && (r2.er() ? r2.ir() : jo(n2) && // Revert to OnlineState.Unknown if the watch stream is not open and we
  // have no listeners, since without any listens to send we cannot
  // confirm if the stream is healthy and upgrade to OnlineState.Online.
  n2.Br.set(
    "Unknown"
    /* Unknown */
  ));
}
function Vo(t2, e) {
  t2.qr.U(e.targetId), rs(t2).mr(e);
}
function qo(t2, e) {
  t2.qr.U(e), rs(t2).yr(e);
}
function Uo(t2) {
  t2.qr = new fn({
    getRemoteKeysForTarget: function(e) {
      return t2.remoteSyncer.getRemoteKeysForTarget(e);
    },
    lt: function(e) {
      return t2.Or.get(e) || null;
    }
  }), rs(t2).start(), t2.Br.Sr();
}
function Bo(t2) {
  return jo(t2) && !rs(t2).tr() && t2.Or.size > 0;
}
function jo(t2) {
  return 0 === O2(t2).$r.size;
}
function Ko(t2) {
  t2.qr = void 0;
}
function Go(t2) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(e) {
      return t2.Or.forEach(function(e2, n2) {
        Vo(t2, e2);
      }), [
        2
        /*return*/
      ];
    });
  });
}
function Qo(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(n2) {
      return Ko(t2), // If we still need the watch stream, retry the connection.
      Bo(t2) ? (t2.Br.Nr(e), Uo(t2)) : (
        // No need to restart watch stream because there are no active targets.
        // The online state is set to unknown because there is no active attempt
        // at establishing a connection
        t2.Br.set(
          "Unknown"
          /* Unknown */
        )
      ), [
        2
        /*return*/
      ];
    });
  });
}
function zo(t2, e, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2, i, o;
    return __generator(this, function(s) {
      switch (s.label) {
        case 0:
          if (t2.Br.set(
            "Online"
            /* Online */
          ), !(e instanceof cn && 2 === e.state && e.cause))
            return [3, 6];
          s.label = 1;
        case 1:
          return s.trys.push([1, 3, , 5]), [
            4,
            /** Handles an error on a target */
            function(t3, e2) {
              return __awaiter(this, void 0, void 0, function() {
                var n3, r3, i2, o2;
                return __generator(this, function(s2) {
                  switch (s2.label) {
                    case 0:
                      n3 = e2.cause, r3 = 0, i2 = e2.targetIds, s2.label = 1;
                    case 1:
                      return r3 < i2.length ? (o2 = i2[r3], t3.Or.has(o2) ? [4, t3.remoteSyncer.rejectListen(o2, n3)] : [3, 3]) : [3, 5];
                    case 2:
                      s2.sent(), t3.Or.delete(o2), t3.qr.removeTarget(o2), s2.label = 3;
                    case 3:
                      s2.label = 4;
                    case 4:
                      return r3++, [3, 1];
                    case 5:
                      return [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            }(t2, e)
          ];
        case 2:
          return s.sent(), [3, 5];
        case 3:
          return r2 = s.sent(), N2("RemoteStore", "Failed to remove targets %s: %s ", e.targetIds.join(","), r2), [4, Wo(t2, r2)];
        case 4:
          return s.sent(), [3, 5];
        case 5:
          return [3, 13];
        case 6:
          if (e instanceof un ? t2.qr.X(e) : e instanceof an ? t2.qr.rt(e) : t2.qr.et(e), n2.isEqual(U2.min()))
            return [3, 13];
          s.label = 7;
        case 7:
          return s.trys.push([7, 11, , 13]), [4, qi(t2.localStore)];
        case 8:
          return i = s.sent(), n2.compareTo(i) >= 0 ? [
            4,
            /**
             * Takes a batch of changes from the Datastore, repackages them as a
             * RemoteEvent, and passes that on to the listener, which is typically the
             * SyncEngine.
             */
            function(t3, e2) {
              var n3 = t3.qr.ut(e2);
              return n3.targetChanges.forEach(function(n4, r3) {
                if (n4.resumeToken.approximateByteSize() > 0) {
                  var i2 = t3.Or.get(r3);
                  i2 && t3.Or.set(r3, i2.withResumeToken(n4.resumeToken, e2));
                }
              }), // Re-establish listens for the targets that have been invalidated by
              // existence filter mismatches.
              n3.targetMismatches.forEach(function(e3) {
                var n4 = t3.Or.get(e3);
                if (n4) {
                  t3.Or.set(e3, n4.withResumeToken(Y2.EMPTY_BYTE_STRING, n4.snapshotVersion)), // Cause a hard reset by unwatching and rewatching immediately, but
                  // deliberately don't send a resume token so that we get a full update.
                  qo(t3, e3);
                  var r3 = new Cr(n4.target, e3, 1, n4.sequenceNumber);
                  Vo(t3, r3);
                }
              }), t3.remoteSyncer.applyRemoteEvent(n3);
            }(t2, n2)
          ] : [3, 10];
        case 9:
          s.sent(), s.label = 10;
        case 10:
          return [3, 13];
        case 11:
          return N2("RemoteStore", "Failed to raise snapshot:", o = s.sent()), [4, Wo(t2, o)];
        case 12:
          return s.sent(), [3, 13];
        case 13:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Wo(t2, e, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2 = this;
    return __generator(this, function(i) {
      switch (i.label) {
        case 0:
          if (!_r(e))
            throw e;
          return t2.$r.add(
            1
            /* IndexedDbFailed */
          ), [4, Po(t2)];
        case 1:
          return i.sent(), t2.Br.set(
            "Offline"
            /* Offline */
          ), n2 || // Use a simple read operation to determine if IndexedDB recovered.
          // Ideally, we would expose a health check directly on SimpleDb, but
          // RemoteStore only has access to persistence through LocalStore.
          (n2 = function() {
            return qi(t2.localStore);
          }), // Probe IndexedDB periodically and re-enable network
          t2.asyncQueue.enqueueRetryable(function() {
            return __awaiter(r2, void 0, void 0, function() {
              return __generator(this, function(e2) {
                switch (e2.label) {
                  case 0:
                    return N2("RemoteStore", "Retrying IndexedDB access"), [4, n2()];
                  case 1:
                    return e2.sent(), t2.$r.delete(
                      1
                      /* IndexedDbFailed */
                    ), [4, Lo(t2)];
                  case 2:
                    return e2.sent(), [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }), [
            2
            /*return*/
          ];
      }
    });
  });
}
function Ho(t2, e) {
  return e().catch(function(n2) {
    return Wo(t2, n2, e);
  });
}
function Yo(t2) {
  return __awaiter(this, void 0, void 0, function() {
    var e, n2, r2, i, o;
    return __generator(this, function(s) {
      switch (s.label) {
        case 0:
          e = O2(t2), n2 = is(e), r2 = e.kr.length > 0 ? e.kr[e.kr.length - 1].batchId : -1, s.label = 1;
        case 1:
          if (!/**
          * Returns true if we can add to the write pipeline (i.e. the network is
          * enabled and the write pipeline is not full).
          */
          function(t3) {
            return jo(t3) && t3.kr.length < 10;
          }(e))
            return [3, 7];
          s.label = 2;
        case 2:
          return s.trys.push([2, 4, , 6]), [4, ji(e.localStore, r2)];
        case 3:
          return null === (i = s.sent()) ? (0 === e.kr.length && n2.ir(), [3, 7]) : (r2 = i.batchId, function(t3, e2) {
            t3.kr.push(e2);
            var n3 = is(t3);
            n3.er() && n3.pr && n3.Er(e2.mutations);
          }(e, i), [3, 6]);
        case 4:
          return o = s.sent(), [4, Wo(e, o)];
        case 5:
          return s.sent(), [3, 6];
        case 6:
          return [3, 1];
        case 7:
          return Xo(e) && $o(e), [
            2
            /*return*/
          ];
      }
    });
  });
}
function Xo(t2) {
  return jo(t2) && !is(t2).tr() && t2.kr.length > 0;
}
function $o(t2) {
  is(t2).start();
}
function Jo(t2) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(e) {
      return is(t2).Ar(), [
        2
        /*return*/
      ];
    });
  });
}
function Zo(t2) {
  return __awaiter(this, void 0, void 0, function() {
    var e, n2, r2, i;
    return __generator(this, function(o) {
      for (e = is(t2), n2 = 0, r2 = t2.kr; n2 < r2.length; n2++)
        i = r2[n2], e.Er(i.mutations);
      return [
        2
        /*return*/
      ];
    });
  });
}
function ts(t2, e, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2, i;
    return __generator(this, function(o) {
      switch (o.label) {
        case 0:
          return r2 = t2.kr.shift(), i = xr.from(r2, e, n2), [4, Ho(t2, function() {
            return t2.remoteSyncer.applySuccessfulWrite(i);
          })];
        case 1:
          return o.sent(), [4, Yo(t2)];
        case 2:
          return o.sent(), [
            2
            /*return*/
          ];
      }
    });
  });
}
function es(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(n2) {
      switch (n2.label) {
        case 0:
          return e && is(t2).pr ? [4, function(t3, e2) {
            return __awaiter(this, void 0, void 0, function() {
              var n3, r2;
              return __generator(this, function(i) {
                switch (i.label) {
                  case 0:
                    return Be(r2 = e2.code) && r2 !== E2.ABORTED ? (n3 = t3.kr.shift(), // In this case it's also unlikely that the server itself is melting
                    // down -- this was just a bad request so inhibit backoff on the next
                    // restart.
                    is(t3).sr(), [4, Ho(t3, function() {
                      return t3.remoteSyncer.rejectFailedWrite(n3.batchId, e2);
                    })]) : [3, 3];
                  case 1:
                    return i.sent(), [4, Yo(t3)];
                  case 2:
                    i.sent(), i.label = 3;
                  case 3:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }(t2, e)] : [3, 2];
        case 1:
          n2.sent(), n2.label = 2;
        case 2:
          return Xo(t2) && $o(t2), [
            2
            /*return*/
          ];
      }
    });
  });
}
function ns(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2;
    return __generator(this, function(i) {
      switch (i.label) {
        case 0:
          return n2 = O2(t2), e ? (n2.$r.delete(
            2
            /* IsSecondary */
          ), [4, Lo(n2)]) : [3, 2];
        case 1:
          return i.sent(), [3, 5];
        case 2:
          return (r2 = e) ? [3, 4] : (n2.$r.add(
            2
            /* IsSecondary */
          ), [4, Po(n2)]);
        case 3:
          i.sent(), r2 = n2.Br.set(
            "Unknown"
            /* Unknown */
          ), i.label = 4;
        case 4:
          r2, i.label = 5;
        case 5:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function rs(t2) {
  var e = this;
  return t2.Ur || // Create stream (but note that it is not started yet).
  (t2.Ur = function(t3, e2, n2) {
    var r2 = O2(t3);
    return r2.br(), new ko(e2, r2.Hi, r2.credentials, r2.R, n2);
  }(t2.datastore, t2.asyncQueue, {
    Ii: Go.bind(null, t2),
    Ri: Qo.bind(null, t2),
    _r: zo.bind(null, t2)
  }), t2.Mr.push(function(n2) {
    return __awaiter(e, void 0, void 0, function() {
      return __generator(this, function(e2) {
        switch (e2.label) {
          case 0:
            return n2 ? (t2.Ur.sr(), Bo(t2) ? Uo(t2) : t2.Br.set(
              "Unknown"
              /* Unknown */
            ), [3, 3]) : [3, 1];
          case 1:
            return [4, t2.Ur.stop()];
          case 2:
            e2.sent(), Ko(t2), e2.label = 3;
          case 3:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  })), t2.Ur;
}
function is(t2) {
  var e = this;
  return t2.Qr || // Create stream (but note that it is not started yet).
  (t2.Qr = function(t3, e2, n2) {
    var r2 = O2(t3);
    return r2.br(), new xo(e2, r2.Hi, r2.credentials, r2.R, n2);
  }(t2.datastore, t2.asyncQueue, {
    Ii: Jo.bind(null, t2),
    Ri: es.bind(null, t2),
    Ir: Zo.bind(null, t2),
    Tr: ts.bind(null, t2)
  }), t2.Mr.push(function(n2) {
    return __awaiter(e, void 0, void 0, function() {
      return __generator(this, function(e2) {
        switch (e2.label) {
          case 0:
            return n2 ? (t2.Qr.sr(), [4, Yo(t2)]) : [3, 2];
          case 1:
            return e2.sent(), [3, 4];
          case 2:
            return [4, t2.Qr.stop()];
          case 3:
            e2.sent(), t2.kr.length > 0 && (N2("RemoteStore", "Stopping write stream with " + t2.kr.length + " pending writes"), t2.kr = []), e2.label = 4;
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  })), t2.Qr;
}
var os = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i) {
      this.asyncQueue = t3, this.timerId = e, this.targetTimeMs = n2, this.op = r2, this.removalCallback = i, this.deferred = new vr(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)
      // and so we attach a dummy catch callback to avoid
      // 'UnhandledPromiseRejectionWarning' log spam.
      this.deferred.promise.catch(function(t4) {
      });
    }
    return t2.createAndSchedule = function(e, n2, r2, i, o) {
      var s = new t2(e, n2, Date.now() + r2, i, o);
      return s.start(r2), s;
    }, /**
     * Starts the timer. This is called immediately after construction by
     * createAndSchedule().
     */
    t2.prototype.start = function(t3) {
      var e = this;
      this.timerHandle = setTimeout(function() {
        return e.handleDelayElapsed();
      }, t3);
    }, /**
     * Queues the operation to run immediately (if it hasn't already been run or
     * canceled).
     */
    t2.prototype.skipDelay = function() {
      return this.handleDelayElapsed();
    }, /**
     * Cancels the operation if it hasn't already been executed or canceled. The
     * promise will be rejected.
     *
     * As long as the operation has not yet been run, calling cancel() provides a
     * guarantee that the operation will not be run.
     */
    t2.prototype.cancel = function(t3) {
      null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new T2(E2.CANCELLED, "Operation cancelled" + (t3 ? ": " + t3 : ""))));
    }, t2.prototype.handleDelayElapsed = function() {
      var t3 = this;
      this.asyncQueue.enqueueAndForget(function() {
        return null !== t3.timerHandle ? (t3.clearTimeout(), t3.op().then(function(e) {
          return t3.deferred.resolve(e);
        })) : Promise.resolve();
      });
    }, t2.prototype.clearTimeout = function() {
      null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);
    }, t2;
  }()
);
function ss(t2, e) {
  if (A2("AsyncQueue", e + ": " + t2), _r(t2))
    return new T2(E2.UNAVAILABLE, e + ": " + t2);
  throw t2;
}
var us = (
  /** @class */
  function() {
    function t2(t3) {
      this.comparator = t3 ? function(e, n2) {
        return t3(e, n2) || st.comparator(e.key, n2.key);
      } : function(t4, e) {
        return st.comparator(t4.key, e.key);
      }, this.keyedMap = $e(), this.sortedSet = new Ke(this.comparator);
    }
    return t2.emptySet = function(e) {
      return new t2(e.comparator);
    }, t2.prototype.has = function(t3) {
      return null != this.keyedMap.get(t3);
    }, t2.prototype.get = function(t3) {
      return this.keyedMap.get(t3);
    }, t2.prototype.first = function() {
      return this.sortedSet.minKey();
    }, t2.prototype.last = function() {
      return this.sortedSet.maxKey();
    }, t2.prototype.isEmpty = function() {
      return this.sortedSet.isEmpty();
    }, /**
     * Returns the index of the provided key in the document set, or -1 if the
     * document key is not present in the set;
     */
    t2.prototype.indexOf = function(t3) {
      var e = this.keyedMap.get(t3);
      return e ? this.sortedSet.indexOf(e) : -1;
    }, Object.defineProperty(t2.prototype, "size", {
      get: function() {
        return this.sortedSet.size;
      },
      enumerable: false,
      configurable: true
    }), /** Iterates documents in order defined by "comparator" */
    t2.prototype.forEach = function(t3) {
      this.sortedSet.inorderTraversal(function(e, n2) {
        return t3(e), false;
      });
    }, /** Inserts or updates a document with the same key */
    t2.prototype.add = function(t3) {
      var e = this.delete(t3.key);
      return e.copy(e.keyedMap.insert(t3.key, t3), e.sortedSet.insert(t3, null));
    }, /** Deletes a document with a given key */
    t2.prototype.delete = function(t3) {
      var e = this.get(t3);
      return e ? this.copy(this.keyedMap.remove(t3), this.sortedSet.remove(e)) : this;
    }, t2.prototype.isEqual = function(e) {
      if (!(e instanceof t2))
        return false;
      if (this.size !== e.size)
        return false;
      for (var n2 = this.sortedSet.getIterator(), r2 = e.sortedSet.getIterator(); n2.hasNext(); ) {
        var i = n2.getNext().key, o = r2.getNext().key;
        if (!i.isEqual(o))
          return false;
      }
      return true;
    }, t2.prototype.toString = function() {
      var t3 = [];
      return this.forEach(function(e) {
        t3.push(e.toString());
      }), 0 === t3.length ? "DocumentSet ()" : "DocumentSet (\n  " + t3.join("  \n") + "\n)";
    }, t2.prototype.copy = function(e, n2) {
      var r2 = new t2();
      return r2.comparator = this.comparator, r2.keyedMap = e, r2.sortedSet = n2, r2;
    }, t2;
  }()
);
var as = (
  /** @class */
  function() {
    function t2() {
      this.Kr = new Ke(st.comparator);
    }
    return t2.prototype.track = function(t3) {
      var e = t3.doc.key, n2 = this.Kr.get(e);
      n2 ? (
        // Merge the new change with the existing change.
        0 !== t3.type && 3 === n2.type ? this.Kr = this.Kr.insert(e, t3) : 3 === t3.type && 1 !== n2.type ? this.Kr = this.Kr.insert(e, {
          type: n2.type,
          doc: t3.doc
        }) : 2 === t3.type && 2 === n2.type ? this.Kr = this.Kr.insert(e, {
          type: 2,
          doc: t3.doc
        }) : 2 === t3.type && 0 === n2.type ? this.Kr = this.Kr.insert(e, {
          type: 0,
          doc: t3.doc
        }) : 1 === t3.type && 0 === n2.type ? this.Kr = this.Kr.remove(e) : 1 === t3.type && 2 === n2.type ? this.Kr = this.Kr.insert(e, {
          type: 1,
          doc: n2.doc
        }) : 0 === t3.type && 1 === n2.type ? this.Kr = this.Kr.insert(e, {
          type: 2,
          doc: t3.doc
        }) : (
          // This includes these cases, which don't make sense:
          // Added->Added
          // Removed->Removed
          // Modified->Added
          // Removed->Modified
          // Metadata->Added
          // Removed->Metadata
          C()
        )
      ) : this.Kr = this.Kr.insert(e, t3);
    }, t2.prototype.jr = function() {
      var t3 = [];
      return this.Kr.inorderTraversal(function(e, n2) {
        t3.push(n2);
      }), t3;
    }, t2;
  }()
);
var cs = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i, o, s, u) {
      this.query = t3, this.docs = e, this.oldDocs = n2, this.docChanges = r2, this.mutatedKeys = i, this.fromCache = o, this.syncStateChanged = s, this.excludesMetadataChanges = u;
    }
    return t2.fromInitialDocuments = function(e, n2, r2, i) {
      var o = [];
      return n2.forEach(function(t3) {
        o.push({
          type: 0,
          doc: t3
        });
      }), new t2(
        e,
        n2,
        us.emptySet(n2),
        o,
        r2,
        i,
        /* syncStateChanged= */
        true,
        /* excludesMetadataChanges= */
        false
      );
    }, Object.defineProperty(t2.prototype, "hasPendingWrites", {
      get: function() {
        return !this.mutatedKeys.isEmpty();
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.isEqual = function(t3) {
      if (!(this.fromCache === t3.fromCache && this.syncStateChanged === t3.syncStateChanged && this.mutatedKeys.isEqual(t3.mutatedKeys) && te(this.query, t3.query) && this.docs.isEqual(t3.docs) && this.oldDocs.isEqual(t3.oldDocs)))
        return false;
      var e = this.docChanges, n2 = t3.docChanges;
      if (e.length !== n2.length)
        return false;
      for (var r2 = 0; r2 < e.length; r2++)
        if (e[r2].type !== n2[r2].type || !e[r2].doc.isEqual(n2[r2].doc))
          return false;
      return true;
    }, t2;
  }()
);
var hs = function() {
  this.Wr = void 0, this.listeners = [];
};
var fs = function() {
  this.queries = new mi(function(t2) {
    return ee(t2);
  }, te), this.onlineState = "Unknown", this.Gr = /* @__PURE__ */ new Set();
};
function ls(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2, i, o, s, u, a;
    return __generator(this, function(c) {
      switch (c.label) {
        case 0:
          if (n2 = O2(t2), r2 = e.query, i = false, (o = n2.queries.get(r2)) || (i = true, o = new hs()), !i)
            return [3, 4];
          c.label = 1;
        case 1:
          return c.trys.push([1, 3, , 4]), s = o, [4, n2.onListen(r2)];
        case 2:
          return s.Wr = c.sent(), [3, 4];
        case 3:
          return u = c.sent(), a = ss(u, "Initialization of query '" + ne(e.query) + "' failed"), [2, void e.onError(a)];
        case 4:
          return n2.queries.set(r2, o), o.listeners.push(e), // Run global snapshot listeners if a consistent snapshot has been emitted.
          e.zr(n2.onlineState), o.Wr && e.Hr(o.Wr) && vs(n2), [
            2
            /*return*/
          ];
      }
    });
  });
}
function ds(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2, i, o, s;
    return __generator(this, function(u) {
      return n2 = O2(t2), r2 = e.query, i = false, (o = n2.queries.get(r2)) && (s = o.listeners.indexOf(e)) >= 0 && (o.listeners.splice(s, 1), i = 0 === o.listeners.length), i ? [2, (n2.queries.delete(r2), n2.onUnlisten(r2))] : [
        2
        /*return*/
      ];
    });
  });
}
function ps(t2, e) {
  for (var n2 = O2(t2), r2 = false, i = 0, o = e; i < o.length; i++) {
    var s = o[i], u = s.query, a = n2.queries.get(u);
    if (a) {
      for (var c = 0, h2 = a.listeners; c < h2.length; c++) {
        h2[c].Hr(s) && (r2 = true);
      }
      a.Wr = s;
    }
  }
  r2 && vs(n2);
}
function ys(t2, e, n2) {
  var r2 = O2(t2), i = r2.queries.get(e);
  if (i)
    for (var o = 0, s = i.listeners; o < s.length; o++) {
      s[o].onError(n2);
    }
  r2.queries.delete(e);
}
function vs(t2) {
  t2.Gr.forEach(function(t3) {
    t3.next();
  });
}
var ms = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this.query = t3, this.Jr = e, /**
           * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
           * observer. This flag is set to true once we've actually raised an event.
           */
      this.Yr = false, this.Xr = null, this.onlineState = "Unknown", this.options = n2 || {};
    }
    return t2.prototype.Hr = function(t3) {
      if (!this.options.includeMetadataChanges) {
        for (var e = [], n2 = 0, r2 = t3.docChanges; n2 < r2.length; n2++) {
          var i = r2[n2];
          3 !== i.type && e.push(i);
        }
        t3 = new cs(
          t3.query,
          t3.docs,
          t3.oldDocs,
          e,
          t3.mutatedKeys,
          t3.fromCache,
          t3.syncStateChanged,
          /* excludesMetadataChanges= */
          true
        );
      }
      var o = false;
      return this.Yr ? this.Zr(t3) && (this.Jr.next(t3), o = true) : this.eo(t3, this.onlineState) && (this.no(t3), o = true), this.Xr = t3, o;
    }, t2.prototype.onError = function(t3) {
      this.Jr.error(t3);
    }, /** Returns whether a snapshot was raised. */
    t2.prototype.zr = function(t3) {
      this.onlineState = t3;
      var e = false;
      return this.Xr && !this.Yr && this.eo(this.Xr, t3) && (this.no(this.Xr), e = true), e;
    }, t2.prototype.eo = function(t3, e) {
      if (!t3.fromCache)
        return true;
      var n2 = "Offline" !== e;
      return !(this.options.so && n2 || t3.docs.isEmpty() && "Offline" !== e);
    }, t2.prototype.Zr = function(t3) {
      if (t3.docChanges.length > 0)
        return true;
      var e = this.Xr && this.Xr.hasPendingWrites !== t3.hasPendingWrites;
      return !(!t3.syncStateChanged && !e) && true === this.options.includeMetadataChanges;
    }, t2.prototype.no = function(t3) {
      t3 = cs.fromInitialDocuments(t3.query, t3.docs, t3.mutatedKeys, t3.fromCache), this.Yr = true, this.Jr.next(t3);
    }, t2;
  }()
);
var gs = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.payload = t3, this.byteLength = e;
    }
    return t2.prototype.io = function() {
      return "metadata" in this.payload;
    }, t2;
  }()
);
var ws = (
  /** @class */
  function() {
    function t2(t3) {
      this.R = t3;
    }
    return t2.prototype.qn = function(t3) {
      return Tn(this.R, t3);
    }, /**
     * Converts a BundleDocument to a MutableDocument.
     */
    t2.prototype.Un = function(t3) {
      return t3.metadata.exists ? xn(this.R, t3.document, false) : _t.newNoDocument(this.qn(t3.metadata.name), this.Qn(t3.metadata.readTime));
    }, t2.prototype.Qn = function(t3) {
      return bn(t3);
    }, t2;
  }()
);
var bs = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this.ro = t3, this.localStore = e, this.R = n2, /** Batched queries to be saved into storage */
      this.queries = [], /** Batched documents to be saved into storage */
      this.documents = [], this.progress = Is(t3);
    }
    return t2.prototype.oo = function(t3) {
      this.progress.bytesLoaded += t3.byteLength;
      var e = this.progress.documentsLoaded;
      return t3.payload.namedQuery ? this.queries.push(t3.payload.namedQuery) : t3.payload.documentMetadata ? (this.documents.push({
        metadata: t3.payload.documentMetadata
      }), t3.payload.documentMetadata.exists || ++e) : t3.payload.document && (this.documents[this.documents.length - 1].document = t3.payload.document, ++e), e !== this.progress.documentsLoaded ? (this.progress.documentsLoaded = e, Object.assign({}, this.progress)) : null;
    }, t2.prototype.co = function(t3) {
      for (var e = /* @__PURE__ */ new Map(), n2 = new ws(this.R), r2 = 0, i = t3; r2 < i.length; r2++) {
        var o = i[r2];
        if (o.metadata.queries)
          for (var s = n2.qn(o.metadata.name), u = 0, a = o.metadata.queries; u < a.length; u++) {
            var c = a[u], h2 = (e.get(c) || en()).add(s);
            e.set(c, h2);
          }
      }
      return e;
    }, /**
     * Update the progress to 'Success' and return the updated progress.
     */
    t2.prototype.complete = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e, n2, r2, i;
        return __generator(this, function(o) {
          switch (o.label) {
            case 0:
              return [4, Yi(this.localStore, new ws(this.R), this.documents, this.ro.id)];
            case 1:
              t3 = o.sent(), e = this.co(this.documents), n2 = 0, r2 = this.queries, o.label = 2;
            case 2:
              return n2 < r2.length ? (i = r2[n2], [4, Xi(this.localStore, i, e.get(i.name))]) : [3, 5];
            case 3:
              o.sent(), o.label = 4;
            case 4:
              return n2++, [3, 2];
            case 5:
              return [2, (this.progress.taskState = "Success", new Ci(Object.assign({}, this.progress), t3))];
          }
        });
      });
    }, t2;
  }()
);
function Is(t2) {
  return {
    taskState: "Running",
    documentsLoaded: 0,
    bytesLoaded: 0,
    totalDocuments: t2.totalDocuments,
    totalBytes: t2.totalBytes
  };
}
var _s = function(t2) {
  this.key = t2;
};
var Es = function(t2) {
  this.key = t2;
};
var Ts = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.query = t3, this.uo = e, this.ao = null, /**
           * A flag whether the view is current with the backend. A view is considered
           * current after it has seen the current flag from the backend and did not
           * lose consistency within the watch stream (e.g. because of an existence
           * filter mismatch).
           */
      this.current = false, /** Documents in the view but not in the remote target */
      this.ho = en(), /** Document Keys that have local changes */
      this.mutatedKeys = en(), this.lo = ie(t3), this.fo = new us(this.lo);
    }
    return Object.defineProperty(t2.prototype, "wo", {
      /**
       * The set of remote documents that the server has told us belongs to the target associated with
       * this view.
       */
      get: function() {
        return this.uo;
      },
      enumerable: false,
      configurable: true
    }), /**
     * Iterates over a set of doc changes, applies the query limit, and computes
     * what the new results should be, what the changes were, and whether we may
     * need to go back to the local cache for more results. Does not make any
     * changes to the view.
     * @param docChanges - The doc changes to apply to this view.
     * @param previousChanges - If this is being called with a refill, then start
     *        with this set of docs and changes instead of the current view.
     * @returns a new set of docs, changes, and refill flag.
     */
    t2.prototype._o = function(t3, e) {
      var n2 = this, r2 = e ? e.mo : new as(), i = e ? e.fo : this.fo, o = e ? e.mutatedKeys : this.mutatedKeys, s = i, u = false, a = zt(this.query) && i.size === this.query.limit ? i.last() : null, c = Wt(this.query) && i.size === this.query.limit ? i.first() : null;
      if (t3.inorderTraversal(function(t4, e2) {
        var h3 = i.get(t4), f = re(n2.query, e2) ? e2 : null, l = !!h3 && n2.mutatedKeys.has(h3.key), d = !!f && (f.hasLocalMutations || // We only consider committed mutations for documents that were
        // mutated during the lifetime of the view.
        n2.mutatedKeys.has(f.key) && f.hasCommittedMutations), p2 = false;
        h3 && f ? h3.data.isEqual(f.data) ? l !== d && (r2.track({
          type: 3,
          doc: f
        }), p2 = true) : n2.yo(h3, f) || (r2.track({
          type: 2,
          doc: f
        }), p2 = true, (a && n2.lo(f, a) > 0 || c && n2.lo(f, c) < 0) && // This doc moved from inside the limit to outside the limit.
        // That means there may be some other doc in the local cache
        // that should be included instead.
        (u = true)) : !h3 && f ? (r2.track({
          type: 0,
          doc: f
        }), p2 = true) : h3 && !f && (r2.track({
          type: 1,
          doc: h3
        }), p2 = true, (a || c) && // A doc was removed from a full limit query. We'll need to
        // requery from the local cache to see if we know about some other
        // doc that should be in the results.
        (u = true)), p2 && (f ? (s = s.add(f), o = d ? o.add(t4) : o.delete(t4)) : (s = s.delete(t4), o = o.delete(t4)));
      }), zt(this.query) || Wt(this.query))
        for (; s.size > this.query.limit; ) {
          var h2 = zt(this.query) ? s.last() : s.first();
          s = s.delete(h2.key), o = o.delete(h2.key), r2.track({
            type: 1,
            doc: h2
          });
        }
      return {
        fo: s,
        mo: r2,
        Nn: u,
        mutatedKeys: o
      };
    }, t2.prototype.yo = function(t3, e) {
      return t3.hasLocalMutations && e.hasCommittedMutations && !e.hasLocalMutations;
    }, /**
     * Updates the view with the given ViewDocumentChanges and optionally updates
     * limbo docs and sync state from the provided target change.
     * @param docChanges - The set of changes to make to the view's docs.
     * @param updateLimboDocuments - Whether to update limbo documents based on
     *        this change.
     * @param targetChange - A target change to apply for computing limbo docs and
     *        sync state.
     * @returns A new ViewChange with the given docs, changes, and sync state.
     */
    // PORTING NOTE: The iOS/Android clients always compute limbo document changes.
    t2.prototype.applyChanges = function(t3, e, n2) {
      var r2 = this, i = this.fo;
      this.fo = t3.fo, this.mutatedKeys = t3.mutatedKeys;
      var o = t3.mo.jr();
      o.sort(function(t4, e2) {
        return function(t5, e3) {
          var n3 = function(t6) {
            switch (t6) {
              case 0:
                return 1;
              case 2:
              case 3:
                return 2;
              case 1:
                return 0;
              default:
                return C();
            }
          };
          return n3(t5) - n3(e3);
        }(t4.type, e2.type) || r2.lo(t4.doc, e2.doc);
      }), this.po(n2);
      var s = e ? this.Eo() : [], u = 0 === this.ho.size && this.current ? 1 : 0, a = u !== this.ao;
      return this.ao = u, 0 !== o.length || a ? {
        snapshot: new cs(
          this.query,
          t3.fo,
          i,
          o,
          t3.mutatedKeys,
          0 === u,
          a,
          /* excludesMetadataChanges= */
          false
        ),
        To: s
      } : {
        To: s
      };
    }, /**
     * Applies an OnlineState change to the view, potentially generating a
     * ViewChange if the view's syncState changes as a result.
     */
    t2.prototype.zr = function(t3) {
      return this.current && "Offline" === t3 ? (
        // If we're offline, set `current` to false and then call applyChanges()
        // to refresh our syncState and generate a ViewChange as appropriate. We
        // are guaranteed to get a new TargetChange that sets `current` back to
        // true once the client is back online.
        (this.current = false, this.applyChanges(
          {
            fo: this.fo,
            mo: new as(),
            mutatedKeys: this.mutatedKeys,
            Nn: false
          },
          /* updateLimboDocuments= */
          false
        ))
      ) : {
        To: []
      };
    }, /**
     * Returns whether the doc for the given key should be in limbo.
     */
    t2.prototype.Io = function(t3) {
      return !this.uo.has(t3) && // The local store doesn't think it's a result, so it shouldn't be in limbo.
      !!this.fo.has(t3) && !this.fo.get(t3).hasLocalMutations;
    }, /**
     * Updates syncedDocuments, current, and limbo docs based on the given change.
     * Returns the list of changes to which docs are in limbo.
     */
    t2.prototype.po = function(t3) {
      var e = this;
      t3 && (t3.addedDocuments.forEach(function(t4) {
        return e.uo = e.uo.add(t4);
      }), t3.modifiedDocuments.forEach(function(t4) {
      }), t3.removedDocuments.forEach(function(t4) {
        return e.uo = e.uo.delete(t4);
      }), this.current = t3.current);
    }, t2.prototype.Eo = function() {
      var t3 = this;
      if (!this.current)
        return [];
      var e = this.ho;
      this.ho = en(), this.fo.forEach(function(e2) {
        t3.Io(e2.key) && (t3.ho = t3.ho.add(e2.key));
      });
      var n2 = [];
      return e.forEach(function(e2) {
        t3.ho.has(e2) || n2.push(new Es(e2));
      }), this.ho.forEach(function(t4) {
        e.has(t4) || n2.push(new _s(t4));
      }), n2;
    }, /**
     * Update the in-memory state of the current view with the state read from
     * persistence.
     *
     * We update the query view whenever a client's primary status changes:
     * - When a client transitions from primary to secondary, it can miss
     *   LocalStorage updates and its query views may temporarily not be
     *   synchronized with the state on disk.
     * - For secondary to primary transitions, the client needs to update the list
     *   of `syncedDocuments` since secondary clients update their query views
     *   based purely on synthesized RemoteEvents.
     *
     * @param queryResult.documents - The documents that match the query according
     * to the LocalStore.
     * @param queryResult.remoteKeys - The keys of the documents that match the
     * query according to the backend.
     *
     * @returns The ViewChange that resulted from this synchronization.
     */
    // PORTING NOTE: Multi-tab only.
    t2.prototype.Ao = function(t3) {
      this.uo = t3.Bn, this.ho = en();
      var e = this._o(t3.documents);
      return this.applyChanges(
        e,
        /*updateLimboDocuments=*/
        true
      );
    }, /**
     * Returns a view snapshot as if this query was just listened to. Contains
     * a document add for every existing document and the `fromCache` and
     * `hasPendingWrites` status of the already established view.
     */
    // PORTING NOTE: Multi-tab only.
    t2.prototype.Ro = function() {
      return cs.fromInitialDocuments(this.query, this.fo, this.mutatedKeys, 0 === this.ao);
    }, t2;
  }()
);
var Ss = function(t2, e, n2) {
  this.query = t2, this.targetId = e, this.view = n2;
};
var Ds = function(t2) {
  this.key = t2, /**
           * Set to true once we've received a document. This is used in
           * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to
           * decide whether it needs to manufacture a delete event for the target once
           * the target is CURRENT.
           */
  this.bo = false;
};
var Ns = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i, o) {
      this.localStore = t3, this.remoteStore = e, this.eventManager = n2, this.sharedClientState = r2, this.currentUser = i, this.maxConcurrentLimboResolutions = o, this.vo = {}, this.Po = new mi(function(t4) {
        return ee(t4);
      }, te), this.Vo = /* @__PURE__ */ new Map(), /**
           * The keys of documents that are in limbo for which we haven't yet started a
           * limbo resolution query. The strings in this set are the result of calling
           * `key.path.canonicalString()` where `key` is a `DocumentKey` object.
           *
           * The `Set` type was chosen because it provides efficient lookup and removal
           * of arbitrary elements and it also maintains insertion order, providing the
           * desired queue-like FIFO semantics.
           */
      this.So = /* @__PURE__ */ new Set(), /**
           * Keeps track of the target ID for each document that is in limbo with an
           * active target.
           */
      this.Do = new Ke(st.comparator), /**
           * Keeps track of the information about an active limbo resolution for each
           * active target ID that was started for the purpose of limbo resolution.
           */
      this.Co = /* @__PURE__ */ new Map(), this.No = new Ji(), /** Stores user completion handlers, indexed by User and BatchId. */
      this.xo = {}, /** Stores user callbacks waiting for all pending writes to be acknowledged. */
      this.Fo = /* @__PURE__ */ new Map(), this.ko = oi.Yt(), this.onlineState = "Unknown", // The primary state is set to `true` or `false` immediately after Firestore
      // startup. In the interim, a client should only be considered primary if
      // `isPrimary` is true.
      this.Oo = void 0;
    }
    return Object.defineProperty(t2.prototype, "isPrimaryClient", {
      get: function() {
        return true === this.Oo;
      },
      enumerable: false,
      configurable: true
    }), t2;
  }()
);
function As(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2, i, o, s, u;
    return __generator(this, function(a) {
      switch (a.label) {
        case 0:
          return n2 = ru(t2), (o = n2.Po.get(e)) ? (
            // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
            // already exists when EventManager calls us for the first time. This
            // happens when the primary tab is already listening to this query on
            // behalf of another tab and the user of the primary also starts listening
            // to the query. EventManager will not have an assigned target ID in this
            // case and calls `listen` to obtain this ID.
            (r2 = o.targetId, n2.sharedClientState.addLocalQueryTarget(r2), i = o.view.Ro(), [3, 4])
          ) : [3, 1];
        case 1:
          return [4, Ki(n2.localStore, Jt(e))];
        case 2:
          return s = a.sent(), u = n2.sharedClientState.addLocalQueryTarget(s.targetId), r2 = s.targetId, [4, ks(n2, e, r2, "current" === u)];
        case 3:
          i = a.sent(), n2.isPrimaryClient && Mo(n2.remoteStore, s), a.label = 4;
        case 4:
          return [2, i];
      }
    });
  });
}
function ks(t2, e, n2, r2) {
  return __awaiter(this, void 0, void 0, function() {
    var i, o, s, u, a, c;
    return __generator(this, function(h2) {
      switch (h2.label) {
        case 0:
          return t2.$o = function(e2, n3, r3) {
            return function(t3, e3, n4, r4) {
              return __awaiter(this, void 0, void 0, function() {
                var i2, o2, s2;
                return __generator(this, function(u2) {
                  switch (u2.label) {
                    case 0:
                      return i2 = e3.view._o(n4), i2.Nn ? [4, Qi(
                        t3.localStore,
                        e3.query,
                        /* usePreviousResults= */
                        false
                      ).then(function(t4) {
                        var n5 = t4.documents;
                        return e3.view._o(n5, i2);
                      })] : [3, 2];
                    case 1:
                      i2 = u2.sent(), u2.label = 2;
                    case 2:
                      return o2 = r4 && r4.targetChanges.get(e3.targetId), s2 = e3.view.applyChanges(
                        i2,
                        /* updateLimboDocuments= */
                        t3.isPrimaryClient,
                        o2
                      ), [2, (js(t3, e3.targetId, s2.To), s2.snapshot)];
                  }
                });
              });
            }(t2, e2, n3, r3);
          }, [4, Qi(
            t2.localStore,
            e,
            /* usePreviousResults= */
            true
          )];
        case 1:
          return i = h2.sent(), o = new Ts(e, i.Bn), s = o._o(i.documents), u = sn.createSynthesizedTargetChangeForCurrentChange(n2, r2 && "Offline" !== t2.onlineState), a = o.applyChanges(
            s,
            /* updateLimboDocuments= */
            t2.isPrimaryClient,
            u
          ), js(t2, n2, a.To), c = new Ss(e, n2, o), [2, (t2.Po.set(e, c), t2.Vo.has(n2) ? t2.Vo.get(n2).push(e) : t2.Vo.set(n2, [e]), a.snapshot)];
      }
    });
  });
}
function xs(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2, i;
    return __generator(this, function(o) {
      switch (o.label) {
        case 0:
          return n2 = O2(t2), r2 = n2.Po.get(e), (i = n2.Vo.get(r2.targetId)).length > 1 ? [2, (n2.Vo.set(r2.targetId, i.filter(function(t3) {
            return !te(t3, e);
          })), void n2.Po.delete(e))] : n2.isPrimaryClient ? (
            // We need to remove the local query target first to allow us to verify
            // whether any other client is still interested in this target.
            (n2.sharedClientState.removeLocalQueryTarget(r2.targetId), n2.sharedClientState.isActiveQueryTarget(r2.targetId) ? [3, 2] : [4, Gi(
              n2.localStore,
              r2.targetId,
              /*keepPersistedTargetData=*/
              false
            ).then(function() {
              n2.sharedClientState.clearQueryState(r2.targetId), Fo(n2.remoteStore, r2.targetId), Us(n2, r2.targetId);
            }).catch(hi)])
          ) : [3, 3];
        case 1:
          o.sent(), o.label = 2;
        case 2:
          return [3, 5];
        case 3:
          return Us(n2, r2.targetId), [4, Gi(
            n2.localStore,
            r2.targetId,
            /*keepPersistedTargetData=*/
            true
          )];
        case 4:
          o.sent(), o.label = 5;
        case 5:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Cs(t2, e, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2, i, o, s;
    return __generator(this, function(u) {
      switch (u.label) {
        case 0:
          r2 = iu(t2), u.label = 1;
        case 1:
          return u.trys.push([1, 5, , 6]), [4, function(t3, e2) {
            var n3, r3 = O2(t3), i2 = q2.now(), o2 = e2.reduce(function(t4, e3) {
              return t4.add(e3.key);
            }, en());
            return r3.persistence.runTransaction("Locally write mutations", "readwrite", function(t4) {
              return r3.Mn.pn(t4, o2).next(function(o3) {
                n3 = o3;
                for (var s2 = [], u2 = 0, a = e2; u2 < a.length; u2++) {
                  var c = a[u2], h2 = Ae(c, n3.get(c.key));
                  null != h2 && // NOTE: The base state should only be applied if there's some
                  // existing document to override, so use a Precondition of
                  // exists=true
                  s2.push(new Re(c.key, h2, It(h2.toProto().mapValue), Ee.exists(true)));
                }
                return r3._n.addMutationBatch(t4, i2, s2, e2);
              });
            }).then(function(t4) {
              return t4.applyToLocalDocumentSet(n3), {
                batchId: t4.batchId,
                changes: n3
              };
            });
          }(r2.localStore, e)];
        case 2:
          return i = u.sent(), r2.sharedClientState.addPendingMutation(i.batchId), function(t3, e2, n3) {
            var r3 = t3.xo[t3.currentUser.toKey()];
            r3 || (r3 = new Ke(M2)), r3 = r3.insert(e2, n3), t3.xo[t3.currentUser.toKey()] = r3;
          }(r2, i.batchId, n2), [4, Qs(r2, i.changes)];
        case 3:
          return u.sent(), [4, Yo(r2.remoteStore)];
        case 4:
          return u.sent(), [3, 6];
        case 5:
          return o = u.sent(), s = ss(o, "Failed to persist write"), n2.reject(s), [3, 6];
        case 6:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Rs(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2;
    return __generator(this, function(i) {
      switch (i.label) {
        case 0:
          n2 = O2(t2), i.label = 1;
        case 1:
          return i.trys.push([1, 4, , 6]), [4, Ui(n2.localStore, e)];
        case 2:
          return r2 = i.sent(), // Update `receivedDocument` as appropriate for any limbo targets.
          e.targetChanges.forEach(function(t3, e2) {
            var r3 = n2.Co.get(e2);
            r3 && // Since this is a limbo resolution lookup, it's for a single document
            // and it could be added, modified, or removed, but not a combination.
            (R2(t3.addedDocuments.size + t3.modifiedDocuments.size + t3.removedDocuments.size <= 1), t3.addedDocuments.size > 0 ? r3.bo = true : t3.modifiedDocuments.size > 0 ? R2(r3.bo) : t3.removedDocuments.size > 0 && (R2(r3.bo), r3.bo = false));
          }), [4, Qs(n2, r2, e)];
        case 3:
          return i.sent(), [3, 6];
        case 4:
          return [4, hi(i.sent())];
        case 5:
          return i.sent(), [3, 6];
        case 6:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Os(t2, e, n2) {
  var r2 = O2(t2);
  if (r2.isPrimaryClient && 0 === n2 || !r2.isPrimaryClient && 1 === n2) {
    var i = [];
    r2.Po.forEach(function(t3, n3) {
      var r3 = n3.view.zr(e);
      r3.snapshot && i.push(r3.snapshot);
    }), function(t3, e2) {
      var n3 = O2(t3);
      n3.onlineState = e2;
      var r3 = false;
      n3.queries.forEach(function(t4, n4) {
        for (var i2 = 0, o = n4.listeners; i2 < o.length; i2++) {
          o[i2].zr(e2) && (r3 = true);
        }
      }), r3 && vs(n3);
    }(r2.eventManager, e), i.length && r2.vo._r(i), r2.onlineState = e, r2.isPrimaryClient && r2.sharedClientState.setOnlineState(e);
  }
}
function Ls(t2, e, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2, i, o, s, u, a;
    return __generator(this, function(c) {
      switch (c.label) {
        case 0:
          return (r2 = O2(t2)).sharedClientState.updateQueryState(e, "rejected", n2), i = r2.Co.get(e), (o = i && i.key) ? (s = (s = new Ke(st.comparator)).insert(o, _t.newNoDocument(o, U2.min())), u = en().add(o), a = new on(
            U2.min(),
            /* targetChanges= */
            /* @__PURE__ */ new Map(),
            /* targetMismatches= */
            new ze(M2),
            s,
            u
          ), [4, Rs(r2, a)]) : [3, 2];
        case 1:
          return c.sent(), // Since this query failed, we won't want to manually unlisten to it.
          // We only remove it from bookkeeping after we successfully applied the
          // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to
          // this query when the RemoteStore restarts the Watch stream, which should
          // re-trigger the target failure.
          r2.Do = r2.Do.remove(o), r2.Co.delete(e), Gs(r2), [3, 4];
        case 2:
          return [4, Gi(
            r2.localStore,
            e,
            /* keepPersistedTargetData */
            false
          ).then(function() {
            return Us(r2, e, n2);
          }).catch(hi)];
        case 3:
          c.sent(), c.label = 4;
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Ps(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2, i;
    return __generator(this, function(o) {
      switch (o.label) {
        case 0:
          n2 = O2(t2), r2 = e.batch.batchId, o.label = 1;
        case 1:
          return o.trys.push([1, 4, , 6]), [4, Vi(n2.localStore, e)];
        case 2:
          return i = o.sent(), // The local store may or may not be able to apply the write result and
          // raise events immediately (depending on whether the watcher is caught
          // up), so we raise user callbacks first so that they consistently happen
          // before listen events.
          qs(
            n2,
            r2,
            /*error=*/
            null
          ), Vs(n2, r2), n2.sharedClientState.updateMutationState(r2, "acknowledged"), [4, Qs(n2, i)];
        case 3:
          return o.sent(), [3, 6];
        case 4:
          return [4, hi(o.sent())];
        case 5:
          return o.sent(), [3, 6];
        case 6:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Ms(t2, e, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2, i;
    return __generator(this, function(o) {
      switch (o.label) {
        case 0:
          r2 = O2(t2), o.label = 1;
        case 1:
          return o.trys.push([1, 4, , 6]), [4, function(t3, e2) {
            var n3 = O2(t3);
            return n3.persistence.runTransaction("Reject batch", "readwrite-primary", function(t4) {
              var r3;
              return n3._n.lookupMutationBatch(t4, e2).next(function(e3) {
                return R2(null !== e3), r3 = e3.keys(), n3._n.removeMutationBatch(t4, e3);
              }).next(function() {
                return n3._n.performConsistencyCheck(t4);
              }).next(function() {
                return n3.Mn.pn(t4, r3);
              });
            });
          }(r2.localStore, e)];
        case 2:
          return i = o.sent(), // The local store may or may not be able to apply the write result and
          // raise events immediately (depending on whether the watcher is caught up),
          // so we raise user callbacks first so that they consistently happen before
          // listen events.
          qs(r2, e, n2), Vs(r2, e), r2.sharedClientState.updateMutationState(e, "rejected", n2), [4, Qs(r2, i)];
        case 3:
          return o.sent(), [3, 6];
        case 4:
          return [4, hi(o.sent())];
        case 5:
          return o.sent(), [3, 6];
        case 6:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Fs(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2, i, o, s;
    return __generator(this, function(u) {
      switch (u.label) {
        case 0:
          jo((n2 = O2(t2)).remoteStore) || N2("SyncEngine", "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled."), u.label = 1;
        case 1:
          return u.trys.push([1, 3, , 4]), [4, function(t3) {
            var e2 = O2(t3);
            return e2.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", function(t4) {
              return e2._n.getHighestUnacknowledgedBatchId(t4);
            });
          }(n2.localStore)];
        case 2:
          return -1 === (r2 = u.sent()) ? [2, void e.resolve()] : ((i = n2.Fo.get(r2) || []).push(e), n2.Fo.set(r2, i), [3, 4]);
        case 3:
          return o = u.sent(), s = ss(o, "Initialization of waitForPendingWrites() operation failed"), e.reject(s), [3, 4];
        case 4:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Vs(t2, e) {
  (t2.Fo.get(e) || []).forEach(function(t3) {
    t3.resolve();
  }), t2.Fo.delete(e);
}
function qs(t2, e, n2) {
  var r2 = O2(t2), i = r2.xo[r2.currentUser.toKey()];
  if (i) {
    var o = i.get(e);
    o && (n2 ? o.reject(n2) : o.resolve(), i = i.remove(e)), r2.xo[r2.currentUser.toKey()] = i;
  }
}
function Us(t2, e, n2) {
  void 0 === n2 && (n2 = null), t2.sharedClientState.removeLocalQueryTarget(e);
  for (var r2 = 0, i = t2.Vo.get(e); r2 < i.length; r2++) {
    var o = i[r2];
    t2.Po.delete(o), n2 && t2.vo.Mo(o, n2);
  }
  t2.Vo.delete(e), t2.isPrimaryClient && t2.No.Zn(e).forEach(function(e2) {
    t2.No.containsKey(e2) || // We removed the last reference for this key
    Bs(t2, e2);
  });
}
function Bs(t2, e) {
  t2.So.delete(e.path.canonicalString());
  var n2 = t2.Do.get(e);
  null !== n2 && (Fo(t2.remoteStore, n2), t2.Do = t2.Do.remove(e), t2.Co.delete(n2), Gs(t2));
}
function js(t2, e, n2) {
  for (var r2 = 0, i = n2; r2 < i.length; r2++) {
    var o = i[r2];
    o instanceof _s ? (t2.No.addReference(o.key, e), Ks(t2, o)) : o instanceof Es ? (N2("SyncEngine", "Document no longer in limbo: " + o.key), t2.No.removeReference(o.key, e), t2.No.containsKey(o.key) || // We removed the last reference for this key
    Bs(t2, o.key)) : C();
  }
}
function Ks(t2, e) {
  var n2 = e.key, r2 = n2.path.canonicalString();
  t2.Do.get(n2) || t2.So.has(r2) || (N2("SyncEngine", "New document in limbo: " + n2), t2.So.add(r2), Gs(t2));
}
function Gs(t2) {
  for (; t2.So.size > 0 && t2.Do.size < t2.maxConcurrentLimboResolutions; ) {
    var e = t2.So.values().next().value;
    t2.So.delete(e);
    var n2 = new st(Q2.fromString(e)), r2 = t2.ko.next();
    t2.Co.set(r2, new Ds(n2)), t2.Do = t2.Do.insert(n2, r2), Mo(t2.remoteStore, new Cr(Jt(Qt(n2.path)), r2, 2, _.o));
  }
}
function Qs(t2, e, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2, i, o, s;
    return __generator(this, function(u) {
      switch (u.label) {
        case 0:
          return r2 = O2(t2), i = [], o = [], s = [], r2.Po.isEmpty() ? [3, 3] : (r2.Po.forEach(function(t3, u2) {
            s.push(r2.$o(u2, e, n2).then(function(t4) {
              if (t4) {
                r2.isPrimaryClient && r2.sharedClientState.updateQueryState(u2.targetId, t4.fromCache ? "not-current" : "current"), i.push(t4);
                var e2 = Oi.Pn(u2.targetId, t4);
                o.push(e2);
              }
            }));
          }), [4, Promise.all(s)]);
        case 1:
          return u.sent(), r2.vo._r(i), [4, function(t3, e2) {
            return __awaiter(this, void 0, void 0, function() {
              var n3, r3, i2, o2, s2, u2, a, c, h2;
              return __generator(this, function(f) {
                switch (f.label) {
                  case 0:
                    n3 = O2(t3), f.label = 1;
                  case 1:
                    return f.trys.push([1, 3, , 4]), [4, n3.persistence.runTransaction("notifyLocalViewChanges", "readwrite", function(t4) {
                      return mr.forEach(e2, function(e3) {
                        return mr.forEach(e3.bn, function(r4) {
                          return n3.persistence.referenceDelegate.addReference(t4, e3.targetId, r4);
                        }).next(function() {
                          return mr.forEach(e3.vn, function(r4) {
                            return n3.persistence.referenceDelegate.removeReference(t4, e3.targetId, r4);
                          });
                        });
                      });
                    })];
                  case 2:
                    return f.sent(), [3, 4];
                  case 3:
                    if (!_r(r3 = f.sent()))
                      throw r3;
                    return N2("LocalStore", "Failed to update sequence numbers: " + r3), [3, 4];
                  case 4:
                    for (i2 = 0, o2 = e2; i2 < o2.length; i2++)
                      s2 = o2[i2], u2 = s2.targetId, s2.fromCache || (a = n3.Fn.get(u2), c = a.snapshotVersion, h2 = a.withLastLimboFreeSnapshotVersion(c), // Advance the last limbo free snapshot version
                      n3.Fn = n3.Fn.insert(u2, h2));
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }(r2.localStore, o)];
        case 2:
          u.sent(), u.label = 3;
        case 3:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function zs(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2;
    return __generator(this, function(i) {
      switch (i.label) {
        case 0:
          return (n2 = O2(t2)).currentUser.isEqual(e) ? [3, 3] : (N2("SyncEngine", "User change. New user:", e.toKey()), [4, Fi(n2.localStore, e)]);
        case 1:
          return r2 = i.sent(), n2.currentUser = e, // Fails tasks waiting for pending writes requested by previous user.
          function(t3, e2) {
            t3.Fo.forEach(function(t4) {
              t4.forEach(function(t5) {
                t5.reject(new T2(E2.CANCELLED, "'waitForPendingWrites' promise is rejected due to a user change."));
              });
            }), t3.Fo.clear();
          }(n2), // TODO(b/114226417): Consider calling this only in the primary tab.
          n2.sharedClientState.handleUserChange(e, r2.removedBatchIds, r2.addedBatchIds), [4, Qs(n2, r2.Ln)];
        case 2:
          i.sent(), i.label = 3;
        case 3:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Ws(t2, e) {
  var n2 = O2(t2), r2 = n2.Co.get(e);
  if (r2 && r2.bo)
    return en().add(r2.key);
  var i = en(), o = n2.Vo.get(e);
  if (!o)
    return i;
  for (var s = 0, u = o; s < u.length; s++) {
    var a = u[s], c = n2.Po.get(a);
    i = i.unionWith(c.view.wo);
  }
  return i;
}
function Hs(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2, i;
    return __generator(this, function(o) {
      switch (o.label) {
        case 0:
          return [4, Qi(
            (n2 = O2(t2)).localStore,
            e.query,
            /* usePreviousResults= */
            true
          )];
        case 1:
          return r2 = o.sent(), i = e.view.Ao(r2), [2, (n2.isPrimaryClient && js(n2, e.targetId, i.To), i)];
      }
    });
  });
}
function Ys(t2) {
  return __awaiter(this, void 0, void 0, function() {
    var e;
    return __generator(this, function(n2) {
      return [2, Wi((e = O2(t2)).localStore).then(function(t3) {
        return Qs(e, t3);
      })];
    });
  });
}
function Xs(t2, e, n2, r2) {
  return __awaiter(this, void 0, void 0, function() {
    var i, o;
    return __generator(this, function(s) {
      switch (s.label) {
        case 0:
          return [4, function(t3, e2) {
            var n3 = O2(t3), r3 = O2(n3._n);
            return n3.persistence.runTransaction("Lookup mutation documents", "readonly", function(t4) {
              return r3.jt(t4, e2).next(function(e3) {
                return e3 ? n3.Mn.pn(t4, e3) : mr.resolve(null);
              });
            });
          }((i = O2(t2)).localStore, e)];
        case 1:
          return null === (o = s.sent()) ? [3, 6] : "pending" !== n2 ? [3, 3] : [4, Yo(i.remoteStore)];
        case 2:
          return s.sent(), [3, 4];
        case 3:
          "acknowledged" === n2 || "rejected" === n2 ? (
            // NOTE: Both these methods are no-ops for batches that originated from
            // other clients.
            (qs(i, e, r2 || null), Vs(i, e), function(t3, e2) {
              O2(O2(t3)._n).Gt(e2);
            }(i.localStore, e))
          ) : C(), s.label = 4;
        case 4:
          return [4, Qs(i, o)];
        case 5:
          return s.sent(), [3, 7];
        case 6:
          N2("SyncEngine", "Cannot apply mutation batch with id: " + e), s.label = 7;
        case 7:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function $s(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2, i, o, s, u, a, c;
    return __generator(this, function(h2) {
      switch (h2.label) {
        case 0:
          return ru(n2 = O2(t2)), iu(n2), true !== e || true === n2.Oo ? [3, 3] : (r2 = n2.sharedClientState.getAllActiveQueryTargets(), [4, Js(n2, r2.toArray())]);
        case 1:
          return i = h2.sent(), n2.Oo = true, [4, ns(n2.remoteStore, true)];
        case 2:
          for (h2.sent(), o = 0, s = i; o < s.length; o++)
            u = s[o], Mo(n2.remoteStore, u);
          return [3, 7];
        case 3:
          return false !== e || false === n2.Oo ? [3, 7] : (a = [], c = Promise.resolve(), n2.Vo.forEach(function(t3, e2) {
            n2.sharedClientState.isLocalQueryTarget(e2) ? a.push(e2) : c = c.then(function() {
              return Us(n2, e2), Gi(
                n2.localStore,
                e2,
                /*keepPersistedTargetData=*/
                true
              );
            }), Fo(n2.remoteStore, e2);
          }), [4, c]);
        case 4:
          return h2.sent(), [4, Js(n2, a)];
        case 5:
          return h2.sent(), // PORTING NOTE: Multi-Tab only.
          function(t3) {
            var e2 = O2(t3);
            e2.Co.forEach(function(t4, n3) {
              Fo(e2.remoteStore, n3);
            }), e2.No.ts(), e2.Co = /* @__PURE__ */ new Map(), e2.Do = new Ke(st.comparator);
          }(n2), n2.Oo = false, [4, ns(n2.remoteStore, false)];
        case 6:
          h2.sent(), h2.label = 7;
        case 7:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function Js(t2, e, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var n3, r2, i, o, s, u, a, c, h2, f, l, d, p2, y2;
    return __generator(this, function(v2) {
      switch (v2.label) {
        case 0:
          n3 = O2(t2), r2 = [], i = [], o = 0, s = e, v2.label = 1;
        case 1:
          return o < s.length ? (u = s[o], a = void 0, (c = n3.Vo.get(u)) && 0 !== c.length ? [4, Ki(n3.localStore, Jt(c[0]))] : [3, 7]) : [3, 13];
        case 2:
          a = v2.sent(), h2 = 0, f = c, v2.label = 3;
        case 3:
          return h2 < f.length ? (l = f[h2], d = n3.Po.get(l), [4, Hs(n3, d)]) : [3, 6];
        case 4:
          (p2 = v2.sent()).snapshot && i.push(p2.snapshot), v2.label = 5;
        case 5:
          return h2++, [3, 3];
        case 6:
          return [3, 11];
        case 7:
          return [4, zi(n3.localStore, u)];
        case 8:
          return y2 = v2.sent(), [4, Ki(n3.localStore, y2)];
        case 9:
          return a = v2.sent(), [4, ks(
            n3,
            Zs(y2),
            u,
            /*current=*/
            false
          )];
        case 10:
          v2.sent(), v2.label = 11;
        case 11:
          r2.push(a), v2.label = 12;
        case 12:
          return o++, [3, 1];
        case 13:
          return [2, (n3.vo._r(i), r2)];
      }
    });
  });
}
function Zs(t2) {
  return Gt(t2.path, t2.collectionGroup, t2.orderBy, t2.filters, t2.limit, "F", t2.startAt, t2.endAt);
}
function tu(t2) {
  var e = O2(t2);
  return O2(O2(e.localStore).persistence).fn();
}
function eu(t2, e, n2, r2) {
  return __awaiter(this, void 0, void 0, function() {
    var i, o, s;
    return __generator(this, function(u) {
      switch (u.label) {
        case 0:
          return (i = O2(t2)).Oo ? (
            // If we receive a target state notification via WebStorage, we are
            // either already secondary or another tab has taken the primary lease.
            (N2("SyncEngine", "Ignoring unexpected query state notification."), [3, 8])
          ) : [3, 1];
        case 1:
          if (!i.Vo.has(e))
            return [3, 8];
          switch (n2) {
            case "current":
            case "not-current":
              return [3, 2];
            case "rejected":
              return [3, 5];
          }
          return [3, 7];
        case 2:
          return [4, Wi(i.localStore)];
        case 3:
          return o = u.sent(), s = on.createSynthesizedRemoteEventForCurrentChange(e, "current" === n2), [4, Qs(i, o, s)];
        case 4:
          return u.sent(), [3, 8];
        case 5:
          return [4, Gi(
            i.localStore,
            e,
            /* keepPersistedTargetData */
            true
          )];
        case 6:
          return u.sent(), Us(i, e, r2), [3, 8];
        case 7:
          C(), u.label = 8;
        case 8:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function nu(t2, e, n2) {
  return __awaiter(this, void 0, void 0, function() {
    var r2, i, o, s, u, a, c, h2, f, l;
    return __generator(this, function(d) {
      switch (d.label) {
        case 0:
          if (!(r2 = ru(t2)).Oo)
            return [3, 10];
          i = 0, o = e, d.label = 1;
        case 1:
          return i < o.length ? (s = o[i], r2.Vo.has(s) ? (
            // A target might have been added in a previous attempt
            (N2("SyncEngine", "Adding an already active target " + s), [3, 5])
          ) : [4, zi(r2.localStore, s)]) : [3, 6];
        case 2:
          return u = d.sent(), [4, Ki(r2.localStore, u)];
        case 3:
          return a = d.sent(), [4, ks(
            r2,
            Zs(u),
            a.targetId,
            /*current=*/
            false
          )];
        case 4:
          d.sent(), Mo(r2.remoteStore, a), d.label = 5;
        case 5:
          return i++, [3, 1];
        case 6:
          c = function(t3) {
            return __generator(this, function(e2) {
              switch (e2.label) {
                case 0:
                  return r2.Vo.has(t3) ? [4, Gi(
                    r2.localStore,
                    t3,
                    /* keepPersistedTargetData */
                    false
                  ).then(function() {
                    Fo(r2.remoteStore, t3), Us(r2, t3);
                  }).catch(hi)] : [3, 2];
                case 1:
                  e2.sent(), e2.label = 2;
                case 2:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          }, h2 = 0, f = n2, d.label = 7;
        case 7:
          return h2 < f.length ? (l = f[h2], [5, c(l)]) : [3, 10];
        case 8:
          d.sent(), d.label = 9;
        case 9:
          return h2++, [3, 7];
        case 10:
          return [
            2
            /*return*/
          ];
      }
    });
  });
}
function ru(t2) {
  var e = O2(t2);
  return e.remoteStore.remoteSyncer.applyRemoteEvent = Rs.bind(null, e), e.remoteStore.remoteSyncer.getRemoteKeysForTarget = Ws.bind(null, e), e.remoteStore.remoteSyncer.rejectListen = Ls.bind(null, e), e.vo._r = ps.bind(null, e.eventManager), e.vo.Mo = ys.bind(null, e.eventManager), e;
}
function iu(t2) {
  var e = O2(t2);
  return e.remoteStore.remoteSyncer.applySuccessfulWrite = Ps.bind(null, e), e.remoteStore.remoteSyncer.rejectFailedWrite = Ms.bind(null, e), e;
}
var su = (
  /** @class */
  function() {
    function t2() {
      this.synchronizeTabs = false;
    }
    return t2.prototype.initialize = function(t3) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(e) {
          switch (e.label) {
            case 0:
              return this.R = Do(t3.databaseInfo.databaseId), this.sharedClientState = this.Bo(t3), this.persistence = this.qo(t3), [4, this.persistence.start()];
            case 1:
              return e.sent(), this.gcScheduler = this.Uo(t3), this.localStore = this.Qo(t3), [
                2
                /*return*/
              ];
          }
        });
      });
    }, t2.prototype.Uo = function(t3) {
      return null;
    }, t2.prototype.Qo = function(t3) {
      return Mi(this.persistence, new Li(), t3.initialUser, this.R);
    }, t2.prototype.qo = function(t3) {
      return new io(so.bs, this.R);
    }, t2.prototype.Bo = function(t3) {
      return new go();
    }, t2.prototype.terminate = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          switch (t3.label) {
            case 0:
              return this.gcScheduler && this.gcScheduler.stop(), [4, this.sharedClientState.shutdown()];
            case 1:
              return t3.sent(), [4, this.persistence.shutdown()];
            case 2:
              return t3.sent(), [
                2
                /*return*/
              ];
          }
        });
      });
    }, t2;
  }()
);
var uu = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2) {
      var i = this;
      return (i = t2.call(this) || this).Ko = e2, i.cacheSizeBytes = n2, i.forceOwnership = r2, i.synchronizeTabs = false, i;
    }
    return __extends(e, t2), e.prototype.initialize = function(e2) {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              return [4, t2.prototype.initialize.call(this, e2)];
            case 1:
              return n2.sent(), [4, Hi(this.localStore)];
            case 2:
              return n2.sent(), [4, this.Ko.initialize(this, e2)];
            case 3:
              return n2.sent(), [4, iu(this.Ko.syncEngine)];
            case 4:
              return n2.sent(), [4, Yo(this.Ko.remoteStore)];
            case 5:
              return n2.sent(), [
                2
                /*return*/
              ];
          }
        });
      });
    }, e.prototype.Qo = function(t3) {
      return Mi(this.persistence, new Li(), t3.initialUser, this.R);
    }, e.prototype.Uo = function(t3) {
      var e2 = this.persistence.referenceDelegate.garbageCollector;
      return new di(e2, t3.asyncQueue);
    }, e.prototype.qo = function(t3) {
      var e2 = xi(t3.databaseInfo.databaseId, t3.databaseInfo.persistenceKey), n2 = void 0 !== this.cacheSizeBytes ? $r.withCacheSize(this.cacheSizeBytes) : $r.DEFAULT;
      return new Ni(this.synchronizeTabs, e2, t3.clientId, n2, t3.asyncQueue, To(), So(), this.R, this.sharedClientState, !!this.forceOwnership);
    }, e.prototype.Bo = function(t3) {
      return new go();
    }, e;
  }(su)
);
var au = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(
        this,
        e2,
        n2,
        /* forceOwnership= */
        false
      ) || this).Ko = e2, r2.cacheSizeBytes = n2, r2.synchronizeTabs = true, r2;
    }
    return __extends(e, t2), e.prototype.initialize = function(e2) {
      return __awaiter(this, void 0, void 0, function() {
        var n2, r2 = this;
        return __generator(this, function(i) {
          switch (i.label) {
            case 0:
              return [4, t2.prototype.initialize.call(this, e2)];
            case 1:
              return i.sent(), n2 = this.Ko.syncEngine, this.sharedClientState instanceof mo ? (this.sharedClientState.syncEngine = {
                ui: Xs.bind(null, n2),
                ai: eu.bind(null, n2),
                hi: nu.bind(null, n2),
                fn: tu.bind(null, n2),
                ci: Ys.bind(null, n2)
              }, [4, this.sharedClientState.start()]) : [3, 3];
            case 2:
              i.sent(), i.label = 3;
            case 3:
              return [4, this.persistence.He(function(t3) {
                return __awaiter(r2, void 0, void 0, function() {
                  return __generator(this, function(e3) {
                    switch (e3.label) {
                      case 0:
                        return [4, $s(this.Ko.syncEngine, t3)];
                      case 1:
                        return e3.sent(), this.gcScheduler && (t3 && !this.gcScheduler.started ? this.gcScheduler.start(this.localStore) : t3 || this.gcScheduler.stop()), [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              })];
            case 4:
              return i.sent(), [
                2
                /*return*/
              ];
          }
        });
      });
    }, e.prototype.Bo = function(t3) {
      var e2 = To();
      if (!mo.yt(e2))
        throw new T2(E2.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
      var n2 = xi(t3.databaseInfo.databaseId, t3.databaseInfo.persistenceKey);
      return new mo(e2, t3.asyncQueue, n2, t3.clientId, t3.initialUser);
    }, e;
  }(uu)
);
var cu = (
  /** @class */
  function() {
    function t2() {
    }
    return t2.prototype.initialize = function(t3, e) {
      return __awaiter(this, void 0, void 0, function() {
        var n2 = this;
        return __generator(this, function(r2) {
          switch (r2.label) {
            case 0:
              return this.localStore ? [3, 2] : (this.localStore = t3.localStore, this.sharedClientState = t3.sharedClientState, this.datastore = this.createDatastore(e), this.remoteStore = this.createRemoteStore(e), this.eventManager = this.createEventManager(e), this.syncEngine = this.createSyncEngine(
                e,
                /* startAsPrimary=*/
                !t3.synchronizeTabs
              ), this.sharedClientState.onlineStateHandler = function(t4) {
                return Os(
                  n2.syncEngine,
                  t4,
                  1
                  /* SharedClientState */
                );
              }, this.remoteStore.remoteSyncer.handleCredentialChange = zs.bind(null, this.syncEngine), [4, ns(this.remoteStore, this.syncEngine.isPrimaryClient)]);
            case 1:
              r2.sent(), r2.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, t2.prototype.createEventManager = function(t3) {
      return new fs();
    }, t2.prototype.createDatastore = function(t3) {
      var e, n2 = Do(t3.databaseInfo.databaseId), r2 = (e = t3.databaseInfo, new Eo(e));
      return function(t4, e2, n3) {
        return new Co(t4, e2, n3);
      }(t3.credentials, r2, n2);
    }, t2.prototype.createRemoteStore = function(t3) {
      var e, n2, r2, i, o, s = this;
      return e = this.localStore, n2 = this.datastore, r2 = t3.asyncQueue, i = function(t4) {
        return Os(
          s.syncEngine,
          t4,
          0
          /* RemoteStore */
        );
      }, o = bo.yt() ? new bo() : new wo(), new Oo(e, n2, r2, i, o);
    }, t2.prototype.createSyncEngine = function(t3, e) {
      return function(t4, e2, n2, r2, i, o, s) {
        var u = new Ns(t4, e2, n2, r2, i, o);
        return s && (u.Oo = true), u;
      }(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, t3.initialUser, t3.maxConcurrentLimboResolutions, e);
    }, t2.prototype.terminate = function() {
      return function(t3) {
        return __awaiter(this, void 0, void 0, function() {
          var e;
          return __generator(this, function(n2) {
            switch (n2.label) {
              case 0:
                return e = O2(t3), N2("RemoteStore", "RemoteStore shutting down."), e.$r.add(
                  5
                  /* Shutdown */
                ), [4, Po(e)];
              case 1:
                return n2.sent(), e.Lr.shutdown(), // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
                // triggering spurious listener events with cached data, etc.
                e.Br.set(
                  "Unknown"
                  /* Unknown */
                ), [
                  2
                  /*return*/
                ];
            }
          });
        });
      }(this.remoteStore);
    }, t2;
  }()
);
var fu = (
  /** @class */
  function() {
    function t2(t3) {
      this.observer = t3, /**
           * When set to true, will not raise future events. Necessary to deal with
           * async detachment of listener.
           */
      this.muted = false;
    }
    return t2.prototype.next = function(t3) {
      this.observer.next && this.jo(this.observer.next, t3);
    }, t2.prototype.error = function(t3) {
      this.observer.error ? this.jo(this.observer.error, t3) : console.error("Uncaught Error in snapshot listener:", t3);
    }, t2.prototype.Wo = function() {
      this.muted = true;
    }, t2.prototype.jo = function(t3, e) {
      var n2 = this;
      this.muted || setTimeout(function() {
        n2.muted || t3(e);
      }, 0);
    }, t2;
  }()
);
var lu = (
  /** @class */
  function() {
    function t2(t3, e) {
      var n2 = this;
      this.Go = t3, this.R = e, /** Cached bundle metadata. */
      this.metadata = new vr(), /**
           * Internal buffer to hold bundle content, accumulating incomplete element
           * content.
           */
      this.buffer = new Uint8Array(), this.zo = new TextDecoder("utf-8"), // Read the metadata (which is the first element).
      this.Ho().then(function(t4) {
        t4 && t4.io() ? n2.metadata.resolve(t4.payload.metadata) : n2.metadata.reject(new Error("The first element of the bundle is not a metadata, it is\n             " + JSON.stringify(null == t4 ? void 0 : t4.payload)));
      }, function(t4) {
        return n2.metadata.reject(t4);
      });
    }
    return t2.prototype.close = function() {
      return this.Go.cancel();
    }, t2.prototype.getMetadata = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          return [2, this.metadata.promise];
        });
      });
    }, t2.prototype.Lo = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          switch (t3.label) {
            case 0:
              return [4, this.getMetadata()];
            case 1:
              return [2, (t3.sent(), this.Ho())];
          }
        });
      });
    }, /**
     * Reads from the head of internal buffer, and pulling more data from
     * underlying stream if a complete element cannot be found, until an
     * element(including the prefixed length and the JSON string) is found.
     *
     * Once a complete element is read, it is dropped from internal buffer.
     *
     * Returns either the bundled element, or null if we have reached the end of
     * the stream.
     */
    t2.prototype.Ho = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e, n2, r2;
        return __generator(this, function(i) {
          switch (i.label) {
            case 0:
              return [4, this.Jo()];
            case 1:
              return null === (t3 = i.sent()) ? [2, null] : (e = this.zo.decode(t3), n2 = Number(e), isNaN(n2) && this.Yo("length string (" + e + ") is not valid number"), [4, this.Xo(n2)]);
            case 2:
              return r2 = i.sent(), [2, new gs(JSON.parse(r2), t3.length + n2)];
          }
        });
      });
    }, /** First index of '{' from the underlying buffer. */
    t2.prototype.Zo = function() {
      return this.buffer.findIndex(function(t3) {
        return t3 === "{".charCodeAt(0);
      });
    }, /**
     * Reads from the beginning of the internal buffer, until the first '{', and
     * return the content.
     *
     * If reached end of the stream, returns a null.
     */
    t2.prototype.Jo = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e;
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              return this.Zo() < 0 ? [4, this.tc()] : [3, 3];
            case 1:
              if (n2.sent())
                return [3, 3];
              n2.label = 2;
            case 2:
              return [3, 0];
            case 3:
              return 0 === this.buffer.length ? [2, null] : (
                // Broke out of the loop because underlying stream is closed, but still
                // cannot find an open bracket.
                ((t3 = this.Zo()) < 0 && this.Yo("Reached the end of bundle when a length string is expected."), e = this.buffer.slice(0, t3), [2, (this.buffer = this.buffer.slice(t3), e)])
              );
          }
        });
      });
    }, /**
     * Reads from a specified position from the internal buffer, for a specified
     * number of bytes, pulling more data from the underlying stream if needed.
     *
     * Returns a string decoded from the read bytes.
     */
    t2.prototype.Xo = function(t3) {
      return __awaiter(this, void 0, void 0, function() {
        var e;
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              return this.buffer.length < t3 ? [4, this.tc()] : [3, 3];
            case 1:
              n2.sent() && this.Yo("Reached the end of bundle when more is expected."), n2.label = 2;
            case 2:
              return [3, 0];
            case 3:
              return e = this.zo.decode(this.buffer.slice(0, t3)), [2, (this.buffer = this.buffer.slice(t3), e)];
          }
        });
      });
    }, t2.prototype.Yo = function(t3) {
      throw this.Go.cancel(), new Error("Invalid bundle format: " + t3);
    }, /**
     * Pulls more data from underlying stream to internal buffer.
     * Returns a boolean indicating whether the stream is finished.
     */
    t2.prototype.tc = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e;
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              return [4, this.Go.read()];
            case 1:
              return (t3 = n2.sent()).done || ((e = new Uint8Array(this.buffer.length + t3.value.length)).set(this.buffer), e.set(t3.value, this.buffer.length), this.buffer = e), [2, t3.done];
          }
        });
      });
    }, t2;
  }()
);
var du = (
  /** @class */
  function() {
    function t2(t3) {
      this.datastore = t3, // The version of each document that was read during this transaction.
      this.readVersions = /* @__PURE__ */ new Map(), this.mutations = [], this.committed = false, /**
           * A deferred usage error that occurred previously in this transaction that
           * will cause the transaction to fail once it actually commits.
           */
      this.lastWriteError = null, /**
           * Set of documents that have been written in the transaction.
           *
           * When there's more than one write to the same key in a transaction, any
           * writes after the first are handled differently.
           */
      this.writtenDocs = /* @__PURE__ */ new Set();
    }
    return t2.prototype.lookup = function(t3) {
      return __awaiter(this, void 0, void 0, function() {
        var e, n2 = this;
        return __generator(this, function(r2) {
          switch (r2.label) {
            case 0:
              if (this.ensureCommitNotCalled(), this.mutations.length > 0)
                throw new T2(E2.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
              return [4, function(t4, e2) {
                return __awaiter(this, void 0, void 0, function() {
                  var n3, r3, i, o, s, u;
                  return __generator(this, function(a) {
                    switch (a.label) {
                      case 0:
                        return n3 = O2(t4), r3 = Nn(n3.R) + "/documents", i = {
                          documents: e2.map(function(t5) {
                            return En(n3.R, t5);
                          })
                        }, [4, n3.Oi("BatchGetDocuments", r3, i)];
                      case 1:
                        return o = a.sent(), s = /* @__PURE__ */ new Map(), o.forEach(function(t5) {
                          var e3 = function(t6, e4) {
                            return "found" in e4 ? function(t7, e5) {
                              R2(!!e5.found), e5.found.name, e5.found.updateTime;
                              var n4 = Tn(t7, e5.found.name), r4 = bn(e5.found.updateTime), i2 = new bt({
                                mapValue: {
                                  fields: e5.found.fields
                                }
                              });
                              return _t.newFoundDocument(n4, r4, i2);
                            }(t6, e4) : "missing" in e4 ? function(t7, e5) {
                              R2(!!e5.missing), R2(!!e5.readTime);
                              var n4 = Tn(t7, e5.missing), r4 = bn(e5.readTime);
                              return _t.newNoDocument(n4, r4);
                            }(t6, e4) : C();
                          }(n3.R, t5);
                          s.set(e3.key.toString(), e3);
                        }), u = [], [2, (e2.forEach(function(t5) {
                          var e3 = s.get(t5.toString());
                          R2(!!e3), u.push(e3);
                        }), u)];
                    }
                  });
                });
              }(this.datastore, t3)];
            case 1:
              return [2, ((e = r2.sent()).forEach(function(t4) {
                return n2.recordVersion(t4);
              }), e)];
          }
        });
      });
    }, t2.prototype.set = function(t3, e) {
      this.write(e.toMutation(t3, this.precondition(t3))), this.writtenDocs.add(t3.toString());
    }, t2.prototype.update = function(t3, e) {
      try {
        this.write(e.toMutation(t3, this.preconditionForUpdate(t3)));
      } catch (t4) {
        this.lastWriteError = t4;
      }
      this.writtenDocs.add(t3.toString());
    }, t2.prototype.delete = function(t3) {
      this.write(new Ve(t3, this.precondition(t3))), this.writtenDocs.add(t3.toString());
    }, t2.prototype.commit = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e = this;
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              if (this.ensureCommitNotCalled(), this.lastWriteError)
                throw this.lastWriteError;
              return t3 = this.readVersions, // For each mutation, note that the doc was written.
              this.mutations.forEach(function(e2) {
                t3.delete(e2.key.toString());
              }), // For each document that was read but not written to, we want to perform
              // a `verify` operation.
              t3.forEach(function(t4, n3) {
                var r2 = st.fromPath(n3);
                e.mutations.push(new qe(r2, e.precondition(r2)));
              }), [4, function(t4, e2) {
                return __awaiter(this, void 0, void 0, function() {
                  var n3, r2, i;
                  return __generator(this, function(o) {
                    switch (o.label) {
                      case 0:
                        return n3 = O2(t4), r2 = Nn(n3.R) + "/documents", i = {
                          writes: e2.map(function(t5) {
                            return Cn(n3.R, t5);
                          })
                        }, [4, n3.Ni("Commit", r2, i)];
                      case 1:
                        return o.sent(), [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              }(this.datastore, this.mutations)];
            case 1:
              return n2.sent(), this.committed = true, [
                2
                /*return*/
              ];
          }
        });
      });
    }, t2.prototype.recordVersion = function(t3) {
      var e;
      if (t3.isFoundDocument())
        e = t3.version;
      else {
        if (!t3.isNoDocument())
          throw C();
        e = U2.min();
      }
      var n2 = this.readVersions.get(t3.key.toString());
      if (n2) {
        if (!e.isEqual(n2))
          throw new T2(E2.ABORTED, "Document version changed between two reads.");
      } else
        this.readVersions.set(t3.key.toString(), e);
    }, /**
     * Returns the version of this document when it was read in this transaction,
     * as a precondition, or no precondition if it was not read.
     */
    t2.prototype.precondition = function(t3) {
      var e = this.readVersions.get(t3.toString());
      return !this.writtenDocs.has(t3.toString()) && e ? Ee.updateTime(e) : Ee.none();
    }, /**
     * Returns the precondition for a document if the operation is an update.
     */
    t2.prototype.preconditionForUpdate = function(t3) {
      var e = this.readVersions.get(t3.toString());
      if (!this.writtenDocs.has(t3.toString()) && e) {
        if (e.isEqual(U2.min()))
          throw new T2(E2.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
        return Ee.updateTime(e);
      }
      return Ee.exists(true);
    }, t2.prototype.write = function(t3) {
      this.ensureCommitNotCalled(), this.mutations.push(t3);
    }, t2.prototype.ensureCommitNotCalled = function() {
    }, t2;
  }()
);
var pu = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2) {
      this.asyncQueue = t3, this.datastore = e, this.updateFunction = n2, this.deferred = r2, this.ec = 5, this.Zi = new No(
        this.asyncQueue,
        "transaction_retry"
        /* TransactionRetry */
      );
    }
    return t2.prototype.run = function() {
      this.nc();
    }, t2.prototype.nc = function() {
      var t3 = this;
      this.Zi.ji(function() {
        return __awaiter(t3, void 0, void 0, function() {
          var t4, e, n2 = this;
          return __generator(this, function(r2) {
            return t4 = new du(this.datastore), (e = this.sc(t4)) && e.then(function(e2) {
              n2.asyncQueue.enqueueAndForget(function() {
                return t4.commit().then(function() {
                  n2.deferred.resolve(e2);
                }).catch(function(t5) {
                  n2.ic(t5);
                });
              });
            }).catch(function(t5) {
              n2.ic(t5);
            }), [
              2
              /*return*/
            ];
          });
        });
      });
    }, t2.prototype.sc = function(t3) {
      try {
        var e = this.updateFunction(t3);
        return !rt(e) && e.catch && e.then ? e : (this.deferred.reject(Error("Transaction callback must return a Promise")), null);
      } catch (t4) {
        return this.deferred.reject(t4), null;
      }
    }, t2.prototype.ic = function(t3) {
      var e = this;
      this.ec > 0 && this.rc(t3) ? (this.ec -= 1, this.asyncQueue.enqueueAndForget(function() {
        return e.nc(), Promise.resolve();
      })) : this.deferred.reject(t3);
    }, t2.prototype.rc = function(t3) {
      if ("FirebaseError" === t3.name) {
        var e = t3.code;
        return "aborted" === e || "failed-precondition" === e || !Be(e);
      }
      return false;
    }, t2;
  }()
);
var yu = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      var r2 = this;
      this.credentials = t3, this.asyncQueue = e, this.databaseInfo = n2, this.user = uo.UNAUTHENTICATED, this.clientId = P2.u(), this.credentialListener = function() {
      }, this.receivedInitialUser = new vr(), this.credentials.setChangeListener(function(t4) {
        N2("FirestoreClient", "Received user=", t4.uid), r2.user = t4, r2.credentialListener(t4), r2.receivedInitialUser.resolve();
      });
    }
    return t2.prototype.getConfiguration = function() {
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(t3) {
          switch (t3.label) {
            case 0:
              return [4, this.receivedInitialUser.promise];
            case 1:
              return [2, (t3.sent(), {
                asyncQueue: this.asyncQueue,
                databaseInfo: this.databaseInfo,
                clientId: this.clientId,
                credentials: this.credentials,
                initialUser: this.user,
                maxConcurrentLimboResolutions: 100
              })];
          }
        });
      });
    }, t2.prototype.setCredentialChangeListener = function(t3) {
      var e = this;
      this.credentialListener = t3, // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.receivedInitialUser.promise.then(function() {
        return e.credentialListener(e.user);
      });
    }, /**
     * Checks that the client has not been terminated. Ensures that other methods on
     * this class cannot be called after the client is terminated.
     */
    t2.prototype.verifyNotTerminated = function() {
      if (this.asyncQueue.isShuttingDown)
        throw new T2(E2.FAILED_PRECONDITION, "The client has already been terminated.");
    }, t2.prototype.terminate = function() {
      var t3 = this;
      this.asyncQueue.enterRestrictedMode();
      var e = new vr();
      return this.asyncQueue.enqueueAndForgetEvenWhileRestricted(function() {
        return __awaiter(t3, void 0, void 0, function() {
          var t4, n2;
          return __generator(this, function(r2) {
            switch (r2.label) {
              case 0:
                return r2.trys.push([0, 5, , 6]), this.onlineComponents ? [4, this.onlineComponents.terminate()] : [3, 2];
              case 1:
                r2.sent(), r2.label = 2;
              case 2:
                return this.offlineComponents ? [4, this.offlineComponents.terminate()] : [3, 4];
              case 3:
                r2.sent(), r2.label = 4;
              case 4:
                return this.credentials.removeChangeListener(), e.resolve(), [3, 6];
              case 5:
                return t4 = r2.sent(), n2 = ss(t4, "Failed to shutdown persistence"), e.reject(n2), [3, 6];
              case 6:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }), e.promise;
    }, t2;
  }()
);
function vu(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2, i = this;
    return __generator(this, function(o) {
      switch (o.label) {
        case 0:
          return t2.asyncQueue.verifyOperationInProgress(), N2("FirestoreClient", "Initializing OfflineComponentProvider"), [4, t2.getConfiguration()];
        case 1:
          return n2 = o.sent(), [4, e.initialize(n2)];
        case 2:
          return o.sent(), r2 = n2.initialUser, t2.setCredentialChangeListener(function(n3) {
            r2.isEqual(n3) || (r2 = n3, t2.asyncQueue.enqueueRetryable(function() {
              return __awaiter(i, void 0, void 0, function() {
                return __generator(this, function(t3) {
                  switch (t3.label) {
                    case 0:
                      return [4, Fi(e.localStore, n3)];
                    case 1:
                      return t3.sent(), [
                        2
                        /*return*/
                      ];
                  }
                });
              });
            }));
          }), // When a user calls clearPersistence() in one client, all other clients
          // need to be terminated to allow the delete to succeed.
          e.persistence.setDatabaseDeletedListener(function() {
            return t2.terminate();
          }), t2.offlineComponents = e, [
            2
            /*return*/
          ];
      }
    });
  });
}
function mu(t2, e) {
  return __awaiter(this, void 0, void 0, function() {
    var n2, r2;
    return __generator(this, function(i) {
      switch (i.label) {
        case 0:
          return t2.asyncQueue.verifyOperationInProgress(), [4, gu(t2)];
        case 1:
          return n2 = i.sent(), N2("FirestoreClient", "Initializing OnlineComponentProvider"), [4, t2.getConfiguration()];
        case 2:
          return r2 = i.sent(), [4, e.initialize(n2, r2)];
        case 3:
          return i.sent(), // The CredentialChangeListener of the online component provider takes
          // precedence over the offline component provider.
          t2.setCredentialChangeListener(function(n3) {
            return t2.asyncQueue.enqueueRetryable(function() {
              return function(t3, e2) {
                return __awaiter(this, void 0, void 0, function() {
                  var n4, r3;
                  return __generator(this, function(i2) {
                    switch (i2.label) {
                      case 0:
                        return (n4 = O2(t3)).asyncQueue.verifyOperationInProgress(), N2("RemoteStore", "RemoteStore received new credentials"), r3 = jo(n4), // Tear down and re-create our network streams. This will ensure we get a
                        // fresh auth token for the new user and re-fill the write pipeline with
                        // new mutations from the LocalStore (since mutations are per-user).
                        n4.$r.add(
                          3
                          /* CredentialChange */
                        ), [4, Po(n4)];
                      case 1:
                        return i2.sent(), r3 && // Don't set the network status to Unknown if we are offline.
                        n4.Br.set(
                          "Unknown"
                          /* Unknown */
                        ), [4, n4.remoteSyncer.handleCredentialChange(e2)];
                      case 2:
                        return i2.sent(), n4.$r.delete(
                          3
                          /* CredentialChange */
                        ), [4, Lo(n4)];
                      case 3:
                        return i2.sent(), [
                          2
                          /*return*/
                        ];
                    }
                  });
                });
              }(e.remoteStore, n3);
            });
          }), t2.onlineComponents = e, [
            2
            /*return*/
          ];
      }
    });
  });
}
function gu(t2) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(e) {
      switch (e.label) {
        case 0:
          return t2.offlineComponents ? [3, 2] : (N2("FirestoreClient", "Using default OfflineComponentProvider"), [4, vu(t2, new su())]);
        case 1:
          e.sent(), e.label = 2;
        case 2:
          return [2, t2.offlineComponents];
      }
    });
  });
}
function wu(t2) {
  return __awaiter(this, void 0, void 0, function() {
    return __generator(this, function(e) {
      switch (e.label) {
        case 0:
          return t2.onlineComponents ? [3, 2] : (N2("FirestoreClient", "Using default OnlineComponentProvider"), [4, mu(t2, new cu())]);
        case 1:
          e.sent(), e.label = 2;
        case 2:
          return [2, t2.onlineComponents];
      }
    });
  });
}
function bu(t2) {
  return gu(t2).then(function(t3) {
    return t3.persistence;
  });
}
function Iu(t2) {
  return gu(t2).then(function(t3) {
    return t3.localStore;
  });
}
function _u(t2) {
  return wu(t2).then(function(t3) {
    return t3.remoteStore;
  });
}
function Eu(t2) {
  return wu(t2).then(function(t3) {
    return t3.syncEngine;
  });
}
function Tu(t2) {
  return __awaiter(this, void 0, void 0, function() {
    var e, n2;
    return __generator(this, function(r2) {
      switch (r2.label) {
        case 0:
          return [4, wu(t2)];
        case 1:
          return e = r2.sent(), [2, ((n2 = e.eventManager).onListen = As.bind(null, e.syncEngine), n2.onUnlisten = xs.bind(null, e.syncEngine), n2)];
      }
    });
  });
}
function Su(t2, e, n2) {
  var r2 = this;
  void 0 === n2 && (n2 = {});
  var i = new vr();
  return t2.asyncQueue.enqueueAndForget(function() {
    return __awaiter(r2, void 0, void 0, function() {
      var r3;
      return __generator(this, function(o) {
        switch (o.label) {
          case 0:
            return r3 = function(t3, e2, n3, r4, i2) {
              var o2 = new fu({
                next: function(o3) {
                  e2.enqueueAndForget(function() {
                    return ds(t3, s);
                  });
                  var u = o3.docs.has(n3);
                  !u && o3.fromCache ? (
                    // TODO(dimond): If we're online and the document doesn't
                    // exist then we resolve with a doc.exists set to false. If
                    // we're offline however, we reject the Promise in this
                    // case. Two options: 1) Cache the negative response from
                    // the server so we can deliver that even when you're
                    // offline 2) Actually reject the Promise in the online case
                    // if the document doesn't exist.
                    i2.reject(new T2(E2.UNAVAILABLE, "Failed to get document because the client is offline."))
                  ) : u && o3.fromCache && r4 && "server" === r4.source ? i2.reject(new T2(E2.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')) : i2.resolve(o3);
                },
                error: function(t4) {
                  return i2.reject(t4);
                }
              }), s = new ms(Qt(n3.path), o2, {
                includeMetadataChanges: true,
                so: true
              });
              return ls(t3, s);
            }, [4, Tu(t2)];
          case 1:
            return [2, r3.apply(void 0, [o.sent(), t2.asyncQueue, e, n2, i])];
        }
      });
    });
  }), i.promise;
}
function Du(t2, e, n2) {
  var r2 = this;
  void 0 === n2 && (n2 = {});
  var i = new vr();
  return t2.asyncQueue.enqueueAndForget(function() {
    return __awaiter(r2, void 0, void 0, function() {
      var r3;
      return __generator(this, function(o) {
        switch (o.label) {
          case 0:
            return r3 = function(t3, e2, n3, r4, i2) {
              var o2 = new fu({
                next: function(n4) {
                  e2.enqueueAndForget(function() {
                    return ds(t3, s);
                  }), n4.fromCache && "server" === r4.source ? i2.reject(new T2(E2.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')) : i2.resolve(n4);
                },
                error: function(t4) {
                  return i2.reject(t4);
                }
              }), s = new ms(n3, o2, {
                includeMetadataChanges: true,
                so: true
              });
              return ls(t3, s);
            }, [4, Tu(t2)];
          case 1:
            return [2, r3.apply(void 0, [o.sent(), t2.asyncQueue, e, n2, i])];
        }
      });
    });
  }), i.promise;
}
var Nu = (
  /**
       * Constructs a DatabaseInfo using the provided host, databaseId and
       * persistenceKey.
       *
       * @param databaseId - The database to use.
       * @param appId - The Firebase App Id.
       * @param persistenceKey - A unique identifier for this Firestore's local
       * storage (used in conjunction with the databaseId).
       * @param host - The Firestore backend host to connect to.
       * @param ssl - Whether to use SSL when connecting.
       * @param forceLongPolling - Whether to use the forceLongPolling option
       * when using WebChannel as the network transport.
       * @param autoDetectLongPolling - Whether to use the detectBufferingProxy
       * option when using WebChannel as the network transport.
       */
  function(t2, e, n2, r2, i, o, s) {
    this.databaseId = t2, this.appId = e, this.persistenceKey = n2, this.host = r2, this.ssl = i, this.forceLongPolling = o, this.autoDetectLongPolling = s;
  }
);
var Au = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.projectId = t3, this.database = e || "(default)";
    }
    return Object.defineProperty(t2.prototype, "isDefaultDatabase", {
      get: function() {
        return "(default)" === this.database;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.isEqual = function(e) {
      return e instanceof t2 && e.projectId === this.projectId && e.database === this.database;
    }, t2;
  }()
);
var ku = /* @__PURE__ */ new Map();
var xu = function(t2, e) {
  this.user = e, this.type = "OAuth", this.authHeaders = {}, // Set the headers using Object Literal notation to avoid minification
  this.authHeaders.Authorization = "Bearer " + t2;
};
var Cu = (
  /** @class */
  function() {
    function t2() {
      this.changeListener = null;
    }
    return t2.prototype.getToken = function() {
      return Promise.resolve(null);
    }, t2.prototype.invalidateToken = function() {
    }, t2.prototype.setChangeListener = function(t3) {
      this.changeListener = t3, // Fire with initial user.
      t3(uo.UNAUTHENTICATED);
    }, t2.prototype.removeChangeListener = function() {
      this.changeListener = null;
    }, t2;
  }()
);
var Ru = (
  /** @class */
  function() {
    function t2(t3) {
      var e = this;
      this.oc = null, /** Tracks the current User. */
      this.currentUser = uo.UNAUTHENTICATED, this.receivedInitialUser = false, /**
           * Counter used to detect if the token changed while a getToken request was
           * outstanding.
           */
      this.cc = 0, /** The listener registered with setChangeListener(). */
      this.changeListener = null, this.forceRefresh = false, this.oc = function() {
        e.cc++, e.currentUser = e.uc(), e.receivedInitialUser = true, e.changeListener && e.changeListener(e.currentUser);
      }, this.cc = 0, this.auth = t3.getImmediate({
        optional: true
      }), this.auth ? this.auth.addAuthTokenListener(this.oc) : (
        // if auth is not available, invoke tokenListener once with null token
        (this.oc(null), t3.get().then(function(t4) {
          e.auth = t4, e.oc && // tokenListener can be removed by removeChangeListener()
          e.auth.addAuthTokenListener(e.oc);
        }, function() {
        }))
      );
    }
    return t2.prototype.getToken = function() {
      var t3 = this, e = this.cc, n2 = this.forceRefresh;
      return this.forceRefresh = false, this.auth ? this.auth.getToken(n2).then(function(n3) {
        return t3.cc !== e ? (N2("FirebaseCredentialsProvider", "getToken aborted due to token change."), t3.getToken()) : n3 ? (R2("string" == typeof n3.accessToken), new xu(n3.accessToken, t3.currentUser)) : null;
      }) : Promise.resolve(null);
    }, t2.prototype.invalidateToken = function() {
      this.forceRefresh = true;
    }, t2.prototype.setChangeListener = function(t3) {
      this.changeListener = t3, // Fire the initial event
      this.receivedInitialUser && t3(this.currentUser);
    }, t2.prototype.removeChangeListener = function() {
      this.auth && this.auth.removeAuthTokenListener(this.oc), this.oc = null, this.changeListener = null;
    }, // Auth.getUid() can return null even with a user logged in. It is because
    // getUid() is synchronous, but the auth code populating Uid is asynchronous.
    // This method should only be called in the AuthTokenListener callback
    // to guarantee to get the actual user.
    t2.prototype.uc = function() {
      var t3 = this.auth && this.auth.getUid();
      return R2(null === t3 || "string" == typeof t3), new uo(t3);
    }, t2;
  }()
);
var Ou = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this.ac = t3, this.hc = e, this.lc = n2, this.type = "FirstParty", this.user = uo.FIRST_PARTY;
    }
    return Object.defineProperty(t2.prototype, "authHeaders", {
      get: function() {
        var t3 = {
          "X-Goog-AuthUser": this.hc
        }, e = this.ac.auth.getAuthHeaderValueForFirstParty([]);
        return e && (t3.Authorization = e), this.lc && (t3["X-Goog-Iam-Authorization-Token"] = this.lc), t3;
      },
      enumerable: false,
      configurable: true
    }), t2;
  }()
);
var Lu = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this.ac = t3, this.hc = e, this.lc = n2;
    }
    return t2.prototype.getToken = function() {
      return Promise.resolve(new Ou(this.ac, this.hc, this.lc));
    }, t2.prototype.setChangeListener = function(t3) {
      t3(uo.FIRST_PARTY);
    }, t2.prototype.removeChangeListener = function() {
    }, t2.prototype.invalidateToken = function() {
    }, t2;
  }()
);
function Pu(t2, e, n2) {
  if (!n2)
    throw new T2(E2.INVALID_ARGUMENT, "Function " + t2 + "() cannot be called with an empty " + e + ".");
}
function Mu(t2, e) {
  if (void 0 === e)
    return {
      merge: false
    };
  if (void 0 !== e.mergeFields && void 0 !== e.merge)
    throw new T2(E2.INVALID_ARGUMENT, "Invalid options passed to function " + t2 + '(): You cannot specify both "merge" and "mergeFields".');
  return e;
}
function Fu(t2, e, n2, r2) {
  if (true === e && true === r2)
    throw new T2(E2.INVALID_ARGUMENT, t2 + " and " + n2 + " cannot be used together.");
}
function Vu(t2) {
  if (!st.isDocumentKey(t2))
    throw new T2(E2.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + t2 + " has " + t2.length + ".");
}
function qu(t2) {
  if (st.isDocumentKey(t2))
    throw new T2(E2.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + t2 + " has " + t2.length + ".");
}
function Uu(t2) {
  if (void 0 === t2)
    return "undefined";
  if (null === t2)
    return "null";
  if ("string" == typeof t2)
    return t2.length > 20 && (t2 = t2.substring(0, 20) + "..."), JSON.stringify(t2);
  if ("number" == typeof t2 || "boolean" == typeof t2)
    return "" + t2;
  if ("object" == typeof t2) {
    if (t2 instanceof Array)
      return "an array";
    var e = (
      /** Hacky method to try to get the constructor name for an object. */
      function(t3) {
        if (t3.constructor) {
          var e2 = /function\s+([^\s(]+)\s*\(/.exec(t3.constructor.toString());
          if (e2 && e2.length > 1)
            return e2[1];
        }
        return null;
      }(t2)
    );
    return e ? "a custom " + e + " object" : "an object";
  }
  return "function" == typeof t2 ? "a function" : C();
}
function Bu(t2, e) {
  if ("_delegate" in t2 && // Unwrap Compat types
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  (t2 = t2._delegate), !(t2 instanceof e)) {
    if (e.name === t2.constructor.name)
      throw new T2(E2.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    var n2 = Uu(t2);
    throw new T2(E2.INVALID_ARGUMENT, "Expected type '" + e.name + "', but it was: " + n2);
  }
  return t2;
}
function ju(t2, e) {
  if (e <= 0)
    throw new T2(E2.INVALID_ARGUMENT, "Function " + t2 + "() requires a positive number, but it was: " + e + ".");
}
var Ku = (
  /** @class */
  function() {
    function t2(t3) {
      var e;
      if (void 0 === t3.host) {
        if (void 0 !== t3.ssl)
          throw new T2(E2.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
        this.host = "firestore.googleapis.com", this.ssl = true;
      } else
        this.host = t3.host, this.ssl = null === (e = t3.ssl) || void 0 === e || e;
      if (this.credentials = t3.credentials, this.ignoreUndefinedProperties = !!t3.ignoreUndefinedProperties, void 0 === t3.cacheSizeBytes)
        this.cacheSizeBytes = 41943040;
      else {
        if (-1 !== t3.cacheSizeBytes && t3.cacheSizeBytes < 1048576)
          throw new T2(E2.INVALID_ARGUMENT, "cacheSizeBytes must be at least 1048576");
        this.cacheSizeBytes = t3.cacheSizeBytes;
      }
      this.experimentalForceLongPolling = !!t3.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t3.experimentalAutoDetectLongPolling, Fu("experimentalForceLongPolling", t3.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", t3.experimentalAutoDetectLongPolling);
    }
    return t2.prototype.isEqual = function(t3) {
      return this.host === t3.host && this.ssl === t3.ssl && this.credentials === t3.credentials && this.cacheSizeBytes === t3.cacheSizeBytes && this.experimentalForceLongPolling === t3.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t3.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t3.ignoreUndefinedProperties;
    }, t2;
  }()
);
var Gu = (
  /** @class */
  function() {
    function t2(t3, e) {
      this._persistenceKey = "(lite)", this._settings = new Ku({}), this._settingsFrozen = false, t3 instanceof Au ? (this._databaseId = t3, this._credentials = new Cu()) : (this._app = t3, this._databaseId = function(t4) {
        if (!Object.prototype.hasOwnProperty.apply(t4.options, ["projectId"]))
          throw new T2(E2.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
        return new Au(t4.options.projectId);
      }(t3), this._credentials = new Ru(e));
    }
    return Object.defineProperty(t2.prototype, "app", {
      /**
       * The {@link FirebaseApp} associated with this `Firestore` service
       * instance.
       */
      get: function() {
        if (!this._app)
          throw new T2(E2.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
        return this._app;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "_initialized", {
      get: function() {
        return this._settingsFrozen;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "_terminated", {
      get: function() {
        return void 0 !== this._terminateTask;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype._setSettings = function(t3) {
      if (this._settingsFrozen)
        throw new T2(E2.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
      this._settings = new Ku(t3), void 0 !== t3.credentials && (this._credentials = function(t4) {
        if (!t4)
          return new Cu();
        switch (t4.type) {
          case "gapi":
            var e = t4.client;
            return R2(!("object" != typeof e || null === e || !e.auth || !e.auth.getAuthHeaderValueForFirstParty)), new Lu(e, t4.sessionIndex || "0", t4.iamToken || null);
          case "provider":
            return t4.client;
          default:
            throw new T2(E2.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
        }
      }(t3.credentials));
    }, t2.prototype._getSettings = function() {
      return this._settings;
    }, t2.prototype._freezeSettings = function() {
      return this._settingsFrozen = true, this._settings;
    }, t2.prototype._delete = function() {
      return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;
    }, t2.prototype.toJSON = function() {
      return {
        app: this._app,
        databaseId: this._databaseId,
        settings: this._settings
      };
    }, /**
     * Terminates all components used by this client. Subclasses can override
     * this method to clean up their own dependencies, but must also call this
     * method.
     *
     * Only ever called once.
     */
    t2.prototype._terminate = function() {
      return t3 = this, (e = ku.get(t3)) && (N2("ComponentProvider", "Removing Datastore"), ku.delete(t3), e.terminate()), Promise.resolve();
      var t3, e;
    }, t2;
  }()
);
var Qu = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this._converter = e, this._key = n2, /** The type of this Firestore reference. */
      this.type = "document", this.firestore = t3;
    }
    return Object.defineProperty(t2.prototype, "_path", {
      get: function() {
        return this._key.path;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "id", {
      /**
       * The document's identifier within its collection.
       */
      get: function() {
        return this._key.path.lastSegment();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "path", {
      /**
       * A string representing the path of the referenced document (relative
       * to the root of the database).
       */
      get: function() {
        return this._key.path.canonicalString();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "parent", {
      /**
       * The collection this `DocumentReference` belongs to.
       */
      get: function() {
        return new Wu(this.firestore, this._converter, this._key.path.popLast());
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.withConverter = function(e) {
      return new t2(this.firestore, e, this._key);
    }, t2;
  }()
);
var zu = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this._converter = e, this._query = n2, /** The type of this Firestore reference. */
      this.type = "query", this.firestore = t3;
    }
    return t2.prototype.withConverter = function(e) {
      return new t2(this.firestore, e, this._query);
    }, t2;
  }()
);
var Wu = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2) {
      var i = this;
      return (i = t2.call(this, e2, n2, Qt(r2)) || this).firestore = e2, i._path = r2, i.type = "collection", i;
    }
    return __extends(e, t2), Object.defineProperty(e.prototype, "id", {
      /** The collection's identifier. */
      get: function() {
        return this._query.path.lastSegment();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "path", {
      /**
       * A string representing the path of the referenced collection (relative
       * to the root of the database).
       */
      get: function() {
        return this._query.path.canonicalString();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "parent", {
      /**
       * A reference to the containing `DocumentReference` if this is a
       * subcollection. If this isn't a subcollection, the reference is null.
       */
      get: function() {
        var t3 = this._path.popLast();
        return t3.isEmpty() ? null : new Qu(
          this.firestore,
          /* converter= */
          null,
          new st(t3)
        );
      },
      enumerable: false,
      configurable: true
    }), e.prototype.withConverter = function(t3) {
      return new e(this.firestore, t3, this._path);
    }, e;
  }(zu)
);
function Hu(t2, e) {
  for (var n2, r2 = [], i = 2; i < arguments.length; i++)
    r2[i - 2] = arguments[i];
  if (t2 = getModularInstance(t2), Pu("collection", "path", e), t2 instanceof Gu)
    return qu(n2 = Q2.fromString.apply(Q2, __spreadArray([e], r2))), new Wu(
      t2,
      /* converter= */
      null,
      n2
    );
  if (!(t2 instanceof Qu || t2 instanceof Wu))
    throw new T2(E2.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
  return qu(n2 = Q2.fromString.apply(Q2, __spreadArray([t2.path], r2)).child(Q2.fromString(e))), new Wu(
    t2.firestore,
    /* converter= */
    null,
    n2
  );
}
function Yu(t2, e) {
  for (var n2, r2 = [], i = 2; i < arguments.length; i++)
    r2[i - 2] = arguments[i];
  if (t2 = getModularInstance(t2), // We allow omission of 'pathString' but explicitly prohibit passing in both
  // 'undefined' and 'null'.
  1 === arguments.length && (e = P2.u()), Pu("doc", "path", e), t2 instanceof Gu)
    return Vu(n2 = Q2.fromString.apply(Q2, __spreadArray([e], r2))), new Qu(
      t2,
      /* converter= */
      null,
      new st(n2)
    );
  if (!(t2 instanceof Qu || t2 instanceof Wu))
    throw new T2(E2.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
  return Vu(n2 = t2._path.child(Q2.fromString.apply(Q2, __spreadArray([e], r2)))), new Qu(t2.firestore, t2 instanceof Wu ? t2._converter : null, new st(n2));
}
function Xu(t2, e) {
  return t2 = getModularInstance(t2), e = getModularInstance(e), (t2 instanceof Qu || t2 instanceof Wu) && (e instanceof Qu || e instanceof Wu) && t2.firestore === e.firestore && t2.path === e.path && t2._converter === e._converter;
}
function $u(t2, e) {
  return t2 = getModularInstance(t2), e = getModularInstance(e), t2 instanceof zu && e instanceof zu && t2.firestore === e.firestore && te(t2._query, e._query) && t2._converter === e._converter;
}
var Ju = (
  /** @class */
  function() {
    function t2() {
      var t3 = this;
      this.fc = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and
      // retried with backoff.
      this.dc = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not
      // be changed again.
      this.wc = false, // Operations scheduled to be queued in the future. Operations are
      // automatically removed after they are run or canceled.
      this._c = [], // visible for testing
      this.mc = null, // Flag set while there's an outstanding AsyncQueue operation, used for
      // assertion sanity-checks.
      this.yc = false, // List of TimerIds to fast-forward delays for.
      this.gc = [], // Backoff timer used to schedule retries for retryable operations
      this.Zi = new No(
        this,
        "async_queue_retry"
        /* AsyncQueueRetry */
      ), // Visibility handler that triggers an immediate retry of all retryable
      // operations. Meant to speed up recovery when we regain file system access
      // after page comes into foreground.
      this.Ec = function() {
        var e2 = So();
        e2 && N2("AsyncQueue", "Visibility state changed to " + e2.visibilityState), t3.Zi.Gi();
      };
      var e = So();
      e && "function" == typeof e.addEventListener && e.addEventListener("visibilitychange", this.Ec);
    }
    return Object.defineProperty(t2.prototype, "isShuttingDown", {
      get: function() {
        return this.wc;
      },
      enumerable: false,
      configurable: true
    }), /**
     * Adds a new operation to the queue without waiting for it to complete (i.e.
     * we ignore the Promise result).
     */
    t2.prototype.enqueueAndForget = function(t3) {
      this.enqueue(t3);
    }, t2.prototype.enqueueAndForgetEvenWhileRestricted = function(t3) {
      this.Tc(), // eslint-disable-next-line @typescript-eslint/no-floating-promises
      this.Ic(t3);
    }, t2.prototype.enterRestrictedMode = function() {
      if (!this.wc) {
        this.wc = true;
        var t3 = So();
        t3 && "function" == typeof t3.removeEventListener && t3.removeEventListener("visibilitychange", this.Ec);
      }
    }, t2.prototype.enqueue = function(t3) {
      return this.Tc(), this.wc ? new Promise(function(t4) {
      }) : this.Ic(t3);
    }, t2.prototype.enqueueRetryable = function(t3) {
      var e = this;
      this.enqueueAndForget(function() {
        return e.dc.push(t3), e.Ac();
      });
    }, /**
     * Runs the next operation from the retryable queue. If the operation fails,
     * reschedules with backoff.
     */
    t2.prototype.Ac = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3, e = this;
        return __generator(this, function(n2) {
          switch (n2.label) {
            case 0:
              if (0 === this.dc.length)
                return [3, 5];
              n2.label = 1;
            case 1:
              return n2.trys.push([1, 3, , 4]), [4, this.dc[0]()];
            case 2:
              return n2.sent(), this.dc.shift(), this.Zi.reset(), [3, 4];
            case 3:
              if (!_r(t3 = n2.sent()))
                throw t3;
              return N2("AsyncQueue", "Operation failed with retryable error: " + t3), [3, 4];
            case 4:
              this.dc.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.
              // This is necessary to run retryable operations that failed during
              // their initial attempt since we don't know whether they are already
              // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`
              // needs to  be re-run, we will run `op1`, `op1`, `op2` using the
              // already enqueued calls to `retryNextOp()`. `op3()` will then run in the
              // call scheduled here.
              // Since `backoffAndRun()` cancels an existing backoff and schedules a
              // new backoff on every call, there is only ever a single additional
              // operation in the queue.
              this.Zi.ji(function() {
                return e.Ac();
              }), n2.label = 5;
            case 5:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, t2.prototype.Ic = function(t3) {
      var e = this, n2 = this.fc.then(function() {
        return e.yc = true, t3().catch(function(t4) {
          throw e.mc = t4, e.yc = false, A2(
            "INTERNAL UNHANDLED ERROR: ",
            /**
            * Chrome includes Error.message in Error.stack. Other browsers do not.
            * This returns expected output of message + stack when available.
            * @param error - Error or FirestoreError
            */
            function(t5) {
              var e2 = t5.message || "";
              return t5.stack && (e2 = t5.stack.includes(t5.message) ? t5.stack : t5.message + "\n" + t5.stack), e2;
            }(t4)
          ), t4;
        }).then(function(t4) {
          return e.yc = false, t4;
        });
      });
      return this.fc = n2, n2;
    }, t2.prototype.enqueueAfterDelay = function(t3, e, n2) {
      var r2 = this;
      this.Tc(), // Fast-forward delays for timerIds that have been overriden.
      this.gc.indexOf(t3) > -1 && (e = 0);
      var i = os.createAndSchedule(this, t3, e, n2, function(t4) {
        return r2.Rc(t4);
      });
      return this._c.push(i), i;
    }, t2.prototype.Tc = function() {
      this.mc && C();
    }, t2.prototype.verifyOperationInProgress = function() {
    }, /**
     * Waits until all currently queued tasks are finished executing. Delayed
     * operations are not run.
     */
    t2.prototype.bc = function() {
      return __awaiter(this, void 0, void 0, function() {
        var t3;
        return __generator(this, function(e) {
          switch (e.label) {
            case 0:
              return [4, t3 = this.fc];
            case 1:
              e.sent(), e.label = 2;
            case 2:
              if (t3 !== this.fc)
                return [3, 0];
              e.label = 3;
            case 3:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, /**
     * For Tests: Determine if a delayed operation with a particular TimerId
     * exists.
     */
    t2.prototype.vc = function(t3) {
      for (var e = 0, n2 = this._c; e < n2.length; e++) {
        if (n2[e].timerId === t3)
          return true;
      }
      return false;
    }, /**
     * For Tests: Runs some or all delayed operations early.
     *
     * @param lastTimerId - Delayed operations up to and including this TimerId
     * will be drained. Pass TimerId.All to run all delayed operations.
     * @returns a Promise that resolves once all operations have been run.
     */
    t2.prototype.Pc = function(t3) {
      var e = this;
      return this.bc().then(function() {
        e._c.sort(function(t4, e2) {
          return t4.targetTimeMs - e2.targetTimeMs;
        });
        for (var n2 = 0, r2 = e._c; n2 < r2.length; n2++) {
          var i = r2[n2];
          if (i.skipDelay(), "all" !== t3 && i.timerId === t3)
            break;
        }
        return e.bc();
      });
    }, /**
     * For Tests: Skip all subsequent delays for a timer id.
     */
    t2.prototype.Vc = function(t3) {
      this.gc.push(t3);
    }, /** Called once a DelayedOperation is run or canceled. */
    t2.prototype.Rc = function(t3) {
      var e = this._c.indexOf(t3);
      this._c.splice(e, 1);
    }, t2;
  }()
);
function Zu(t2) {
  return function(t3, e) {
    if ("object" != typeof t3 || null === t3)
      return false;
    for (var n2 = t3, r2 = 0, i = ["next", "error", "complete"]; r2 < i.length; r2++) {
      var o = i[r2];
      if (o in n2 && "function" == typeof n2[o])
        return true;
    }
    return false;
  }(t2);
}
var ta2 = (
  /** @class */
  function() {
    function t2() {
      this._progressObserver = {}, this._taskCompletionResolver = new vr(), this._lastProgress = {
        taskState: "Running",
        totalBytes: 0,
        totalDocuments: 0,
        bytesLoaded: 0,
        documentsLoaded: 0
      };
    }
    return t2.prototype.onProgress = function(t3, e, n2) {
      this._progressObserver = {
        next: t3,
        error: e,
        complete: n2
      };
    }, /**
     * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.
     *
     * @param onRejected - Called when an error occurs during bundle loading.
     */
    t2.prototype.catch = function(t3) {
      return this._taskCompletionResolver.promise.catch(t3);
    }, /**
     * Implements the `Promise<LoadBundleTaskProgress>.then` interface.
     *
     * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.
     *   The update will always have its `taskState` set to `"Success"`.
     * @param onRejected - Called when an error occurs during bundle loading.
     */
    t2.prototype.then = function(t3, e) {
      return this._taskCompletionResolver.promise.then(t3, e);
    }, /**
     * Notifies all observers that bundle loading has completed, with a provided
     * `LoadBundleTaskProgress` object.
     *
     * @private
     */
    t2.prototype._completeWith = function(t3) {
      this._updateProgress(t3), this._progressObserver.complete && this._progressObserver.complete(), this._taskCompletionResolver.resolve(t3);
    }, /**
     * Notifies all observers that bundle loading has failed, with a provided
     * `Error` as the reason.
     *
     * @private
     */
    t2.prototype._failWith = function(t3) {
      this._lastProgress.taskState = "Error", this._progressObserver.next && this._progressObserver.next(this._lastProgress), this._progressObserver.error && this._progressObserver.error(t3), this._taskCompletionResolver.reject(t3);
    }, /**
     * Notifies a progress update of loading a bundle.
     * @param progress - The new progress.
     *
     * @private
     */
    t2.prototype._updateProgress = function(t3) {
      this._lastProgress = t3, this._progressObserver.next && this._progressObserver.next(t3);
    }, t2;
  }()
);
var ea2 = -1;
var na2 = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2, n2) || this)._queue = new Ju(), r2._persistenceKey = "name" in e2 ? e2.name : "[DEFAULT]", r2;
    }
    return __extends(e, t2), e.prototype._terminate = function() {
      return this._firestoreClient || // The client must be initialized to ensure that all subsequent API
      // usage throws an exception.
      ia(this), this._firestoreClient.terminate();
    }, e;
  }(Gu)
);
function ra2(t2) {
  return t2._firestoreClient || ia(t2), t2._firestoreClient.verifyNotTerminated(), t2._firestoreClient;
}
function ia(t2) {
  var e, n2 = t2._freezeSettings(), r2 = function(t3, e2, n3, r3) {
    return new Nu(t3, e2, n3, r3.host, r3.ssl, r3.experimentalForceLongPolling, r3.experimentalAutoDetectLongPolling);
  }(t2._databaseId, (null === (e = t2._app) || void 0 === e ? void 0 : e.options.appId) || "", t2._persistenceKey, n2);
  t2._firestoreClient = new yu(t2._credentials, t2._queue, r2);
}
function oa2(t2, e, n2) {
  var r2 = this, i = new vr();
  return t2.asyncQueue.enqueue(function() {
    return __awaiter(r2, void 0, void 0, function() {
      var r3;
      return __generator(this, function(o) {
        switch (o.label) {
          case 0:
            return o.trys.push([0, 3, , 4]), [4, vu(t2, n2)];
          case 1:
            return o.sent(), [4, mu(t2, e)];
          case 2:
            return o.sent(), i.resolve(), [3, 4];
          case 3:
            if (!/**
            * Decides whether the provided error allows us to gracefully disable
            * persistence (as opposed to crashing the client).
            */
            function(t3) {
              return "FirebaseError" === t3.name ? t3.code === E2.FAILED_PRECONDITION || t3.code === E2.UNIMPLEMENTED : !("undefined" != typeof DOMException && t3 instanceof DOMException) || (22 === t3.code || 20 === t3.code || // Firefox Private Browsing mode disables IndexedDb and returns
              // INVALID_STATE for any usage.
              11 === t3.code);
            }(r3 = o.sent()))
              throw r3;
            return console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + r3), i.reject(r3), [3, 4];
          case 4:
            return [
              2
              /*return*/
            ];
        }
      });
    });
  }).then(function() {
    return i.promise;
  });
}
function sa2(t2) {
  if (t2._initialized || t2._terminated)
    throw new T2(E2.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
}
var ua2 = (
  /** @class */
  function() {
    function t2() {
      for (var t3 = [], e = 0; e < arguments.length; e++)
        t3[e] = arguments[e];
      for (var n2 = 0; n2 < t3.length; ++n2)
        if (0 === t3[n2].length)
          throw new T2(E2.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
      this._internalPath = new W2(t3);
    }
    return t2.prototype.isEqual = function(t3) {
      return this._internalPath.isEqual(t3._internalPath);
    }, t2;
  }()
);
var aa2 = (
  /** @class */
  function() {
    function t2(t3) {
      this._byteString = t3;
    }
    return t2.fromBase64String = function(e) {
      try {
        return new t2(Y2.fromBase64String(e));
      } catch (e2) {
        throw new T2(E2.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e2);
      }
    }, /**
     * Creates a new `Bytes` object from the given Uint8Array.
     *
     * @param array - The Uint8Array used to create the `Bytes` object.
     */
    t2.fromUint8Array = function(e) {
      return new t2(Y2.fromUint8Array(e));
    }, /**
     * Returns the underlying bytes as a Base64-encoded string.
     *
     * @returns The Base64-encoded string created from the `Bytes` object.
     */
    t2.prototype.toBase64 = function() {
      return this._byteString.toBase64();
    }, /**
     * Returns the underlying bytes in a new `Uint8Array`.
     *
     * @returns The Uint8Array created from the `Bytes` object.
     */
    t2.prototype.toUint8Array = function() {
      return this._byteString.toUint8Array();
    }, /**
     * Returns a string representation of the `Bytes` object.
     *
     * @returns A string representation of the `Bytes` object.
     */
    t2.prototype.toString = function() {
      return "Bytes(base64: " + this.toBase64() + ")";
    }, /**
     * Returns true if this `Bytes` object is equal to the provided one.
     *
     * @param other - The `Bytes` object to compare against.
     * @returns true if this `Bytes` object is equal to the provided one.
     */
    t2.prototype.isEqual = function(t3) {
      return this._byteString.isEqual(t3._byteString);
    }, t2;
  }()
);
var ca2 = (
  /**
       * @param _methodName - The public API endpoint that returns this class.
       */
  function(t2) {
    this._methodName = t2;
  }
);
var ha2 = (
  /** @class */
  function() {
    function t2(t3, e) {
      if (!isFinite(t3) || t3 < -90 || t3 > 90)
        throw new T2(E2.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + t3);
      if (!isFinite(e) || e < -180 || e > 180)
        throw new T2(E2.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + e);
      this._lat = t3, this._long = e;
    }
    return Object.defineProperty(t2.prototype, "latitude", {
      /**
       * The latitude of this `GeoPoint` instance.
       */
      get: function() {
        return this._lat;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "longitude", {
      /**
       * The longitude of this `GeoPoint` instance.
       */
      get: function() {
        return this._long;
      },
      enumerable: false,
      configurable: true
    }), /**
     * Returns true if this `GeoPoint` is equal to the provided one.
     *
     * @param other - The `GeoPoint` to compare against.
     * @returns true if this `GeoPoint` is equal to the provided one.
     */
    t2.prototype.isEqual = function(t3) {
      return this._lat === t3._lat && this._long === t3._long;
    }, t2.prototype.toJSON = function() {
      return {
        latitude: this._lat,
        longitude: this._long
      };
    }, /**
     * Actually private to JS consumers of our API, so this function is prefixed
     * with an underscore.
     */
    t2.prototype._compareTo = function(t3) {
      return M2(this._lat, t3._lat) || M2(this._long, t3._long);
    }, t2;
  }()
);
var fa2 = /^__.*__$/;
var la = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this.data = t3, this.fieldMask = e, this.fieldTransforms = n2;
    }
    return t2.prototype.toMutation = function(t3, e) {
      return null !== this.fieldMask ? new Re(t3, this.data, this.fieldMask, e, this.fieldTransforms) : new Ce(t3, this.data, e, this.fieldTransforms);
    }, t2;
  }()
);
var da2 = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this.data = t3, this.fieldMask = e, this.fieldTransforms = n2;
    }
    return t2.prototype.toMutation = function(t3, e) {
      return new Re(t3, this.data, this.fieldMask, e, this.fieldTransforms);
    }, t2;
  }()
);
function pa2(t2) {
  switch (t2) {
    case 0:
    case 2:
    case 1:
      return true;
    case 3:
    case 4:
      return false;
    default:
      throw C();
  }
}
var ya = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i, o) {
      this.settings = t3, this.databaseId = e, this.R = n2, this.ignoreUndefinedProperties = r2, // Minor hack: If fieldTransforms is undefined, we assume this is an
      // external call and we need to validate the entire path.
      void 0 === i && this.Sc(), this.fieldTransforms = i || [], this.fieldMask = o || [];
    }
    return Object.defineProperty(t2.prototype, "path", {
      get: function() {
        return this.settings.path;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "Dc", {
      get: function() {
        return this.settings.Dc;
      },
      enumerable: false,
      configurable: true
    }), /** Returns a new context with the specified settings overwritten. */
    t2.prototype.Cc = function(e) {
      return new t2(Object.assign(Object.assign({}, this.settings), e), this.databaseId, this.R, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
    }, t2.prototype.Nc = function(t3) {
      var e, n2 = null === (e = this.path) || void 0 === e ? void 0 : e.child(t3), r2 = this.Cc({
        path: n2,
        xc: false
      });
      return r2.Fc(t3), r2;
    }, t2.prototype.kc = function(t3) {
      var e, n2 = null === (e = this.path) || void 0 === e ? void 0 : e.child(t3), r2 = this.Cc({
        path: n2,
        xc: false
      });
      return r2.Sc(), r2;
    }, t2.prototype.Oc = function(t3) {
      return this.Cc({
        path: void 0,
        xc: true
      });
    }, t2.prototype.$c = function(t3) {
      return Pa(t3, this.settings.methodName, this.settings.Mc || false, this.path, this.settings.Lc);
    }, /** Returns 'true' if 'fieldPath' was traversed when creating this context. */
    t2.prototype.contains = function(t3) {
      return void 0 !== this.fieldMask.find(function(e) {
        return t3.isPrefixOf(e);
      }) || void 0 !== this.fieldTransforms.find(function(e) {
        return t3.isPrefixOf(e.field);
      });
    }, t2.prototype.Sc = function() {
      if (this.path)
        for (var t3 = 0; t3 < this.path.length; t3++)
          this.Fc(this.path.get(t3));
    }, t2.prototype.Fc = function(t3) {
      if (0 === t3.length)
        throw this.$c("Document fields must not be empty");
      if (pa2(this.Dc) && fa2.test(t3))
        throw this.$c('Document fields cannot begin and end with "__"');
    }, t2;
  }()
);
var va = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this.databaseId = t3, this.ignoreUndefinedProperties = e, this.R = n2 || Do(t3);
    }
    return t2.prototype.Bc = function(t3, e, n2, r2) {
      return void 0 === r2 && (r2 = false), new ya({
        Dc: t3,
        methodName: e,
        Lc: n2,
        path: W2.emptyPath(),
        xc: false,
        Mc: r2
      }, this.databaseId, this.R, this.ignoreUndefinedProperties);
    }, t2;
  }()
);
function ma2(t2) {
  var e = t2._freezeSettings(), n2 = Do(t2._databaseId);
  return new va(t2._databaseId, !!e.ignoreUndefinedProperties, n2);
}
function ga(t2, e, n2, r2, i, o) {
  void 0 === o && (o = {});
  var s = t2.Bc(o.merge || o.mergeFields ? 2 : 0, e, n2, i);
  Ca2("Data must be an object, but it was:", s, r2);
  var u, a, c = ka2(r2, s);
  if (o.merge)
    u = new H2(s.fieldMask), a = s.fieldTransforms;
  else if (o.mergeFields) {
    for (var h2 = [], f = 0, l = o.mergeFields; f < l.length; f++) {
      var d = Ra2(e, l[f], n2);
      if (!s.contains(d))
        throw new T2(E2.INVALID_ARGUMENT, "Field '" + d + "' is specified in your field mask but missing from your input data.");
      Ma2(h2, d) || h2.push(d);
    }
    u = new H2(h2), a = s.fieldTransforms.filter(function(t3) {
      return u.covers(t3.field);
    });
  } else
    u = null, a = s.fieldTransforms;
  return new la(new bt(c), u, a);
}
var wa = (
  /** @class */
  function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype._toFieldTransform = function(t3) {
      if (2 !== t3.Dc)
        throw 1 === t3.Dc ? t3.$c(this._methodName + "() can only appear at the top level of your update data") : t3.$c(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
      return t3.fieldMask.push(t3.path), null;
    }, e.prototype.isEqual = function(t3) {
      return t3 instanceof e;
    }, e;
  }(ca2)
);
function ba2(t2, e, n2) {
  return new ya({
    Dc: 3,
    Lc: e.settings.Lc,
    methodName: t2._methodName,
    xc: n2
  }, e.databaseId, e.R, e.ignoreUndefinedProperties);
}
var Ia2 = (
  /** @class */
  function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype._toFieldTransform = function(t3) {
      return new Ie(t3.path, new de());
    }, e.prototype.isEqual = function(t3) {
      return t3 instanceof e;
    }, e;
  }(ca2)
);
var _a = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2) || this).qc = n2, r2;
    }
    return __extends(e, t2), e.prototype._toFieldTransform = function(t3) {
      var e2 = ba2(
        this,
        t3,
        /*array=*/
        true
      ), n2 = this.qc.map(function(t4) {
        return Aa2(t4, e2);
      }), r2 = new pe(n2);
      return new Ie(t3.path, r2);
    }, e.prototype.isEqual = function(t3) {
      return this === t3;
    }, e;
  }(ca2)
);
var Ea2 = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2) || this).qc = n2, r2;
    }
    return __extends(e, t2), e.prototype._toFieldTransform = function(t3) {
      var e2 = ba2(
        this,
        t3,
        /*array=*/
        true
      ), n2 = this.qc.map(function(t4) {
        return Aa2(t4, e2);
      }), r2 = new ve(n2);
      return new Ie(t3.path, r2);
    }, e.prototype.isEqual = function(t3) {
      return this === t3;
    }, e;
  }(ca2)
);
var Ta2 = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2) || this).Uc = n2, r2;
    }
    return __extends(e, t2), e.prototype._toFieldTransform = function(t3) {
      var e2 = new ge(t3.R, ae(t3.R, this.Uc));
      return new Ie(t3.path, e2);
    }, e.prototype.isEqual = function(t3) {
      return this === t3;
    }, e;
  }(ca2)
);
function Sa(t2, e, n2, r2) {
  var i = t2.Bc(1, e, n2);
  Ca2("Data must be an object, but it was:", i, r2);
  var o = [], s = bt.empty();
  j(r2, function(t3, r3) {
    var a2 = La2(e, t3, n2);
    r3 = getModularInstance(r3);
    var c = i.kc(a2);
    if (r3 instanceof wa)
      o.push(a2);
    else {
      var h2 = Aa2(r3, c);
      null != h2 && (o.push(a2), s.set(a2, h2));
    }
  });
  var a = new H2(o);
  return new da2(s, a, i.fieldTransforms);
}
function Da2(t2, e, n2, r2, i, o) {
  var s = t2.Bc(1, e, n2), a = [Ra2(e, r2, n2)], c = [i];
  if (o.length % 2 != 0)
    throw new T2(E2.INVALID_ARGUMENT, "Function " + e + "() needs to be called with an even number of arguments that alternate between field names and values.");
  for (var h2 = 0; h2 < o.length; h2 += 2)
    a.push(Ra2(e, o[h2])), c.push(o[h2 + 1]);
  for (var f = [], l = bt.empty(), d = a.length - 1; d >= 0; --d)
    if (!Ma2(f, a[d])) {
      var p2 = a[d], y2 = c[d];
      y2 = getModularInstance(y2);
      var v2 = s.kc(p2);
      if (y2 instanceof wa)
        f.push(p2);
      else {
        var m = Aa2(y2, v2);
        null != m && (f.push(p2), l.set(p2, m));
      }
    }
  var g = new H2(f);
  return new da2(l, g, s.fieldTransforms);
}
function Na(t2, e, n2, r2) {
  return void 0 === r2 && (r2 = false), Aa2(n2, t2.Bc(r2 ? 4 : 3, e));
}
function Aa2(t2, e) {
  if (xa(
    // Unwrap the API type from the Compat SDK. This will return the API type
    // from firestore-exp.
    t2 = getModularInstance(t2)
  ))
    return Ca2("Unsupported field value:", e, t2), ka2(t2, e);
  if (t2 instanceof ca2)
    return function(t3, e2) {
      if (!pa2(e2.Dc))
        throw e2.$c(t3._methodName + "() can only be used with update() and set()");
      if (!e2.path)
        throw e2.$c(t3._methodName + "() is not currently supported inside arrays");
      var n2 = t3._toFieldTransform(e2);
      n2 && e2.fieldTransforms.push(n2);
    }(t2, e), null;
  if (void 0 === t2 && e.ignoreUndefinedProperties)
    return null;
  if (
    // If context.path is null we are inside an array and we don't support
    // field mask paths more granular than the top-level array.
    e.path && e.fieldMask.push(e.path), t2 instanceof Array
  ) {
    if (e.settings.xc && 4 !== e.Dc)
      throw e.$c("Nested arrays are not supported");
    return function(t3, e2) {
      for (var n2 = [], r2 = 0, i = 0, o = t3; i < o.length; i++) {
        var s = Aa2(o[i], e2.Oc(r2));
        null == s && // Just include nulls in the array for fields being replaced with a
        // sentinel.
        (s = {
          nullValue: "NULL_VALUE"
        }), n2.push(s), r2++;
      }
      return {
        arrayValue: {
          values: n2
        }
      };
    }(t2, e);
  }
  return function(t3, e2) {
    if (null === (t3 = getModularInstance(t3)))
      return {
        nullValue: "NULL_VALUE"
      };
    if ("number" == typeof t3)
      return ae(e2.R, t3);
    if ("boolean" == typeof t3)
      return {
        booleanValue: t3
      };
    if ("string" == typeof t3)
      return {
        stringValue: t3
      };
    if (t3 instanceof Date) {
      var n2 = q2.fromDate(t3);
      return {
        timestampValue: mn(e2.R, n2)
      };
    }
    if (t3 instanceof q2) {
      n2 = new q2(t3.seconds, 1e3 * Math.floor(t3.nanoseconds / 1e3));
      return {
        timestampValue: mn(e2.R, n2)
      };
    }
    if (t3 instanceof ha2)
      return {
        geoPointValue: {
          latitude: t3.latitude,
          longitude: t3.longitude
        }
      };
    if (t3 instanceof aa2)
      return {
        bytesValue: gn(e2.R, t3._byteString)
      };
    if (t3 instanceof Qu) {
      n2 = e2.databaseId;
      var r2 = t3.firestore._databaseId;
      if (!r2.isEqual(n2))
        throw e2.$c("Document reference is for database " + r2.projectId + "/" + r2.database + " but should be for database " + n2.projectId + "/" + n2.database);
      return {
        referenceValue: In(t3.firestore._databaseId || e2.databaseId, t3._key.path)
      };
    }
    throw e2.$c("Unsupported field value: " + Uu(t3));
  }(t2, e);
}
function ka2(t2, e) {
  var n2 = {};
  return K2(t2) ? (
    // If we encounter an empty object, we explicitly add it to the update
    // mask to ensure that the server creates a map entry.
    e.path && e.path.length > 0 && e.fieldMask.push(e.path)
  ) : j(t2, function(t3, r2) {
    var i = Aa2(r2, e.Nc(t3));
    null != i && (n2[t3] = i);
  }), {
    mapValue: {
      fields: n2
    }
  };
}
function xa(t2) {
  return !("object" != typeof t2 || null === t2 || t2 instanceof Array || t2 instanceof Date || t2 instanceof q2 || t2 instanceof ha2 || t2 instanceof aa2 || t2 instanceof Qu || t2 instanceof ca2);
}
function Ca2(t2, e, n2) {
  if (!xa(n2) || !function(t3) {
    return "object" == typeof t3 && null !== t3 && (Object.getPrototypeOf(t3) === Object.prototype || null === Object.getPrototypeOf(t3));
  }(n2)) {
    var r2 = Uu(n2);
    throw "an object" === r2 ? e.$c(t2 + " a custom object") : e.$c(t2 + " " + r2);
  }
}
function Ra2(t2, e, n2) {
  if (
    // If required, replace the FieldPath Compat class with with the firestore-exp
    // FieldPath.
    (e = getModularInstance(e)) instanceof ua2
  )
    return e._internalPath;
  if ("string" == typeof e)
    return La2(t2, e);
  throw Pa(
    "Field path arguments must be of type string or FieldPath.",
    t2,
    /* hasConverter= */
    false,
    /* path= */
    void 0,
    n2
  );
}
var Oa = new RegExp("[~\\*/\\[\\]]");
function La2(t2, e, n2) {
  if (e.search(Oa) >= 0)
    throw Pa(
      "Invalid field path (" + e + "). Paths must not contain '~', '*', '/', '[', or ']'",
      t2,
      /* hasConverter= */
      false,
      /* path= */
      void 0,
      n2
    );
  try {
    return new (ua2.bind.apply(ua2, __spreadArray([void 0], e.split("."))))()._internalPath;
  } catch (r2) {
    throw Pa(
      "Invalid field path (" + e + "). Paths must not be empty, begin with '.', end with '.', or contain '..'",
      t2,
      /* hasConverter= */
      false,
      /* path= */
      void 0,
      n2
    );
  }
}
function Pa(t2, e, n2, r2, i) {
  var o = r2 && !r2.isEmpty(), s = void 0 !== i, u = "Function " + e + "() called with invalid data";
  n2 && (u += " (via `toFirestore()`)");
  var a = "";
  return (o || s) && (a += " (found", o && (a += " in field " + r2), s && (a += " in document " + i), a += ")"), new T2(E2.INVALID_ARGUMENT, (u += ". ") + t2 + a);
}
function Ma2(t2, e) {
  return t2.some(function(t3) {
    return t3.isEqual(e);
  });
}
var Fa2 = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2, i) {
      this._firestore = t3, this._userDataWriter = e, this._key = n2, this._document = r2, this._converter = i;
    }
    return Object.defineProperty(t2.prototype, "id", {
      /** Property of the `DocumentSnapshot` that provides the document's ID. */
      get: function() {
        return this._key.path.lastSegment();
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "ref", {
      /**
       * The `DocumentReference` for the document included in the `DocumentSnapshot`.
       */
      get: function() {
        return new Qu(this._firestore, this._converter, this._key);
      },
      enumerable: false,
      configurable: true
    }), /**
     * Signals whether or not the document at the snapshot's location exists.
     *
     * @returns true if the document exists.
     */
    t2.prototype.exists = function() {
      return null !== this._document;
    }, /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * @returns An `Object` containing all fields in the document or `undefined`
     * if the document doesn't exist.
     */
    t2.prototype.data = function() {
      if (this._document) {
        if (this._converter) {
          var t3 = new Va2(
            this._firestore,
            this._userDataWriter,
            this._key,
            this._document,
            /* converter= */
            null
          );
          return this._converter.fromFirestore(t3);
        }
        return this._userDataWriter.convertValue(this._document.data.toProto());
      }
    }, /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */
    // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    t2.prototype.get = function(t3) {
      if (this._document) {
        var e = this._document.data.field(qa2("DocumentSnapshot.get", t3));
        if (null !== e)
          return this._userDataWriter.convertValue(e);
      }
    }, t2;
  }()
);
var Va2 = (
  /** @class */
  function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.data = function() {
      return t2.prototype.data.call(this);
    }, e;
  }(Fa2)
);
function qa2(t2, e) {
  return "string" == typeof e ? La2(t2, e) : e instanceof ua2 ? e._internalPath : e._delegate._internalPath;
}
var Ua2 = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.hasPendingWrites = t3, this.fromCache = e;
    }
    return t2.prototype.isEqual = function(t3) {
      return this.hasPendingWrites === t3.hasPendingWrites && this.fromCache === t3.fromCache;
    }, t2;
  }()
);
var Ba2 = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2, i, o, s) {
      var u = this;
      return (u = t2.call(this, e2, n2, r2, i, s) || this)._firestore = e2, u._firestoreImpl = e2, u.metadata = o, u;
    }
    return __extends(e, t2), e.prototype.exists = function() {
      return t2.prototype.exists.call(this);
    }, /**
     * Retrieves all fields in the document as an `Object`. Returns `undefined` if
     * the document doesn't exist.
     *
     * By default, `FieldValue.serverTimestamp()` values that have not yet been
     * set to their final value will be returned as `null`. You can override
     * this by passing an options object.
     *
     * @param options - An options object to configure how data is retrieved from
     * the snapshot (for example the desired behavior for server timestamps that
     * have not yet been set to their final value).
     * @returns An `Object` containing all fields in the document or `undefined` if
     * the document doesn't exist.
     */
    e.prototype.data = function(t3) {
      if (void 0 === t3 && (t3 = {}), this._document) {
        if (this._converter) {
          var e2 = new ja2(
            this._firestore,
            this._userDataWriter,
            this._key,
            this._document,
            this.metadata,
            /* converter= */
            null
          );
          return this._converter.fromFirestore(e2, t3);
        }
        return this._userDataWriter.convertValue(this._document.data.toProto(), t3.serverTimestamps);
      }
    }, /**
     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the
     * document or field doesn't exist.
     *
     * By default, a `FieldValue.serverTimestamp()` that has not yet been set to
     * its final value will be returned as `null`. You can override this by
     * passing an options object.
     *
     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific
     * field.
     * @param options - An options object to configure how the field is retrieved
     * from the snapshot (for example the desired behavior for server timestamps
     * that have not yet been set to their final value).
     * @returns The data at the specified field location or undefined if no such
     * field exists in the document.
     */
    // We are using `any` here to avoid an explicit cast by our users.
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    e.prototype.get = function(t3, e2) {
      if (void 0 === e2 && (e2 = {}), this._document) {
        var n2 = this._document.data.field(qa2("DocumentSnapshot.get", t3));
        if (null !== n2)
          return this._userDataWriter.convertValue(n2, e2.serverTimestamps);
      }
    }, e;
  }(Fa2)
);
var ja2 = (
  /** @class */
  function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.data = function(e2) {
      return void 0 === e2 && (e2 = {}), t2.prototype.data.call(this, e2);
    }, e;
  }(Ba2)
);
var Ka2 = (
  /** @class */
  function() {
    function t2(t3, e, n2, r2) {
      this._firestore = t3, this._userDataWriter = e, this._snapshot = r2, this.metadata = new Ua2(r2.hasPendingWrites, r2.fromCache), this.query = n2;
    }
    return Object.defineProperty(t2.prototype, "docs", {
      /** An array of all the documents in the `QuerySnapshot`. */
      get: function() {
        var t3 = [];
        return this.forEach(function(e) {
          return t3.push(e);
        }), t3;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "size", {
      /** The number of documents in the `QuerySnapshot`. */
      get: function() {
        return this._snapshot.docs.size;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "empty", {
      /** True if there are no documents in the `QuerySnapshot`. */
      get: function() {
        return 0 === this.size;
      },
      enumerable: false,
      configurable: true
    }), /**
     * Enumerates all of the documents in the `QuerySnapshot`.
     *
     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for
     * each document in the snapshot.
     * @param thisArg - The `this` binding for the callback.
     */
    t2.prototype.forEach = function(t3, e) {
      var n2 = this;
      this._snapshot.docs.forEach(function(r2) {
        t3.call(e, new ja2(n2._firestore, n2._userDataWriter, r2.key, r2, new Ua2(n2._snapshot.mutatedKeys.has(r2.key), n2._snapshot.fromCache), n2.query._converter));
      });
    }, /**
     * Returns an array of the documents changes since the last snapshot. If this
     * is the first snapshot, all documents will be in the list as 'added'
     * changes.
     *
     * @param options - `SnapshotListenOptions` that control whether metadata-only
     * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger
     * snapshot events.
     */
    t2.prototype.docChanges = function(t3) {
      void 0 === t3 && (t3 = {});
      var e = !!t3.includeMetadataChanges;
      if (e && this._snapshot.excludesMetadataChanges)
        throw new T2(E2.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
      return this._cachedChanges && this._cachedChangesIncludeMetadataChanges === e || (this._cachedChanges = /** Calculates the array of DocumentChanges for a given ViewSnapshot. */
      function(t4, e2) {
        if (t4._snapshot.oldDocs.isEmpty()) {
          var n2 = 0;
          return t4._snapshot.docChanges.map(function(e3) {
            var r3 = new ja2(t4._firestore, t4._userDataWriter, e3.doc.key, e3.doc, new Ua2(t4._snapshot.mutatedKeys.has(e3.doc.key), t4._snapshot.fromCache), t4.query._converter);
            return e3.doc, {
              type: "added",
              doc: r3,
              oldIndex: -1,
              newIndex: n2++
            };
          });
        }
        var r2 = t4._snapshot.oldDocs;
        return t4._snapshot.docChanges.filter(function(t5) {
          return e2 || 3 !== t5.type;
        }).map(function(e3) {
          var n3 = new ja2(t4._firestore, t4._userDataWriter, e3.doc.key, e3.doc, new Ua2(t4._snapshot.mutatedKeys.has(e3.doc.key), t4._snapshot.fromCache), t4.query._converter), i = -1, o = -1;
          return 0 !== e3.type && (i = r2.indexOf(e3.doc.key), r2 = r2.delete(e3.doc.key)), 1 !== e3.type && (o = (r2 = r2.add(e3.doc)).indexOf(e3.doc.key)), {
            type: Ga2(e3.type),
            doc: n3,
            oldIndex: i,
            newIndex: o
          };
        });
      }(this, e), this._cachedChangesIncludeMetadataChanges = e), this._cachedChanges;
    }, t2;
  }()
);
function Ga2(t2) {
  switch (t2) {
    case 0:
      return "added";
    case 2:
    case 3:
      return "modified";
    case 1:
      return "removed";
    default:
      return C();
  }
}
function Qa2(t2, e) {
  return t2 instanceof Ba2 && e instanceof Ba2 ? t2._firestore === e._firestore && t2._key.isEqual(e._key) && (null === t2._document ? null === e._document : t2._document.isEqual(e._document)) && t2._converter === e._converter : t2 instanceof Ka2 && e instanceof Ka2 && t2._firestore === e._firestore && $u(t2.query, e.query) && t2.metadata.isEqual(e.metadata) && t2._snapshot.isEqual(e._snapshot);
}
function za2(t2) {
  if (Wt(t2) && 0 === t2.explicitOrderBy.length)
    throw new T2(E2.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
}
var Wa2 = function() {
};
function Ha2(t2) {
  for (var e = [], n2 = 1; n2 < arguments.length; n2++)
    e[n2 - 1] = arguments[n2];
  for (var r2 = 0, i = e; r2 < i.length; r2++) {
    var o = i[r2];
    t2 = o._apply(t2);
  }
  return t2;
}
var Ya2 = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2) {
      var i = this;
      return (i = t2.call(this) || this).Qc = e2, i.Kc = n2, i.jc = r2, i.type = "where", i;
    }
    return __extends(e, t2), e.prototype._apply = function(t3) {
      var e2 = ma2(t3.firestore), n2 = function(t4, e3, n3, r2, i, o, s) {
        var u;
        if (i.isKeyField()) {
          if ("array-contains" === o || "array-contains-any" === o)
            throw new T2(E2.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + o + "' queries on FieldPath.documentId().");
          if ("in" === o || "not-in" === o) {
            nc2(s, o);
            for (var a = [], c = 0, h2 = s; c < h2.length; c++) {
              var f = h2[c];
              a.push(ec2(r2, t4, f));
            }
            u = {
              arrayValue: {
                values: a
              }
            };
          } else
            u = ec2(r2, t4, s);
        } else
          "in" !== o && "not-in" !== o && "array-contains-any" !== o || nc2(s, o), u = Na(
            n3,
            "where",
            s,
            /* allowArrays= */
            "in" === o || "not-in" === o
          );
        var l = At.create(i, o, u);
        return function(t5, e4) {
          if (e4.g()) {
            var n4 = Yt(t5);
            if (null !== n4 && !n4.isEqual(e4.field))
              throw new T2(E2.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '" + n4.toString() + "' and '" + e4.field.toString() + "'");
            var r3 = Ht(t5);
            null !== r3 && rc2(t5, e4.field, r3);
          }
          var i2 = function(t6, e5) {
            for (var n5 = 0, r4 = t6.filters; n5 < r4.length; n5++) {
              var i3 = r4[n5];
              if (e5.indexOf(i3.op) >= 0)
                return i3.op;
            }
            return null;
          }(
            t5,
            /**
            * Given an operator, returns the set of operators that cannot be used with it.
            *
            * Operators in a query must adhere to the following set of rules:
            * 1. Only one array operator is allowed.
            * 2. Only one disjunctive operator is allowed.
            * 3. NOT_EQUAL cannot be used with another NOT_EQUAL operator.
            * 4. NOT_IN cannot be used with array, disjunctive, or NOT_EQUAL operators.
            *
            * Array operators: ARRAY_CONTAINS, ARRAY_CONTAINS_ANY
            * Disjunctive operators: IN, ARRAY_CONTAINS_ANY, NOT_IN
            */
            function(t6) {
              switch (t6) {
                case "!=":
                  return [
                    "!=",
                    "not-in"
                    /* NOT_IN */
                  ];
                case "array-contains":
                  return [
                    "array-contains",
                    "array-contains-any",
                    "not-in"
                    /* NOT_IN */
                  ];
                case "in":
                  return [
                    "array-contains-any",
                    "in",
                    "not-in"
                    /* NOT_IN */
                  ];
                case "array-contains-any":
                  return [
                    "array-contains",
                    "array-contains-any",
                    "in",
                    "not-in"
                    /* NOT_IN */
                  ];
                case "not-in":
                  return [
                    "array-contains",
                    "array-contains-any",
                    "in",
                    "not-in",
                    "!="
                    /* NOT_EQUAL */
                  ];
                default:
                  return [];
              }
            }(e4.op)
          );
          if (null !== i2)
            throw i2 === e4.op ? new T2(E2.INVALID_ARGUMENT, "Invalid query. You cannot use more than one '" + e4.op.toString() + "' filter.") : new T2(E2.INVALID_ARGUMENT, "Invalid query. You cannot use '" + e4.op.toString() + "' filters with '" + i2.toString() + "' filters.");
        }(t4, l), l;
      }(t3._query, 0, e2, t3.firestore._databaseId, this.Qc, this.Kc, this.jc);
      return new zu(t3.firestore, t3._converter, function(t4, e3) {
        var n3 = t4.filters.concat([e3]);
        return new Kt(t4.path, t4.collectionGroup, t4.explicitOrderBy.slice(), n3, t4.limit, t4.limitType, t4.startAt, t4.endAt);
      }(t3._query, n2));
    }, e;
  }(Wa2)
);
var Xa2 = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this) || this).Qc = e2, r2.Wc = n2, r2.type = "orderBy", r2;
    }
    return __extends(e, t2), e.prototype._apply = function(t3) {
      var e2 = function(t4, e3, n2) {
        if (null !== t4.startAt)
          throw new T2(E2.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
        if (null !== t4.endAt)
          throw new T2(E2.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
        var r2 = new qt(e3, n2);
        return function(t5, e4) {
          if (null === Ht(t5)) {
            var n3 = Yt(t5);
            null !== n3 && rc2(t5, n3, e4.field);
          }
        }(t4, r2), r2;
      }(t3._query, this.Qc, this.Wc);
      return new zu(t3.firestore, t3._converter, function(t4, e3) {
        var n2 = t4.explicitOrderBy.concat([e3]);
        return new Kt(t4.path, t4.collectionGroup, n2, t4.filters.slice(), t4.limit, t4.limitType, t4.startAt, t4.endAt);
      }(t3._query, e2));
    }, e;
  }(Wa2)
);
var $a2 = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2) {
      var i = this;
      return (i = t2.call(this) || this).type = e2, i.Gc = n2, i.zc = r2, i;
    }
    return __extends(e, t2), e.prototype._apply = function(t3) {
      return new zu(t3.firestore, t3._converter, Zt(t3._query, this.Gc, this.zc));
    }, e;
  }(Wa2)
);
var Ja2 = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2) {
      var i = this;
      return (i = t2.call(this) || this).type = e2, i.Hc = n2, i.Jc = r2, i;
    }
    return __extends(e, t2), e.prototype._apply = function(t3) {
      var e2 = tc(t3, this.type, this.Hc, this.Jc);
      return new zu(t3.firestore, t3._converter, function(t4, e3) {
        return new Kt(t4.path, t4.collectionGroup, t4.explicitOrderBy.slice(), t4.filters.slice(), t4.limit, t4.limitType, e3, t4.endAt);
      }(t3._query, e2));
    }, e;
  }(Wa2)
);
var Za2 = (
  /** @class */
  function(t2) {
    function e(e2, n2, r2) {
      var i = this;
      return (i = t2.call(this) || this).type = e2, i.Hc = n2, i.Jc = r2, i;
    }
    return __extends(e, t2), e.prototype._apply = function(t3) {
      var e2 = tc(t3, this.type, this.Hc, this.Jc);
      return new zu(t3.firestore, t3._converter, function(t4, e3) {
        return new Kt(t4.path, t4.collectionGroup, t4.explicitOrderBy.slice(), t4.filters.slice(), t4.limit, t4.limitType, t4.startAt, e3);
      }(t3._query, e2));
    }, e;
  }(Wa2)
);
function tc(t2, e, n2, r2) {
  if (n2[0] = getModularInstance(n2[0]), n2[0] instanceof Fa2)
    return function(t3, e2, n3, r3, i2) {
      if (!r3)
        throw new T2(E2.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + n3 + "().");
      for (var o = [], s = 0, u = $t(t3); s < u.length; s++) {
        var a = u[s];
        if (a.field.isKeyField())
          o.push(pt(e2, r3.key));
        else {
          var c = r3.data.field(a.field);
          if (tt(c))
            throw new T2(E2.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + a.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
          if (null === c) {
            var h2 = a.field.canonicalString();
            throw new T2(E2.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a document for which the field '" + h2 + "' (used as the orderBy) does not exist.");
          }
          o.push(c);
        }
      }
      return new Ft(o, i2);
    }(t2._query, t2.firestore._databaseId, e, n2[0]._document, r2);
  var i = ma2(t2.firestore);
  return function(t3, e2, n3, r3, i2, o) {
    var s = t3.explicitOrderBy;
    if (i2.length > s.length)
      throw new T2(E2.INVALID_ARGUMENT, "Too many arguments provided to " + r3 + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
    for (var u = [], a = 0; a < i2.length; a++) {
      var c = i2[a];
      if (s[a].field.isKeyField()) {
        if ("string" != typeof c)
          throw new T2(E2.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + r3 + "(), but got a " + typeof c);
        if (!Xt(t3) && -1 !== c.indexOf("/"))
          throw new T2(E2.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to " + r3 + "() must be a plain document ID, but '" + c + "' contains a slash.");
        var h2 = t3.path.child(Q2.fromString(c));
        if (!st.isDocumentKey(h2))
          throw new T2(E2.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to " + r3 + "() must result in a valid document path, but '" + h2 + "' is not because it contains an odd number of segments.");
        var f = new st(h2);
        u.push(pt(e2, f));
      } else {
        var l = Na(n3, r3, c);
        u.push(l);
      }
    }
    return new Ft(u, o);
  }(t2._query, t2.firestore._databaseId, i, e, n2, r2);
}
function ec2(t2, e, n2) {
  if ("string" == typeof (n2 = getModularInstance(n2))) {
    if ("" === n2)
      throw new T2(E2.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
    if (!Xt(e) && -1 !== n2.indexOf("/"))
      throw new T2(E2.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '" + n2 + "' contains a '/' character.");
    var r2 = e.path.child(Q2.fromString(n2));
    if (!st.isDocumentKey(r2))
      throw new T2(E2.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '" + r2 + "' is not because it has an odd number of segments (" + r2.length + ").");
    return pt(t2, new st(r2));
  }
  if (n2 instanceof Qu)
    return pt(t2, n2._key);
  throw new T2(E2.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + Uu(n2) + ".");
}
function nc2(t2, e) {
  if (!Array.isArray(t2) || 0 === t2.length)
    throw new T2(E2.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for '" + e.toString() + "' filters.");
  if (t2.length > 10)
    throw new T2(E2.INVALID_ARGUMENT, "Invalid Query. '" + e.toString() + "' filters support a maximum of 10 elements in the value array.");
}
function rc2(t2, e, n2) {
  if (!n2.isEqual(e))
    throw new T2(E2.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '" + e.toString() + "' and so you must also use '" + e.toString() + "' as your first argument to orderBy(), but your first orderBy() is on field '" + n2.toString() + "' instead.");
}
var ic2 = (
  /** @class */
  function() {
    function t2() {
    }
    return t2.prototype.convertValue = function(t3, e) {
      switch (void 0 === e && (e = "none"), ut(t3)) {
        case 0:
          return null;
        case 1:
          return t3.booleanValue;
        case 2:
          return J2(t3.integerValue || t3.doubleValue);
        case 3:
          return this.convertTimestamp(t3.timestampValue);
        case 4:
          return this.convertServerTimestamp(t3, e);
        case 5:
          return t3.stringValue;
        case 6:
          return this.convertBytes(Z2(t3.bytesValue));
        case 7:
          return this.convertReference(t3.referenceValue);
        case 8:
          return this.convertGeoPoint(t3.geoPointValue);
        case 9:
          return this.convertArray(t3.arrayValue, e);
        case 10:
          return this.convertObject(t3.mapValue, e);
        default:
          throw C();
      }
    }, t2.prototype.convertObject = function(t3, e) {
      var n2 = this, r2 = {};
      return j(t3.fields || {}, function(t4, i) {
        r2[t4] = n2.convertValue(i, e);
      }), r2;
    }, t2.prototype.convertGeoPoint = function(t3) {
      return new ha2(J2(t3.latitude), J2(t3.longitude));
    }, t2.prototype.convertArray = function(t3, e) {
      var n2 = this;
      return (t3.values || []).map(function(t4) {
        return n2.convertValue(t4, e);
      });
    }, t2.prototype.convertServerTimestamp = function(t3, e) {
      switch (e) {
        case "previous":
          var n2 = et(t3);
          return null == n2 ? null : this.convertValue(n2, e);
        case "estimate":
          return this.convertTimestamp(nt(t3));
        default:
          return null;
      }
    }, t2.prototype.convertTimestamp = function(t3) {
      var e = $(t3);
      return new q2(e.seconds, e.nanos);
    }, t2.prototype.convertDocumentKey = function(t3, e) {
      var n2 = Q2.fromString(t3);
      R2(zn(n2));
      var r2 = new Au(n2.get(1), n2.get(3)), i = new st(n2.popFirst(5));
      return r2.isEqual(e) || // TODO(b/64130202): Somehow support foreign references.
      A2("Document " + i + " contains a document reference within a different database (" + r2.projectId + "/" + r2.database + ") which is not supported. It will be treated as a reference in the current database (" + e.projectId + "/" + e.database + ") instead."), i;
    }, t2;
  }()
);
function oc2(t2, e, n2) {
  return t2 ? n2 && (n2.merge || n2.mergeFields) ? t2.toFirestore(e, n2) : t2.toFirestore(e) : e;
}
var sc2 = (
  /** @class */
  function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).firestore = e2, n2;
    }
    return __extends(e, t2), e.prototype.convertBytes = function(t3) {
      return new aa2(t3);
    }, e.prototype.convertReference = function(t3) {
      var e2 = this.convertDocumentKey(t3, this.firestore._databaseId);
      return new Qu(
        this.firestore,
        /* converter= */
        null,
        e2
      );
    }, e;
  }(ic2)
);
var uc2 = (
  /** @class */
  function() {
    function t2(t3, e) {
      this._firestore = t3, this._commitHandler = e, this._mutations = [], this._committed = false, this._dataReader = ma2(t3);
    }
    return t2.prototype.set = function(t3, e, n2) {
      this._verifyNotCommitted();
      var r2 = ac2(t3, this._firestore), i = oc2(r2._converter, e, n2), o = ga(this._dataReader, "WriteBatch.set", r2._key, i, null !== r2._converter, n2);
      return this._mutations.push(o.toMutation(r2._key, Ee.none())), this;
    }, t2.prototype.update = function(t3, e, n2) {
      for (var r2 = [], i = 3; i < arguments.length; i++)
        r2[i - 3] = arguments[i];
      this._verifyNotCommitted();
      var o, s = ac2(t3, this._firestore);
      return o = "string" == typeof (e = getModularInstance(e)) || e instanceof ua2 ? Da2(this._dataReader, "WriteBatch.update", s._key, e, n2, r2) : Sa(this._dataReader, "WriteBatch.update", s._key, e), this._mutations.push(o.toMutation(s._key, Ee.exists(true))), this;
    }, /**
     * Deletes the document referred to by the provided {@link DocumentReference}.
     *
     * @param documentRef - A reference to the document to be deleted.
     * @returns This `WriteBatch` instance. Used for chaining method calls.
     */
    t2.prototype.delete = function(t3) {
      this._verifyNotCommitted();
      var e = ac2(t3, this._firestore);
      return this._mutations = this._mutations.concat(new Ve(e._key, Ee.none())), this;
    }, /**
     * Commits all of the writes in this write batch as a single atomic unit.
     *
     * The result of these writes will only be reflected in document reads that
     * occur after the returned Promise resolves. If the client is offline, the
     * write fails. If you would like to see local modifications or buffer writes
     * until the client is online, use the full Firestore SDK.
     *
     * @returns A Promise resolved once all of the writes in the batch have been
     * successfully written to the backend as an atomic unit (note that it won't
     * resolve while you're offline).
     */
    t2.prototype.commit = function() {
      return this._verifyNotCommitted(), this._committed = true, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();
    }, t2.prototype._verifyNotCommitted = function() {
      if (this._committed)
        throw new T2(E2.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
    }, t2;
  }()
);
function ac2(t2, e) {
  if ((t2 = getModularInstance(t2)).firestore !== e)
    throw new T2(E2.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
  return t2;
}
var cc2 = (
  /** @class */
  function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).firestore = e2, n2;
    }
    return __extends(e, t2), e.prototype.convertBytes = function(t3) {
      return new aa2(t3);
    }, e.prototype.convertReference = function(t3) {
      var e2 = this.convertDocumentKey(t3, this.firestore._databaseId);
      return new Qu(
        this.firestore,
        /* converter= */
        null,
        e2
      );
    }, e;
  }(ic2)
);
function hc2(t2, e, n2) {
  for (var r2 = [], i = 3; i < arguments.length; i++)
    r2[i - 3] = arguments[i];
  t2 = Bu(t2, Qu);
  var o = Bu(t2.firestore, na2), s = ma2(o);
  return lc2(o, [("string" == typeof // For Compat types, we have to "extract" the underlying types before
  // performing validation.
  (e = getModularInstance(e)) || e instanceof ua2 ? Da2(s, "updateDoc", t2._key, e, n2, r2) : Sa(s, "updateDoc", t2._key, e)).toMutation(t2._key, Ee.exists(true))]);
}
function fc2(t2) {
  for (var e, n2, r2, i = [], o = 1; o < arguments.length; o++)
    i[o - 1] = arguments[o];
  t2 = getModularInstance(t2);
  var s = {
    includeMetadataChanges: false
  }, a = 0;
  "object" != typeof i[a] || Zu(i[a]) || (s = i[a], a++);
  var c, h2, f, l = {
    includeMetadataChanges: s.includeMetadataChanges
  };
  if (Zu(i[a])) {
    var d = i[a];
    i[a] = null === (e = d.next) || void 0 === e ? void 0 : e.bind(d), i[a + 1] = null === (n2 = d.error) || void 0 === n2 ? void 0 : n2.bind(d), i[a + 2] = null === (r2 = d.complete) || void 0 === r2 ? void 0 : r2.bind(d);
  }
  if (t2 instanceof Qu)
    h2 = Bu(t2.firestore, na2), f = Qt(t2._key.path), c = {
      next: function(e2) {
        i[a] && i[a](dc2(h2, t2, e2));
      },
      error: i[a + 1],
      complete: i[a + 2]
    };
  else {
    var p2 = Bu(t2, zu);
    h2 = Bu(p2.firestore, na2), f = p2._query;
    var y2 = new cc2(h2);
    c = {
      next: function(t3) {
        i[a] && i[a](new Ka2(h2, y2, p2, t3));
      },
      error: i[a + 1],
      complete: i[a + 2]
    }, za2(t2._query);
  }
  return function(t3, e2, n3, r3) {
    var i2 = this, o2 = new fu(r3), s2 = new ms(e2, o2, n3);
    return t3.asyncQueue.enqueueAndForget(function() {
      return __awaiter(i2, void 0, void 0, function() {
        var e3;
        return __generator(this, function(n4) {
          switch (n4.label) {
            case 0:
              return e3 = ls, [4, Tu(t3)];
            case 1:
              return [2, e3.apply(void 0, [n4.sent(), s2])];
          }
        });
      });
    }), function() {
      o2.Wo(), t3.asyncQueue.enqueueAndForget(function() {
        return __awaiter(i2, void 0, void 0, function() {
          var e3;
          return __generator(this, function(n4) {
            switch (n4.label) {
              case 0:
                return e3 = ds, [4, Tu(t3)];
              case 1:
                return [2, e3.apply(void 0, [n4.sent(), s2])];
            }
          });
        });
      });
    };
  }(ra2(h2), f, l, c);
}
function lc2(t2, e) {
  return function(t3, e2) {
    var n2 = this, r2 = new vr();
    return t3.asyncQueue.enqueueAndForget(function() {
      return __awaiter(n2, void 0, void 0, function() {
        var n3;
        return __generator(this, function(i) {
          switch (i.label) {
            case 0:
              return n3 = Cs, [4, Eu(t3)];
            case 1:
              return [2, n3.apply(void 0, [i.sent(), e2, r2])];
          }
        });
      });
    }), r2.promise;
  }(ra2(t2), e);
}
function dc2(t2, e, n2) {
  var r2 = n2.docs.get(e._key), i = new cc2(t2);
  return new Ba2(t2, i, e._key, r2, new Ua2(n2.hasPendingWrites, n2.fromCache), e._converter);
}
var pc2 = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2, n2) || this)._firestore = e2, r2;
    }
    return __extends(e, t2), e.prototype.get = function(e2) {
      var n2 = this, r2 = ac2(e2, this._firestore), i = new cc2(this._firestore);
      return t2.prototype.get.call(this, e2).then(function(t3) {
        return new Ba2(n2._firestore, i, r2._key, t3._document, new Ua2(
          /* hasPendingWrites= */
          false,
          /* fromCache= */
          false
        ), r2._converter);
      });
    }, e;
  }(
    /** @class */
    function() {
      function t2(t3, e) {
        this._firestore = t3, this._transaction = e, this._dataReader = ma2(t3);
      }
      return t2.prototype.get = function(t3) {
        var e = this, n2 = ac2(t3, this._firestore), r2 = new sc2(this._firestore);
        return this._transaction.lookup([n2._key]).then(function(t4) {
          if (!t4 || 1 !== t4.length)
            return C();
          var i = t4[0];
          if (i.isFoundDocument())
            return new Fa2(e._firestore, r2, i.key, i, n2._converter);
          if (i.isNoDocument())
            return new Fa2(e._firestore, r2, n2._key, null, n2._converter);
          throw C();
        });
      }, t2.prototype.set = function(t3, e, n2) {
        var r2 = ac2(t3, this._firestore), i = oc2(r2._converter, e, n2), o = ga(this._dataReader, "Transaction.set", r2._key, i, null !== r2._converter, n2);
        return this._transaction.set(r2._key, o), this;
      }, t2.prototype.update = function(t3, e, n2) {
        for (var r2 = [], i = 3; i < arguments.length; i++)
          r2[i - 3] = arguments[i];
        var o, s = ac2(t3, this._firestore);
        return o = "string" == typeof (e = getModularInstance(e)) || e instanceof ua2 ? Da2(this._dataReader, "Transaction.update", s._key, e, n2, r2) : Sa(this._dataReader, "Transaction.update", s._key, e), this._transaction.update(s._key, o), this;
      }, /**
       * Deletes the document referred to by the provided {@link DocumentReference}.
       *
       * @param documentRef - A reference to the document to be deleted.
       * @returns This `Transaction` instance. Used for chaining method calls.
       */
      t2.prototype.delete = function(t3) {
        var e = ac2(t3, this._firestore);
        return this._transaction.delete(e._key), this;
      }, t2;
    }()
  )
);
function yc2() {
  if ("undefined" == typeof Uint8Array)
    throw new T2(E2.UNIMPLEMENTED, "Uint8Arrays are not available in this environment.");
}
function vc2() {
  if ("undefined" == typeof atob)
    throw new T2(E2.UNIMPLEMENTED, "Blobs are unavailable in Firestore in this environment.");
}
var mc2 = (
  /** @class */
  function() {
    function t2(t3) {
      this._delegate = t3;
    }
    return t2.fromBase64String = function(e) {
      return vc2(), new t2(aa2.fromBase64String(e));
    }, t2.fromUint8Array = function(e) {
      return yc2(), new t2(aa2.fromUint8Array(e));
    }, t2.prototype.toBase64 = function() {
      return vc2(), this._delegate.toBase64();
    }, t2.prototype.toUint8Array = function() {
      return yc2(), this._delegate.toUint8Array();
    }, t2.prototype.isEqual = function(t3) {
      return this._delegate.isEqual(t3._delegate);
    }, t2.prototype.toString = function() {
      return "Blob(base64: " + this.toBase64() + ")";
    }, t2;
  }()
);
var gc2 = (
  /** @class */
  function() {
    function t2() {
    }
    return t2.prototype.enableIndexedDbPersistence = function(t3, e) {
      return function(t4, e2) {
        sa2(t4 = Bu(t4, na2));
        var n2 = ra2(t4), r2 = t4._freezeSettings(), i = new cu();
        return oa2(n2, i, new uu(i, r2.cacheSizeBytes, null == e2 ? void 0 : e2.forceOwnership));
      }(t3._delegate, {
        forceOwnership: e
      });
    }, t2.prototype.enableMultiTabIndexedDbPersistence = function(t3) {
      return function(t4) {
        sa2(t4 = Bu(t4, na2));
        var e = ra2(t4), n2 = t4._freezeSettings(), r2 = new cu();
        return oa2(e, r2, new au(r2, n2.cacheSizeBytes));
      }(t3._delegate);
    }, t2.prototype.clearIndexedDbPersistence = function(t3) {
      return function(t4) {
        var e = this;
        if (t4._initialized && !t4._terminated)
          throw new T2(E2.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
        var n2 = new vr();
        return t4._queue.enqueueAndForgetEvenWhileRestricted(function() {
          return __awaiter(e, void 0, void 0, function() {
            var e2;
            return __generator(this, function(r2) {
              switch (r2.label) {
                case 0:
                  return r2.trys.push([0, 2, , 3]), [4, function(t5) {
                    return __awaiter(this, void 0, void 0, function() {
                      var e3;
                      return __generator(this, function(n3) {
                        switch (n3.label) {
                          case 0:
                            return wr.yt() ? (e3 = t5 + "main", [4, wr.delete(e3)]) : [2, Promise.resolve()];
                          case 1:
                            return n3.sent(), [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  }(xi(t4._databaseId, t4._persistenceKey))];
                case 1:
                  return r2.sent(), n2.resolve(), [3, 3];
                case 2:
                  return e2 = r2.sent(), n2.reject(e2), [3, 3];
                case 3:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        }), n2.promise;
      }(t3._delegate);
    }, t2;
  }()
);
var wc2 = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      var r2 = this;
      this._delegate = e, this.Yc = n2, this.INTERNAL = {
        delete: function() {
          return r2.terminate();
        }
      }, t3 instanceof Au || (this.Xc = t3);
    }
    return Object.defineProperty(t2.prototype, "_databaseId", {
      get: function() {
        return this._delegate._databaseId;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.settings = function(t3) {
      t3.merge && // Remove the property from the settings once the merge is completed
      delete (t3 = Object.assign(Object.assign({}, this._delegate._getSettings()), t3)).merge, this._delegate._setSettings(t3);
    }, t2.prototype.useEmulator = function(t3, e) {
      !function(t4, e2, n2) {
        var r2 = (t4 = Bu(t4, Gu))._getSettings();
        "firestore.googleapis.com" !== r2.host && r2.host !== e2 && k2("Host has been set in both settings() and useEmulator(), emulator host will be used"), t4._setSettings(Object.assign(Object.assign({}, r2), {
          host: e2 + ":" + n2,
          ssl: false
        }));
      }(this._delegate, t3, e);
    }, t2.prototype.enableNetwork = function() {
      return function(t3) {
        var e = this;
        return t3.asyncQueue.enqueue(function() {
          return __awaiter(e, void 0, void 0, function() {
            var e2, n2;
            return __generator(this, function(r2) {
              switch (r2.label) {
                case 0:
                  return [4, bu(t3)];
                case 1:
                  return e2 = r2.sent(), [4, _u(t3)];
                case 2:
                  return n2 = r2.sent(), [2, (e2.setNetworkEnabled(true), function(t4) {
                    var e3 = O2(t4);
                    return e3.$r.delete(
                      0
                      /* UserDisabled */
                    ), Lo(e3);
                  }(n2))];
              }
            });
          });
        });
      }(ra2(Bu(this._delegate, na2)));
    }, t2.prototype.disableNetwork = function() {
      return function(t3) {
        var e = this;
        return t3.asyncQueue.enqueue(function() {
          return __awaiter(e, void 0, void 0, function() {
            var e2, n2;
            return __generator(this, function(r2) {
              switch (r2.label) {
                case 0:
                  return [4, bu(t3)];
                case 1:
                  return e2 = r2.sent(), [4, _u(t3)];
                case 2:
                  return n2 = r2.sent(), [2, (e2.setNetworkEnabled(false), function(t4) {
                    return __awaiter(this, void 0, void 0, function() {
                      var e3;
                      return __generator(this, function(n3) {
                        switch (n3.label) {
                          case 0:
                            return (e3 = O2(t4)).$r.add(
                              0
                              /* UserDisabled */
                            ), [4, Po(e3)];
                          case 1:
                            return n3.sent(), // Set the OnlineState to Offline so get()s return from cache, etc.
                            e3.Br.set(
                              "Offline"
                              /* Offline */
                            ), [
                              2
                              /*return*/
                            ];
                        }
                      });
                    });
                  }(n2))];
              }
            });
          });
        });
      }(ra2(Bu(this._delegate, na2)));
    }, t2.prototype.enablePersistence = function(t3) {
      var e = false, n2 = false;
      return t3 && Fu("synchronizeTabs", e = !!t3.synchronizeTabs, "experimentalForceOwningTab", n2 = !!t3.experimentalForceOwningTab), e ? this.Yc.enableMultiTabIndexedDbPersistence(this) : this.Yc.enableIndexedDbPersistence(this, n2);
    }, t2.prototype.clearPersistence = function() {
      return this.Yc.clearIndexedDbPersistence(this);
    }, t2.prototype.terminate = function() {
      return this.Xc && (this.Xc._removeServiceInstance("firestore"), this.Xc._removeServiceInstance("firestore-exp")), this._delegate._delete();
    }, t2.prototype.waitForPendingWrites = function() {
      return function(t3) {
        var e = this, n2 = new vr();
        return t3.asyncQueue.enqueueAndForget(function() {
          return __awaiter(e, void 0, void 0, function() {
            var e2;
            return __generator(this, function(r2) {
              switch (r2.label) {
                case 0:
                  return e2 = Fs, [4, Eu(t3)];
                case 1:
                  return [2, e2.apply(void 0, [r2.sent(), n2])];
              }
            });
          });
        }), n2.promise;
      }(ra2(Bu(this._delegate, na2)));
    }, t2.prototype.onSnapshotsInSync = function(t3) {
      return function(t4, e) {
        return function(t5, e2) {
          var n2 = this, r2 = new fu(e2);
          return t5.asyncQueue.enqueueAndForget(function() {
            return __awaiter(n2, void 0, void 0, function() {
              var e3;
              return __generator(this, function(n3) {
                switch (n3.label) {
                  case 0:
                    return e3 = function(t6, e4) {
                      O2(t6).Gr.add(e4), // Immediately fire an initial event, indicating all existing listeners
                      // are in-sync.
                      e4.next();
                    }, [4, Tu(t5)];
                  case 1:
                    return [2, e3.apply(void 0, [n3.sent(), r2])];
                }
              });
            });
          }), function() {
            r2.Wo(), t5.asyncQueue.enqueueAndForget(function() {
              return __awaiter(n2, void 0, void 0, function() {
                var e3;
                return __generator(this, function(n3) {
                  switch (n3.label) {
                    case 0:
                      return e3 = function(t6, e4) {
                        O2(t6).Gr.delete(e4);
                      }, [4, Tu(t5)];
                    case 1:
                      return [2, e3.apply(void 0, [n3.sent(), r2])];
                  }
                });
              });
            });
          };
        }(ra2(t4 = Bu(t4, na2)), Zu(e) ? e : {
          next: e
        });
      }(this._delegate, t3);
    }, Object.defineProperty(t2.prototype, "app", {
      get: function() {
        if (!this.Xc)
          throw new T2(E2.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
        return this.Xc;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.collection = function(t3) {
      try {
        return new Lc2(this, Hu(this._delegate, t3));
      } catch (t4) {
        throw Dc2(t4, "collection()", "Firestore.collection()");
      }
    }, t2.prototype.doc = function(t3) {
      try {
        return new Sc2(this, Yu(this._delegate, t3));
      } catch (t4) {
        throw Dc2(t4, "doc()", "Firestore.doc()");
      }
    }, t2.prototype.collectionGroup = function(t3) {
      try {
        return new Cc2(this, function(t4, e) {
          if (t4 = Bu(t4, Gu), Pu("collectionGroup", "collection id", e), e.indexOf("/") >= 0)
            throw new T2(E2.INVALID_ARGUMENT, "Invalid collection ID '" + e + "' passed to function collectionGroup(). Collection IDs must not contain '/'.");
          return new zu(
            t4,
            /* converter= */
            null,
            /**
            * Creates a new Query for a collection group query that matches all documents
            * within the provided collection group.
            */
            function(t5) {
              return new Kt(Q2.emptyPath(), t5);
            }(e)
          );
        }(this._delegate, t3));
      } catch (t4) {
        throw Dc2(t4, "collectionGroup()", "Firestore.collectionGroup()");
      }
    }, t2.prototype.runTransaction = function(t3) {
      var e = this;
      return function(t4, e2) {
        return function(t5, e3) {
          var n2 = this, r2 = new vr();
          return t5.asyncQueue.enqueueAndForget(function() {
            return __awaiter(n2, void 0, void 0, function() {
              var n3;
              return __generator(this, function(i) {
                switch (i.label) {
                  case 0:
                    return [4, function(t6) {
                      return wu(t6).then(function(t7) {
                        return t7.datastore;
                      });
                    }(t5)];
                  case 1:
                    return n3 = i.sent(), new pu(t5.asyncQueue, n3, e3, r2).run(), [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }), r2.promise;
        }(ra2(t4), function(n2) {
          return e2(new pc2(t4, n2));
        });
      }(this._delegate, function(n2) {
        return t3(new _c(e, n2));
      });
    }, t2.prototype.batch = function() {
      var t3 = this;
      return ra2(this._delegate), new Ec2(new uc2(this._delegate, function(e) {
        return lc2(t3._delegate, e);
      }));
    }, t2.prototype.loadBundle = function(t3) {
      throw new T2(E2.FAILED_PRECONDITION, '"loadBundle()" does not exist, have you imported "firebase/firestore/bundle"?');
    }, t2.prototype.namedQuery = function(t3) {
      throw new T2(E2.FAILED_PRECONDITION, '"namedQuery()" does not exist, have you imported "firebase/firestore/bundle"?');
    }, t2;
  }()
);
var bc2 = (
  /** @class */
  function(t2) {
    function e(e2) {
      var n2 = this;
      return (n2 = t2.call(this) || this).firestore = e2, n2;
    }
    return __extends(e, t2), e.prototype.convertBytes = function(t3) {
      return new mc2(new aa2(t3));
    }, e.prototype.convertReference = function(t3) {
      var e2 = this.convertDocumentKey(t3, this.firestore._databaseId);
      return Sc2.Zc(
        e2,
        this.firestore,
        /* converter= */
        null
      );
    }, e;
  }(ic2)
);
function Ic2(t2) {
  var e;
  e = t2, S2.setLogLevel(e);
}
var _c = (
  /** @class */
  function() {
    function t2(t3, e) {
      this._firestore = t3, this._delegate = e, this._userDataWriter = new bc2(t3);
    }
    return t2.prototype.get = function(t3) {
      var e = this, n2 = Pc2(t3);
      return this._delegate.get(n2).then(function(t4) {
        return new kc2(e._firestore, new Ba2(e._firestore._delegate, e._userDataWriter, t4._key, t4._document, t4.metadata, n2._converter));
      });
    }, t2.prototype.set = function(t3, e, n2) {
      var r2 = Pc2(t3);
      return n2 ? (Mu("Transaction.set", n2), this._delegate.set(r2, e, n2)) : this._delegate.set(r2, e), this;
    }, t2.prototype.update = function(t3, e, n2) {
      for (var r2, i = [], o = 3; o < arguments.length; o++)
        i[o - 3] = arguments[o];
      var s = Pc2(t3);
      return 2 === arguments.length ? this._delegate.update(s, e) : (r2 = this._delegate).update.apply(r2, __spreadArray([s, e, n2], i)), this;
    }, t2.prototype.delete = function(t3) {
      var e = Pc2(t3);
      return this._delegate.delete(e), this;
    }, t2;
  }()
);
var Ec2 = (
  /** @class */
  function() {
    function t2(t3) {
      this._delegate = t3;
    }
    return t2.prototype.set = function(t3, e, n2) {
      var r2 = Pc2(t3);
      return n2 ? (Mu("WriteBatch.set", n2), this._delegate.set(r2, e, n2)) : this._delegate.set(r2, e), this;
    }, t2.prototype.update = function(t3, e, n2) {
      for (var r2, i = [], o = 3; o < arguments.length; o++)
        i[o - 3] = arguments[o];
      var s = Pc2(t3);
      return 2 === arguments.length ? this._delegate.update(s, e) : (r2 = this._delegate).update.apply(r2, __spreadArray([s, e, n2], i)), this;
    }, t2.prototype.delete = function(t3) {
      var e = Pc2(t3);
      return this._delegate.delete(e), this;
    }, t2.prototype.commit = function() {
      return this._delegate.commit();
    }, t2;
  }()
);
var Tc2 = (
  /** @class */
  function() {
    function t2(t3, e, n2) {
      this._firestore = t3, this._userDataWriter = e, this._delegate = n2;
    }
    return t2.prototype.fromFirestore = function(t3, e) {
      var n2 = new ja2(
        this._firestore._delegate,
        this._userDataWriter,
        t3._key,
        t3._document,
        t3.metadata,
        /* converter= */
        null
      );
      return this._delegate.fromFirestore(new xc(this._firestore, n2), null != e ? e : {});
    }, t2.prototype.toFirestore = function(t3, e) {
      return e ? this._delegate.toFirestore(t3, e) : this._delegate.toFirestore(t3);
    }, // Use the same instance of `FirestoreDataConverter` for the given instances
    // of `Firestore` and `PublicFirestoreDataConverter` so that isEqual() will
    // compare equal for two objects created with the same converter instance.
    t2.tu = function(e, n2) {
      var r2 = t2.eu, i = r2.get(e);
      i || (i = /* @__PURE__ */ new WeakMap(), r2.set(e, i));
      var o = i.get(n2);
      return o || (o = new t2(e, new bc2(e), n2), i.set(n2, o)), o;
    }, t2;
  }()
);
Tc2.eu = /* @__PURE__ */ new WeakMap();
var Sc2 = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.firestore = t3, this._delegate = e, this._userDataWriter = new bc2(t3);
    }
    return t2.nu = function(e, n2, r2) {
      if (e.length % 2 != 0)
        throw new T2(E2.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + e.canonicalString() + " has " + e.length);
      return new t2(n2, new Qu(n2._delegate, r2, new st(e)));
    }, t2.Zc = function(e, n2, r2) {
      return new t2(n2, new Qu(n2._delegate, r2, e));
    }, Object.defineProperty(t2.prototype, "id", {
      get: function() {
        return this._delegate.id;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "parent", {
      get: function() {
        return new Lc2(this.firestore, this._delegate.parent);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "path", {
      get: function() {
        return this._delegate.path;
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.collection = function(t3) {
      try {
        return new Lc2(this.firestore, Hu(this._delegate, t3));
      } catch (t4) {
        throw Dc2(t4, "collection()", "DocumentReference.collection()");
      }
    }, t2.prototype.isEqual = function(t3) {
      return (t3 = getModularInstance(t3)) instanceof Qu && Xu(this._delegate, t3);
    }, t2.prototype.set = function(t3, e) {
      e = Mu("DocumentReference.set", e);
      try {
        return function(t4, e2, n2) {
          t4 = Bu(t4, Qu);
          var r2 = Bu(t4.firestore, na2), i = oc2(t4._converter, e2, n2);
          return lc2(r2, [ga(ma2(r2), "setDoc", t4._key, i, null !== t4._converter, n2).toMutation(t4._key, Ee.none())]);
        }(this._delegate, t3, e);
      } catch (t4) {
        throw Dc2(t4, "setDoc()", "DocumentReference.set()");
      }
    }, t2.prototype.update = function(t3, e) {
      for (var n2 = [], r2 = 2; r2 < arguments.length; r2++)
        n2[r2 - 2] = arguments[r2];
      try {
        return 1 === arguments.length ? hc2(this._delegate, t3) : hc2.apply(void 0, __spreadArray([this._delegate, t3, e], n2));
      } catch (t4) {
        throw Dc2(t4, "updateDoc()", "DocumentReference.update()");
      }
    }, t2.prototype.delete = function() {
      return lc2(Bu((t3 = this._delegate).firestore, na2), [new Ve(t3._key, Ee.none())]);
      var t3;
    }, t2.prototype.onSnapshot = function() {
      for (var t3 = this, e = [], n2 = 0; n2 < arguments.length; n2++)
        e[n2] = arguments[n2];
      var r2 = Nc2(e), i = Ac2(e, function(e2) {
        return new kc2(t3.firestore, new Ba2(t3.firestore._delegate, t3._userDataWriter, e2._key, e2._document, e2.metadata, t3._delegate._converter));
      });
      return fc2(this._delegate, r2, i);
    }, t2.prototype.get = function(t3) {
      var e = this;
      return ("cache" === (null == t3 ? void 0 : t3.source) ? function(t4) {
        t4 = Bu(t4, Qu);
        var e2 = Bu(t4.firestore, na2), n2 = ra2(e2), r2 = new cc2(e2);
        return function(t5, e3) {
          var n3 = this, r3 = new vr();
          return t5.asyncQueue.enqueueAndForget(function() {
            return __awaiter(n3, void 0, void 0, function() {
              var n4;
              return __generator(this, function(i) {
                switch (i.label) {
                  case 0:
                    return n4 = function(t6, e4, n5) {
                      return __awaiter(this, void 0, void 0, function() {
                        var r4, i2;
                        return __generator(this, function(o) {
                          switch (o.label) {
                            case 0:
                              return o.trys.push([0, 2, , 3]), [4, function(t7, e5) {
                                var n6 = O2(t7);
                                return n6.persistence.runTransaction("read document", "readonly", function(t8) {
                                  return n6.Mn.mn(t8, e5);
                                });
                              }(t6, e4)];
                            case 1:
                              return (i2 = o.sent()).isFoundDocument() ? n5.resolve(i2) : i2.isNoDocument() ? n5.resolve(null) : n5.reject(new T2(E2.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)")), [3, 3];
                            case 2:
                              return r4 = o.sent(), i2 = ss(r4, "Failed to get document '" + e4 + " from cache"), n5.reject(i2), [3, 3];
                            case 3:
                              return [
                                2
                                /*return*/
                              ];
                          }
                        });
                      });
                    }, [4, Iu(t5)];
                  case 1:
                    return [2, n4.apply(void 0, [i.sent(), e3, r3])];
                }
              });
            });
          }), r3.promise;
        }(n2, t4._key).then(function(n3) {
          return new Ba2(e2, r2, t4._key, n3, new Ua2(
            null !== n3 && n3.hasLocalMutations,
            /* fromCache= */
            true
          ), t4._converter);
        });
      }(this._delegate) : "server" === (null == t3 ? void 0 : t3.source) ? function(t4) {
        t4 = Bu(t4, Qu);
        var e2 = Bu(t4.firestore, na2);
        return Su(ra2(e2), t4._key, {
          source: "server"
        }).then(function(n2) {
          return dc2(e2, t4, n2);
        });
      }(this._delegate) : function(t4) {
        t4 = Bu(t4, Qu);
        var e2 = Bu(t4.firestore, na2);
        return Su(ra2(e2), t4._key).then(function(n2) {
          return dc2(e2, t4, n2);
        });
      }(this._delegate)).then(function(t4) {
        return new kc2(e.firestore, new Ba2(e.firestore._delegate, e._userDataWriter, t4._key, t4._document, t4.metadata, e._delegate._converter));
      });
    }, t2.prototype.withConverter = function(e) {
      return new t2(this.firestore, e ? this._delegate.withConverter(Tc2.tu(this.firestore, e)) : this._delegate.withConverter(null));
    }, t2;
  }()
);
function Dc2(t2, e, n2) {
  return t2.message = t2.message.replace(e, n2), t2;
}
function Nc2(t2) {
  for (var e = 0, n2 = t2; e < n2.length; e++) {
    var r2 = n2[e];
    if ("object" == typeof r2 && !Zu(r2))
      return r2;
  }
  return {};
}
function Ac2(t2, e) {
  var n2, r2, i;
  return {
    next: function(t3) {
      i.next && i.next(e(t3));
    },
    error: null === (n2 = (i = Zu(t2[0]) ? t2[0] : Zu(t2[1]) ? t2[1] : "function" == typeof t2[0] ? {
      next: t2[0],
      error: t2[1],
      complete: t2[2]
    } : {
      next: t2[1],
      error: t2[2],
      complete: t2[3]
    }).error) || void 0 === n2 ? void 0 : n2.bind(i),
    complete: null === (r2 = i.complete) || void 0 === r2 ? void 0 : r2.bind(i)
  };
}
var kc2 = (
  /** @class */
  function() {
    function t2(t3, e) {
      this._firestore = t3, this._delegate = e;
    }
    return Object.defineProperty(t2.prototype, "ref", {
      get: function() {
        return new Sc2(this._firestore, this._delegate.ref);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "id", {
      get: function() {
        return this._delegate.id;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "metadata", {
      get: function() {
        return this._delegate.metadata;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "exists", {
      get: function() {
        return this._delegate.exists();
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.data = function(t3) {
      return this._delegate.data(t3);
    }, t2.prototype.get = function(t3, e) {
      return this._delegate.get(t3, e);
    }, t2.prototype.isEqual = function(t3) {
      return Qa2(this._delegate, t3._delegate);
    }, t2;
  }()
);
var xc = (
  /** @class */
  function(t2) {
    function e() {
      return null !== t2 && t2.apply(this, arguments) || this;
    }
    return __extends(e, t2), e.prototype.data = function(t3) {
      return this._delegate.data(t3);
    }, e;
  }(kc2)
);
var Cc2 = (
  /** @class */
  function() {
    function t2(t3, e) {
      this.firestore = t3, this._delegate = e, this._userDataWriter = new bc2(t3);
    }
    return t2.prototype.where = function(e, n2, r2) {
      try {
        return new t2(this.firestore, Ha2(this._delegate, function(t3, e2, n3) {
          var r3 = e2, i = qa2("where", t3);
          return new Ya2(i, r3, n3);
        }(e, n2, r2)));
      } catch (e2) {
        throw Dc2(e2, /(orderBy|where)\(\)/, "Query.$1()");
      }
    }, t2.prototype.orderBy = function(e, n2) {
      try {
        return new t2(this.firestore, Ha2(this._delegate, function(t3, e2) {
          void 0 === e2 && (e2 = "asc");
          var n3 = e2, r2 = qa2("orderBy", t3);
          return new Xa2(r2, n3);
        }(e, n2)));
      } catch (e2) {
        throw Dc2(e2, /(orderBy|where)\(\)/, "Query.$1()");
      }
    }, t2.prototype.limit = function(e) {
      try {
        return new t2(this.firestore, Ha2(this._delegate, function(t3) {
          return ju("limit", t3), new $a2(
            "limit",
            t3,
            "F"
            /* First */
          );
        }(e)));
      } catch (e2) {
        throw Dc2(e2, "limit()", "Query.limit()");
      }
    }, t2.prototype.limitToLast = function(e) {
      try {
        return new t2(this.firestore, Ha2(this._delegate, function(t3) {
          return ju("limitToLast", t3), new $a2(
            "limitToLast",
            t3,
            "L"
            /* Last */
          );
        }(e)));
      } catch (e2) {
        throw Dc2(e2, "limitToLast()", "Query.limitToLast()");
      }
    }, t2.prototype.startAt = function() {
      for (var e = [], n2 = 0; n2 < arguments.length; n2++)
        e[n2] = arguments[n2];
      try {
        return new t2(this.firestore, Ha2(this._delegate, (function() {
          for (var t3 = [], e2 = 0; e2 < arguments.length; e2++)
            t3[e2] = arguments[e2];
          return new Ja2(
            "startAt",
            t3,
            /*before=*/
            true
          );
        }).apply(void 0, e)));
      } catch (e2) {
        throw Dc2(e2, "startAt()", "Query.startAt()");
      }
    }, t2.prototype.startAfter = function() {
      for (var e = [], n2 = 0; n2 < arguments.length; n2++)
        e[n2] = arguments[n2];
      try {
        return new t2(this.firestore, Ha2(this._delegate, (function() {
          for (var t3 = [], e2 = 0; e2 < arguments.length; e2++)
            t3[e2] = arguments[e2];
          return new Ja2(
            "startAfter",
            t3,
            /*before=*/
            false
          );
        }).apply(void 0, e)));
      } catch (e2) {
        throw Dc2(e2, "startAfter()", "Query.startAfter()");
      }
    }, t2.prototype.endBefore = function() {
      for (var e = [], n2 = 0; n2 < arguments.length; n2++)
        e[n2] = arguments[n2];
      try {
        return new t2(this.firestore, Ha2(this._delegate, (function() {
          for (var t3 = [], e2 = 0; e2 < arguments.length; e2++)
            t3[e2] = arguments[e2];
          return new Za2(
            "endBefore",
            t3,
            /*before=*/
            true
          );
        }).apply(void 0, e)));
      } catch (e2) {
        throw Dc2(e2, "endBefore()", "Query.endBefore()");
      }
    }, t2.prototype.endAt = function() {
      for (var e = [], n2 = 0; n2 < arguments.length; n2++)
        e[n2] = arguments[n2];
      try {
        return new t2(this.firestore, Ha2(this._delegate, (function() {
          for (var t3 = [], e2 = 0; e2 < arguments.length; e2++)
            t3[e2] = arguments[e2];
          return new Za2(
            "endAt",
            t3,
            /*before=*/
            false
          );
        }).apply(void 0, e)));
      } catch (e2) {
        throw Dc2(e2, "endAt()", "Query.endAt()");
      }
    }, t2.prototype.isEqual = function(t3) {
      return $u(this._delegate, t3._delegate);
    }, t2.prototype.get = function(t3) {
      var e = this;
      return ("cache" === (null == t3 ? void 0 : t3.source) ? (
        /**
        * Executes the query and returns the results as a `QuerySnapshot` from cache.
        * Returns an error if the document is not currently cached.
        *
        * @returns A Promise that will be resolved with the results of the query.
        */
        function(t4) {
          t4 = Bu(t4, zu);
          var e2 = Bu(t4.firestore, na2), n2 = ra2(e2), r2 = new cc2(e2);
          return function(t5, e3) {
            var n3 = this, r3 = new vr();
            return t5.asyncQueue.enqueueAndForget(function() {
              return __awaiter(n3, void 0, void 0, function() {
                var n4;
                return __generator(this, function(i) {
                  switch (i.label) {
                    case 0:
                      return n4 = function(t6, e4, n5) {
                        return __awaiter(this, void 0, void 0, function() {
                          var r4, i2, o, s, u;
                          return __generator(this, function(a) {
                            switch (a.label) {
                              case 0:
                                return a.trys.push([0, 2, , 3]), [4, Qi(
                                  t6,
                                  e4,
                                  /* usePreviousResults= */
                                  true
                                )];
                              case 1:
                                return u = a.sent(), r4 = new Ts(e4, u.Bn), i2 = r4._o(u.documents), o = r4.applyChanges(
                                  i2,
                                  /* updateLimboDocuments= */
                                  false
                                ), n5.resolve(o.snapshot), [3, 3];
                              case 2:
                                return s = a.sent(), u = ss(s, "Failed to execute query '" + e4 + " against cache"), n5.reject(u), [3, 3];
                              case 3:
                                return [
                                  2
                                  /*return*/
                                ];
                            }
                          });
                        });
                      }, [4, Iu(t5)];
                    case 1:
                      return [2, n4.apply(void 0, [i.sent(), e3, r3])];
                  }
                });
              });
            }), r3.promise;
          }(n2, t4._query).then(function(n3) {
            return new Ka2(e2, r2, t4, n3);
          });
        }(this._delegate)
      ) : "server" === (null == t3 ? void 0 : t3.source) ? function(t4) {
        t4 = Bu(t4, zu);
        var e2 = Bu(t4.firestore, na2), n2 = ra2(e2), r2 = new cc2(e2);
        return Du(n2, t4._query, {
          source: "server"
        }).then(function(n3) {
          return new Ka2(e2, r2, t4, n3);
        });
      }(this._delegate) : function(t4) {
        t4 = Bu(t4, zu);
        var e2 = Bu(t4.firestore, na2), n2 = ra2(e2), r2 = new cc2(e2);
        return za2(t4._query), Du(n2, t4._query).then(function(n3) {
          return new Ka2(e2, r2, t4, n3);
        });
      }(this._delegate)).then(function(t4) {
        return new Oc2(e.firestore, new Ka2(e.firestore._delegate, e._userDataWriter, e._delegate, t4._snapshot));
      });
    }, t2.prototype.onSnapshot = function() {
      for (var t3 = this, e = [], n2 = 0; n2 < arguments.length; n2++)
        e[n2] = arguments[n2];
      var r2 = Nc2(e), i = Ac2(e, function(e2) {
        return new Oc2(t3.firestore, new Ka2(t3.firestore._delegate, t3._userDataWriter, t3._delegate, e2._snapshot));
      });
      return fc2(this._delegate, r2, i);
    }, t2.prototype.withConverter = function(e) {
      return new t2(this.firestore, e ? this._delegate.withConverter(Tc2.tu(this.firestore, e)) : this._delegate.withConverter(null));
    }, t2;
  }()
);
var Rc2 = (
  /** @class */
  function() {
    function t2(t3, e) {
      this._firestore = t3, this._delegate = e;
    }
    return Object.defineProperty(t2.prototype, "type", {
      get: function() {
        return this._delegate.type;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "doc", {
      get: function() {
        return new xc(this._firestore, this._delegate.doc);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "oldIndex", {
      get: function() {
        return this._delegate.oldIndex;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "newIndex", {
      get: function() {
        return this._delegate.newIndex;
      },
      enumerable: false,
      configurable: true
    }), t2;
  }()
);
var Oc2 = (
  /** @class */
  function() {
    function t2(t3, e) {
      this._firestore = t3, this._delegate = e;
    }
    return Object.defineProperty(t2.prototype, "query", {
      get: function() {
        return new Cc2(this._firestore, this._delegate.query);
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "metadata", {
      get: function() {
        return this._delegate.metadata;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "size", {
      get: function() {
        return this._delegate.size;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "empty", {
      get: function() {
        return this._delegate.empty;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(t2.prototype, "docs", {
      get: function() {
        var t3 = this;
        return this._delegate.docs.map(function(e) {
          return new xc(t3._firestore, e);
        });
      },
      enumerable: false,
      configurable: true
    }), t2.prototype.docChanges = function(t3) {
      var e = this;
      return this._delegate.docChanges(t3).map(function(t4) {
        return new Rc2(e._firestore, t4);
      });
    }, t2.prototype.forEach = function(t3, e) {
      var n2 = this;
      this._delegate.forEach(function(r2) {
        t3.call(e, new xc(n2._firestore, r2));
      });
    }, t2.prototype.isEqual = function(t3) {
      return Qa2(this._delegate, t3._delegate);
    }, t2;
  }()
);
var Lc2 = (
  /** @class */
  function(t2) {
    function e(e2, n2) {
      var r2 = this;
      return (r2 = t2.call(this, e2, n2) || this).firestore = e2, r2._delegate = n2, r2;
    }
    return __extends(e, t2), Object.defineProperty(e.prototype, "id", {
      get: function() {
        return this._delegate.id;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "path", {
      get: function() {
        return this._delegate.path;
      },
      enumerable: false,
      configurable: true
    }), Object.defineProperty(e.prototype, "parent", {
      get: function() {
        var t3 = this._delegate.parent;
        return t3 ? new Sc2(this.firestore, t3) : null;
      },
      enumerable: false,
      configurable: true
    }), e.prototype.doc = function(t3) {
      try {
        return new Sc2(this.firestore, void 0 === t3 ? Yu(this._delegate) : Yu(this._delegate, t3));
      } catch (t4) {
        throw Dc2(t4, "doc()", "CollectionReference.doc()");
      }
    }, e.prototype.add = function(t3) {
      var e2 = this;
      return function(t4, e3) {
        var n2 = Bu(t4.firestore, na2), r2 = Yu(t4), i = oc2(t4._converter, e3);
        return lc2(n2, [ga(ma2(t4.firestore), "addDoc", r2._key, i, null !== t4._converter, {}).toMutation(r2._key, Ee.exists(false))]).then(function() {
          return r2;
        });
      }(this._delegate, t3).then(function(t4) {
        return new Sc2(e2.firestore, t4);
      });
    }, e.prototype.isEqual = function(t3) {
      return Xu(this._delegate, t3._delegate);
    }, e.prototype.withConverter = function(t3) {
      return new e(this.firestore, t3 ? this._delegate.withConverter(Tc2.tu(this.firestore, t3)) : this._delegate.withConverter(null));
    }, e;
  }(Cc2)
);
function Pc2(t2) {
  return Bu(t2, Qu);
}
var Mc2 = (
  /** @class */
  function() {
    function t2() {
      for (var t3 = [], e = 0; e < arguments.length; e++)
        t3[e] = arguments[e];
      this._delegate = new (ua2.bind.apply(ua2, __spreadArray([void 0], t3)))();
    }
    return t2.documentId = function() {
      return new t2(W2.keyField().canonicalString());
    }, t2.prototype.isEqual = function(t3) {
      return (t3 = getModularInstance(t3)) instanceof ua2 && this._delegate._internalPath.isEqual(t3._internalPath);
    }, t2;
  }()
);
var Fc2 = (
  /** @class */
  function() {
    function t2(t3) {
      this._delegate = t3;
    }
    return t2.serverTimestamp = function() {
      var e = new Ia2("serverTimestamp");
      return e._methodName = "FieldValue.serverTimestamp", new t2(e);
    }, t2.delete = function() {
      var e = new wa("deleteField");
      return e._methodName = "FieldValue.delete", new t2(e);
    }, t2.arrayUnion = function() {
      for (var e = [], n2 = 0; n2 < arguments.length; n2++)
        e[n2] = arguments[n2];
      var r2 = (
        /**
        * Returns a special value that can be used with {@link setDoc} or {@link
        * updateDoc} that tells the server to union the given elements with any array
        * value that already exists on the server. Each specified element that doesn't
        * already exist in the array will be added to the end. If the field being
        * modified is not already an array it will be overwritten with an array
        * containing exactly the specified elements.
        *
        * @param elements - The elements to union into the array.
        * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or
        * `updateDoc()`.
        */
        (function() {
          for (var t3 = [], e2 = 0; e2 < arguments.length; e2++)
            t3[e2] = arguments[e2];
          return new _a("arrayUnion", t3);
        }).apply(void 0, e)
      );
      return r2._methodName = "FieldValue.arrayUnion", new t2(r2);
    }, t2.arrayRemove = function() {
      for (var e = [], n2 = 0; n2 < arguments.length; n2++)
        e[n2] = arguments[n2];
      var r2 = (function() {
        for (var t3 = [], e2 = 0; e2 < arguments.length; e2++)
          t3[e2] = arguments[e2];
        return new Ea2("arrayRemove", t3);
      }).apply(void 0, e);
      return r2._methodName = "FieldValue.arrayRemove", new t2(r2);
    }, t2.increment = function(e) {
      var n2 = function(t3) {
        return new Ta2("increment", t3);
      }(e);
      return n2._methodName = "FieldValue.increment", new t2(n2);
    }, t2.prototype.isEqual = function(t3) {
      return this._delegate.isEqual(t3._delegate);
    }, t2;
  }()
);

// node_modules/@firebase/firestore/dist/esm5/index.js
var L3 = {
  Firestore: wc2,
  GeoPoint: ha2,
  Timestamp: q2,
  Blob: mc2,
  Transaction: _c,
  WriteBatch: Ec2,
  DocumentReference: Sc2,
  DocumentSnapshot: kc2,
  Query: Cc2,
  QueryDocumentSnapshot: xc,
  QuerySnapshot: Oc2,
  CollectionReference: Lc2,
  FieldPath: Mc2,
  FieldValue: Fc2,
  setLogLevel: Ic2,
  CACHE_SIZE_UNLIMITED: ea2
};
function P3(e) {
  !/**
  * Configures Firestore as part of the Firebase SDK by calling registerService.
  *
  * @param firebase - The FirebaseNamespace to register Firestore with
  * @param firestoreFactory - A factory function that returns a new Firestore
  *    instance.
  */
  function(e2, r2) {
    e2.INTERNAL.registerComponent(new Component(
      "firestore",
      function(e3) {
        var t2 = e3.getProvider("app").getImmediate();
        return r2(t2, e3.getProvider("auth-internal"));
      },
      "PUBLIC"
      /* PUBLIC */
    ).setServiceProps(Object.assign({}, L3)));
  }(e, function(e2, s) {
    return new wc2(e2, new na2(e2, s), new gc2());
  }), e.registerVersion("@firebase/firestore", "2.2.3");
}
P3(index_esm_default);
/*! Bundled license information:

@firebase/webchannel-wrapper/dist/index.esm.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

@firebase/firestore/dist/esm5/prebuilt-4888bff0-430c65bc.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
  * @license
  * Copyright 2020 Google LLC
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *   http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *)
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2019 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/firestore/dist/esm5/prebuilt-4888bff0-430c65bc.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/firestore/dist/esm5/prebuilt-4888bff0-430c65bc.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)

@firebase/firestore/dist/esm5/index.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   *
   * Licensed under the Apache License, Version 2.0 (the "License");
   * you may not use this file except in compliance with the License.
   * You may obtain a copy of the License at
   *
   *   http://www.apache.org/licenses/LICENSE-2.0
   *
   * Unless required by applicable law or agreed to in writing, software
   * distributed under the License is distributed on an "AS IS" BASIS,
   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   * See the License for the specific language governing permissions and
   * limitations under the License.
   *)
*/
//# sourceMappingURL=firebase_firestore.js.map
