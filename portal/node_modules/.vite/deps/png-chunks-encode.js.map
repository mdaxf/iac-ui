{
  "version": 3,
  "sources": ["../../sliced/index.js", "../../png-chunks-encode/index.js"],
  "sourcesContent": ["\n/**\n * An Array.prototype.slice.call(arguments) alternative\n *\n * @param {Object} args something with a length\n * @param {Number} slice\n * @param {Number} sliceEnd\n * @api public\n */\n\nmodule.exports = function (args, slice, sliceEnd) {\n  var ret = [];\n  var len = args.length;\n\n  if (0 === len) return ret;\n\n  var start = slice < 0\n    ? Math.max(0, slice + len)\n    : slice || 0;\n\n  if (sliceEnd !== undefined) {\n    len = sliceEnd < 0\n      ? sliceEnd + len\n      : sliceEnd\n  }\n\n  while (len-- > start) {\n    ret[len - start] = args[len];\n  }\n\n  return ret;\n}\n\n", "var sliced = require('sliced')\nvar crc32 = require('crc-32')\n\nmodule.exports = encodeChunks\n\n// Used for fast-ish conversion between uint8s and uint32s/int32s.\n// Also required in order to remain agnostic for both Node Buffers and\n// Uint8Arrays.\nvar uint8 = new Uint8Array(4)\nvar int32 = new Int32Array(uint8.buffer)\nvar uint32 = new Uint32Array(uint8.buffer)\n\nfunction encodeChunks (chunks) {\n  var totalSize = 8\n  var idx = totalSize\n  var i\n\n  for (i = 0; i < chunks.length; i++) {\n    totalSize += chunks[i].data.length\n    totalSize += 12\n  }\n\n  var output = new Uint8Array(totalSize)\n\n  output[0] = 0x89\n  output[1] = 0x50\n  output[2] = 0x4E\n  output[3] = 0x47\n  output[4] = 0x0D\n  output[5] = 0x0A\n  output[6] = 0x1A\n  output[7] = 0x0A\n\n  for (i = 0; i < chunks.length; i++) {\n    var chunk = chunks[i]\n    var name = chunk.name\n    var data = chunk.data\n    var size = data.length\n    var nameChars = [\n      name.charCodeAt(0),\n      name.charCodeAt(1),\n      name.charCodeAt(2),\n      name.charCodeAt(3)\n    ]\n\n    uint32[0] = size\n    output[idx++] = uint8[3]\n    output[idx++] = uint8[2]\n    output[idx++] = uint8[1]\n    output[idx++] = uint8[0]\n\n    output[idx++] = nameChars[0]\n    output[idx++] = nameChars[1]\n    output[idx++] = nameChars[2]\n    output[idx++] = nameChars[3]\n\n    for (var j = 0; j < size;) {\n      output[idx++] = data[j++]\n    }\n\n    var crcCheck = nameChars.concat(sliced(data))\n    var crc = crc32.buf(crcCheck)\n\n    int32[0] = crc\n    output[idx++] = uint8[3]\n    output[idx++] = uint8[2]\n    output[idx++] = uint8[1]\n    output[idx++] = uint8[0]\n  }\n\n  return output\n}\n"],
  "mappings": ";;;;;;;;AAAA;AAAA;AAUA,WAAO,UAAU,SAAU,MAAM,OAAO,UAAU;AAChD,UAAI,MAAM,CAAC;AACX,UAAI,MAAM,KAAK;AAEf,UAAI,MAAM;AAAK,eAAO;AAEtB,UAAI,QAAQ,QAAQ,IAChB,KAAK,IAAI,GAAG,QAAQ,GAAG,IACvB,SAAS;AAEb,UAAI,aAAa,QAAW;AAC1B,cAAM,WAAW,IACb,WAAW,MACX;AAAA,MACN;AAEA,aAAO,QAAQ,OAAO;AACpB,YAAI,MAAM,KAAK,IAAI,KAAK,GAAG;AAAA,MAC7B;AAEA,aAAO;AAAA,IACT;AAAA;AAAA;;;AC/BA;AAAA;AAAA,QAAI,SAAS;AACb,QAAI,QAAQ;AAEZ,WAAO,UAAU;AAKjB,QAAI,QAAQ,IAAI,WAAW,CAAC;AAC5B,QAAI,QAAQ,IAAI,WAAW,MAAM,MAAM;AACvC,QAAI,SAAS,IAAI,YAAY,MAAM,MAAM;AAEzC,aAAS,aAAc,QAAQ;AAC7B,UAAI,YAAY;AAChB,UAAI,MAAM;AACV,UAAI;AAEJ,WAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAClC,qBAAa,OAAO,CAAC,EAAE,KAAK;AAC5B,qBAAa;AAAA,MACf;AAEA,UAAI,SAAS,IAAI,WAAW,SAAS;AAErC,aAAO,CAAC,IAAI;AACZ,aAAO,CAAC,IAAI;AACZ,aAAO,CAAC,IAAI;AACZ,aAAO,CAAC,IAAI;AACZ,aAAO,CAAC,IAAI;AACZ,aAAO,CAAC,IAAI;AACZ,aAAO,CAAC,IAAI;AACZ,aAAO,CAAC,IAAI;AAEZ,WAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAClC,YAAI,QAAQ,OAAO,CAAC;AACpB,YAAI,OAAO,MAAM;AACjB,YAAI,OAAO,MAAM;AACjB,YAAI,OAAO,KAAK;AAChB,YAAI,YAAY;AAAA,UACd,KAAK,WAAW,CAAC;AAAA,UACjB,KAAK,WAAW,CAAC;AAAA,UACjB,KAAK,WAAW,CAAC;AAAA,UACjB,KAAK,WAAW,CAAC;AAAA,QACnB;AAEA,eAAO,CAAC,IAAI;AACZ,eAAO,KAAK,IAAI,MAAM,CAAC;AACvB,eAAO,KAAK,IAAI,MAAM,CAAC;AACvB,eAAO,KAAK,IAAI,MAAM,CAAC;AACvB,eAAO,KAAK,IAAI,MAAM,CAAC;AAEvB,eAAO,KAAK,IAAI,UAAU,CAAC;AAC3B,eAAO,KAAK,IAAI,UAAU,CAAC;AAC3B,eAAO,KAAK,IAAI,UAAU,CAAC;AAC3B,eAAO,KAAK,IAAI,UAAU,CAAC;AAE3B,iBAAS,IAAI,GAAG,IAAI,QAAO;AACzB,iBAAO,KAAK,IAAI,KAAK,GAAG;AAAA,QAC1B;AAEA,YAAI,WAAW,UAAU,OAAO,OAAO,IAAI,CAAC;AAC5C,YAAI,MAAM,MAAM,IAAI,QAAQ;AAE5B,cAAM,CAAC,IAAI;AACX,eAAO,KAAK,IAAI,MAAM,CAAC;AACvB,eAAO,KAAK,IAAI,MAAM,CAAC;AACvB,eAAO,KAAK,IAAI,MAAM,CAAC;AACvB,eAAO,KAAK,IAAI,MAAM,CAAC;AAAA,MACzB;AAEA,aAAO;AAAA,IACT;AAAA;AAAA;",
  "names": []
}
